
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Exercise
 * 
 */
export type Exercise = $Result.DefaultSelection<Prisma.$ExercisePayload>
/**
 * Model WorkoutTemplate
 * 
 */
export type WorkoutTemplate = $Result.DefaultSelection<Prisma.$WorkoutTemplatePayload>
/**
 * Model WorkoutTemplateExercise
 * 
 */
export type WorkoutTemplateExercise = $Result.DefaultSelection<Prisma.$WorkoutTemplateExercisePayload>
/**
 * Model WorkoutTemplateSet
 * 
 */
export type WorkoutTemplateSet = $Result.DefaultSelection<Prisma.$WorkoutTemplateSetPayload>
/**
 * Model WorkoutSession
 * 
 */
export type WorkoutSession = $Result.DefaultSelection<Prisma.$WorkoutSessionPayload>
/**
 * Model WorkoutSessionExercise
 * 
 */
export type WorkoutSessionExercise = $Result.DefaultSelection<Prisma.$WorkoutSessionExercisePayload>
/**
 * Model WorkoutSessionSet
 * 
 */
export type WorkoutSessionSet = $Result.DefaultSelection<Prisma.$WorkoutSessionSetPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exercise`: Exposes CRUD operations for the **Exercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercises
    * const exercises = await prisma.exercise.findMany()
    * ```
    */
  get exercise(): Prisma.ExerciseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workoutTemplate`: Exposes CRUD operations for the **WorkoutTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutTemplates
    * const workoutTemplates = await prisma.workoutTemplate.findMany()
    * ```
    */
  get workoutTemplate(): Prisma.WorkoutTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workoutTemplateExercise`: Exposes CRUD operations for the **WorkoutTemplateExercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutTemplateExercises
    * const workoutTemplateExercises = await prisma.workoutTemplateExercise.findMany()
    * ```
    */
  get workoutTemplateExercise(): Prisma.WorkoutTemplateExerciseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workoutTemplateSet`: Exposes CRUD operations for the **WorkoutTemplateSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutTemplateSets
    * const workoutTemplateSets = await prisma.workoutTemplateSet.findMany()
    * ```
    */
  get workoutTemplateSet(): Prisma.WorkoutTemplateSetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workoutSession`: Exposes CRUD operations for the **WorkoutSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutSessions
    * const workoutSessions = await prisma.workoutSession.findMany()
    * ```
    */
  get workoutSession(): Prisma.WorkoutSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workoutSessionExercise`: Exposes CRUD operations for the **WorkoutSessionExercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutSessionExercises
    * const workoutSessionExercises = await prisma.workoutSessionExercise.findMany()
    * ```
    */
  get workoutSessionExercise(): Prisma.WorkoutSessionExerciseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workoutSessionSet`: Exposes CRUD operations for the **WorkoutSessionSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkoutSessionSets
    * const workoutSessionSets = await prisma.workoutSessionSet.findMany()
    * ```
    */
  get workoutSessionSet(): Prisma.WorkoutSessionSetDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.4.1
   * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Exercise: 'Exercise',
    WorkoutTemplate: 'WorkoutTemplate',
    WorkoutTemplateExercise: 'WorkoutTemplateExercise',
    WorkoutTemplateSet: 'WorkoutTemplateSet',
    WorkoutSession: 'WorkoutSession',
    WorkoutSessionExercise: 'WorkoutSessionExercise',
    WorkoutSessionSet: 'WorkoutSessionSet'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "exercise" | "workoutTemplate" | "workoutTemplateExercise" | "workoutTemplateSet" | "workoutSession" | "workoutSessionExercise" | "workoutSessionSet"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Exercise: {
        payload: Prisma.$ExercisePayload<ExtArgs>
        fields: Prisma.ExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findFirst: {
            args: Prisma.ExerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findMany: {
            args: Prisma.ExerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          create: {
            args: Prisma.ExerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          createMany: {
            args: Prisma.ExerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          delete: {
            args: Prisma.ExerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          update: {
            args: Prisma.ExerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          deleteMany: {
            args: Prisma.ExerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExerciseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          upsert: {
            args: Prisma.ExerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          aggregate: {
            args: Prisma.ExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExercise>
          }
          groupBy: {
            args: Prisma.ExerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExerciseCountArgs<ExtArgs>
            result: $Utils.Optional<ExerciseCountAggregateOutputType> | number
          }
        }
      }
      WorkoutTemplate: {
        payload: Prisma.$WorkoutTemplatePayload<ExtArgs>
        fields: Prisma.WorkoutTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplatePayload>
          }
          findFirst: {
            args: Prisma.WorkoutTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplatePayload>
          }
          findMany: {
            args: Prisma.WorkoutTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplatePayload>[]
          }
          create: {
            args: Prisma.WorkoutTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplatePayload>
          }
          createMany: {
            args: Prisma.WorkoutTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplatePayload>[]
          }
          delete: {
            args: Prisma.WorkoutTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplatePayload>
          }
          update: {
            args: Prisma.WorkoutTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplatePayload>
          }
          deleteMany: {
            args: Prisma.WorkoutTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkoutTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplatePayload>[]
          }
          upsert: {
            args: Prisma.WorkoutTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplatePayload>
          }
          aggregate: {
            args: Prisma.WorkoutTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutTemplate>
          }
          groupBy: {
            args: Prisma.WorkoutTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutTemplateCountAggregateOutputType> | number
          }
        }
      }
      WorkoutTemplateExercise: {
        payload: Prisma.$WorkoutTemplateExercisePayload<ExtArgs>
        fields: Prisma.WorkoutTemplateExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutTemplateExerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutTemplateExerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateExercisePayload>
          }
          findFirst: {
            args: Prisma.WorkoutTemplateExerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutTemplateExerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateExercisePayload>
          }
          findMany: {
            args: Prisma.WorkoutTemplateExerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateExercisePayload>[]
          }
          create: {
            args: Prisma.WorkoutTemplateExerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateExercisePayload>
          }
          createMany: {
            args: Prisma.WorkoutTemplateExerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutTemplateExerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateExercisePayload>[]
          }
          delete: {
            args: Prisma.WorkoutTemplateExerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateExercisePayload>
          }
          update: {
            args: Prisma.WorkoutTemplateExerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateExercisePayload>
          }
          deleteMany: {
            args: Prisma.WorkoutTemplateExerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutTemplateExerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkoutTemplateExerciseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateExercisePayload>[]
          }
          upsert: {
            args: Prisma.WorkoutTemplateExerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateExercisePayload>
          }
          aggregate: {
            args: Prisma.WorkoutTemplateExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutTemplateExercise>
          }
          groupBy: {
            args: Prisma.WorkoutTemplateExerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutTemplateExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutTemplateExerciseCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutTemplateExerciseCountAggregateOutputType> | number
          }
        }
      }
      WorkoutTemplateSet: {
        payload: Prisma.$WorkoutTemplateSetPayload<ExtArgs>
        fields: Prisma.WorkoutTemplateSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutTemplateSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutTemplateSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateSetPayload>
          }
          findFirst: {
            args: Prisma.WorkoutTemplateSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutTemplateSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateSetPayload>
          }
          findMany: {
            args: Prisma.WorkoutTemplateSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateSetPayload>[]
          }
          create: {
            args: Prisma.WorkoutTemplateSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateSetPayload>
          }
          createMany: {
            args: Prisma.WorkoutTemplateSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutTemplateSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateSetPayload>[]
          }
          delete: {
            args: Prisma.WorkoutTemplateSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateSetPayload>
          }
          update: {
            args: Prisma.WorkoutTemplateSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateSetPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutTemplateSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutTemplateSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkoutTemplateSetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateSetPayload>[]
          }
          upsert: {
            args: Prisma.WorkoutTemplateSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutTemplateSetPayload>
          }
          aggregate: {
            args: Prisma.WorkoutTemplateSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutTemplateSet>
          }
          groupBy: {
            args: Prisma.WorkoutTemplateSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutTemplateSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutTemplateSetCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutTemplateSetCountAggregateOutputType> | number
          }
        }
      }
      WorkoutSession: {
        payload: Prisma.$WorkoutSessionPayload<ExtArgs>
        fields: Prisma.WorkoutSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionPayload>
          }
          findFirst: {
            args: Prisma.WorkoutSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionPayload>
          }
          findMany: {
            args: Prisma.WorkoutSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionPayload>[]
          }
          create: {
            args: Prisma.WorkoutSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionPayload>
          }
          createMany: {
            args: Prisma.WorkoutSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionPayload>[]
          }
          delete: {
            args: Prisma.WorkoutSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionPayload>
          }
          update: {
            args: Prisma.WorkoutSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkoutSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionPayload>[]
          }
          upsert: {
            args: Prisma.WorkoutSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionPayload>
          }
          aggregate: {
            args: Prisma.WorkoutSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutSession>
          }
          groupBy: {
            args: Prisma.WorkoutSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutSessionCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutSessionCountAggregateOutputType> | number
          }
        }
      }
      WorkoutSessionExercise: {
        payload: Prisma.$WorkoutSessionExercisePayload<ExtArgs>
        fields: Prisma.WorkoutSessionExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutSessionExerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutSessionExerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionExercisePayload>
          }
          findFirst: {
            args: Prisma.WorkoutSessionExerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutSessionExerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionExercisePayload>
          }
          findMany: {
            args: Prisma.WorkoutSessionExerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionExercisePayload>[]
          }
          create: {
            args: Prisma.WorkoutSessionExerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionExercisePayload>
          }
          createMany: {
            args: Prisma.WorkoutSessionExerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutSessionExerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionExercisePayload>[]
          }
          delete: {
            args: Prisma.WorkoutSessionExerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionExercisePayload>
          }
          update: {
            args: Prisma.WorkoutSessionExerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionExercisePayload>
          }
          deleteMany: {
            args: Prisma.WorkoutSessionExerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutSessionExerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkoutSessionExerciseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionExercisePayload>[]
          }
          upsert: {
            args: Prisma.WorkoutSessionExerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionExercisePayload>
          }
          aggregate: {
            args: Prisma.WorkoutSessionExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutSessionExercise>
          }
          groupBy: {
            args: Prisma.WorkoutSessionExerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutSessionExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutSessionExerciseCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutSessionExerciseCountAggregateOutputType> | number
          }
        }
      }
      WorkoutSessionSet: {
        payload: Prisma.$WorkoutSessionSetPayload<ExtArgs>
        fields: Prisma.WorkoutSessionSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutSessionSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutSessionSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionSetPayload>
          }
          findFirst: {
            args: Prisma.WorkoutSessionSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutSessionSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionSetPayload>
          }
          findMany: {
            args: Prisma.WorkoutSessionSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionSetPayload>[]
          }
          create: {
            args: Prisma.WorkoutSessionSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionSetPayload>
          }
          createMany: {
            args: Prisma.WorkoutSessionSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutSessionSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionSetPayload>[]
          }
          delete: {
            args: Prisma.WorkoutSessionSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionSetPayload>
          }
          update: {
            args: Prisma.WorkoutSessionSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionSetPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutSessionSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutSessionSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkoutSessionSetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionSetPayload>[]
          }
          upsert: {
            args: Prisma.WorkoutSessionSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkoutSessionSetPayload>
          }
          aggregate: {
            args: Prisma.WorkoutSessionSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutSessionSet>
          }
          groupBy: {
            args: Prisma.WorkoutSessionSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutSessionSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutSessionSetCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutSessionSetCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    exercise?: ExerciseOmit
    workoutTemplate?: WorkoutTemplateOmit
    workoutTemplateExercise?: WorkoutTemplateExerciseOmit
    workoutTemplateSet?: WorkoutTemplateSetOmit
    workoutSession?: WorkoutSessionOmit
    workoutSessionExercise?: WorkoutSessionExerciseOmit
    workoutSessionSet?: WorkoutSessionSetOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    workoutTemplates: number
    workoutSessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutTemplates?: boolean | UserCountOutputTypeCountWorkoutTemplatesArgs
    workoutSessions?: boolean | UserCountOutputTypeCountWorkoutSessionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkoutTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutTemplateWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkoutSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutSessionWhereInput
  }


  /**
   * Count Type ExerciseCountOutputType
   */

  export type ExerciseCountOutputType = {
    workoutTemplateExercises: number
    workoutSessionExercises: number
  }

  export type ExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutTemplateExercises?: boolean | ExerciseCountOutputTypeCountWorkoutTemplateExercisesArgs
    workoutSessionExercises?: boolean | ExerciseCountOutputTypeCountWorkoutSessionExercisesArgs
  }

  // Custom InputTypes
  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCountOutputType
     */
    select?: ExerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountWorkoutTemplateExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutTemplateExerciseWhereInput
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountWorkoutSessionExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutSessionExerciseWhereInput
  }


  /**
   * Count Type WorkoutTemplateCountOutputType
   */

  export type WorkoutTemplateCountOutputType = {
    exercises: number
    workoutSessions: number
  }

  export type WorkoutTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | WorkoutTemplateCountOutputTypeCountExercisesArgs
    workoutSessions?: boolean | WorkoutTemplateCountOutputTypeCountWorkoutSessionsArgs
  }

  // Custom InputTypes
  /**
   * WorkoutTemplateCountOutputType without action
   */
  export type WorkoutTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateCountOutputType
     */
    select?: WorkoutTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutTemplateCountOutputType without action
   */
  export type WorkoutTemplateCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutTemplateExerciseWhereInput
  }

  /**
   * WorkoutTemplateCountOutputType without action
   */
  export type WorkoutTemplateCountOutputTypeCountWorkoutSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutSessionWhereInput
  }


  /**
   * Count Type WorkoutTemplateExerciseCountOutputType
   */

  export type WorkoutTemplateExerciseCountOutputType = {
    sets: number
  }

  export type WorkoutTemplateExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sets?: boolean | WorkoutTemplateExerciseCountOutputTypeCountSetsArgs
  }

  // Custom InputTypes
  /**
   * WorkoutTemplateExerciseCountOutputType without action
   */
  export type WorkoutTemplateExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateExerciseCountOutputType
     */
    select?: WorkoutTemplateExerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutTemplateExerciseCountOutputType without action
   */
  export type WorkoutTemplateExerciseCountOutputTypeCountSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutTemplateSetWhereInput
  }


  /**
   * Count Type WorkoutSessionCountOutputType
   */

  export type WorkoutSessionCountOutputType = {
    exercises: number
  }

  export type WorkoutSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | WorkoutSessionCountOutputTypeCountExercisesArgs
  }

  // Custom InputTypes
  /**
   * WorkoutSessionCountOutputType without action
   */
  export type WorkoutSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionCountOutputType
     */
    select?: WorkoutSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutSessionCountOutputType without action
   */
  export type WorkoutSessionCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutSessionExerciseWhereInput
  }


  /**
   * Count Type WorkoutSessionExerciseCountOutputType
   */

  export type WorkoutSessionExerciseCountOutputType = {
    sets: number
  }

  export type WorkoutSessionExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sets?: boolean | WorkoutSessionExerciseCountOutputTypeCountSetsArgs
  }

  // Custom InputTypes
  /**
   * WorkoutSessionExerciseCountOutputType without action
   */
  export type WorkoutSessionExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionExerciseCountOutputType
     */
    select?: WorkoutSessionExerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutSessionExerciseCountOutputType without action
   */
  export type WorkoutSessionExerciseCountOutputTypeCountSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutSessionSetWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    name: string | null
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
    workoutTemplates?: boolean | User$workoutTemplatesArgs<ExtArgs>
    workoutSessions?: boolean | User$workoutSessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutTemplates?: boolean | User$workoutTemplatesArgs<ExtArgs>
    workoutSessions?: boolean | User$workoutSessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      workoutTemplates: Prisma.$WorkoutTemplatePayload<ExtArgs>[]
      workoutSessions: Prisma.$WorkoutSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      name: string | null
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workoutTemplates<T extends User$workoutTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, User$workoutTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutTemplatePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    workoutSessions<T extends User$workoutSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$workoutSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSessionPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.workoutTemplates
   */
  export type User$workoutTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplate
     */
    select?: WorkoutTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplate
     */
    omit?: WorkoutTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateInclude<ExtArgs> | null
    where?: WorkoutTemplateWhereInput
    orderBy?: WorkoutTemplateOrderByWithRelationInput | WorkoutTemplateOrderByWithRelationInput[]
    cursor?: WorkoutTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutTemplateScalarFieldEnum | WorkoutTemplateScalarFieldEnum[]
  }

  /**
   * User.workoutSessions
   */
  export type User$workoutSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSession
     */
    select?: WorkoutSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSession
     */
    omit?: WorkoutSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionInclude<ExtArgs> | null
    where?: WorkoutSessionWhereInput
    orderBy?: WorkoutSessionOrderByWithRelationInput | WorkoutSessionOrderByWithRelationInput[]
    cursor?: WorkoutSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutSessionScalarFieldEnum | WorkoutSessionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Exercise
   */

  export type AggregateExercise = {
    _count: ExerciseCountAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  export type ExerciseMinAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    force: string | null
    level: string | null
    mechanic: string | null
    equipment: string | null
    image: string | null
  }

  export type ExerciseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    force: string | null
    level: string | null
    mechanic: string | null
    equipment: string | null
    image: string | null
  }

  export type ExerciseCountAggregateOutputType = {
    id: number
    name: number
    category: number
    force: number
    level: number
    mechanic: number
    equipment: number
    primaryMuscles: number
    secondaryMuscles: number
    instructions: number
    image: number
    _all: number
  }


  export type ExerciseMinAggregateInputType = {
    id?: true
    name?: true
    category?: true
    force?: true
    level?: true
    mechanic?: true
    equipment?: true
    image?: true
  }

  export type ExerciseMaxAggregateInputType = {
    id?: true
    name?: true
    category?: true
    force?: true
    level?: true
    mechanic?: true
    equipment?: true
    image?: true
  }

  export type ExerciseCountAggregateInputType = {
    id?: true
    name?: true
    category?: true
    force?: true
    level?: true
    mechanic?: true
    equipment?: true
    primaryMuscles?: true
    secondaryMuscles?: true
    instructions?: true
    image?: true
    _all?: true
  }

  export type ExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercise to aggregate.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exercises
    **/
    _count?: true | ExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseMaxAggregateInputType
  }

  export type GetExerciseAggregateType<T extends ExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercise[P]>
      : GetScalarType<T[P], AggregateExercise[P]>
  }




  export type ExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithAggregationInput | ExerciseOrderByWithAggregationInput[]
    by: ExerciseScalarFieldEnum[] | ExerciseScalarFieldEnum
    having?: ExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseCountAggregateInputType | true
    _min?: ExerciseMinAggregateInputType
    _max?: ExerciseMaxAggregateInputType
  }

  export type ExerciseGroupByOutputType = {
    id: string
    name: string
    category: string
    force: string | null
    level: string | null
    mechanic: string | null
    equipment: string | null
    primaryMuscles: string[]
    secondaryMuscles: string[]
    instructions: string[]
    image: string | null
    _count: ExerciseCountAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  type GetExerciseGroupByPayload<T extends ExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    force?: boolean
    level?: boolean
    mechanic?: boolean
    equipment?: boolean
    primaryMuscles?: boolean
    secondaryMuscles?: boolean
    instructions?: boolean
    image?: boolean
    workoutTemplateExercises?: boolean | Exercise$workoutTemplateExercisesArgs<ExtArgs>
    workoutSessionExercises?: boolean | Exercise$workoutSessionExercisesArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    force?: boolean
    level?: boolean
    mechanic?: boolean
    equipment?: boolean
    primaryMuscles?: boolean
    secondaryMuscles?: boolean
    instructions?: boolean
    image?: boolean
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    force?: boolean
    level?: boolean
    mechanic?: boolean
    equipment?: boolean
    primaryMuscles?: boolean
    secondaryMuscles?: boolean
    instructions?: boolean
    image?: boolean
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectScalar = {
    id?: boolean
    name?: boolean
    category?: boolean
    force?: boolean
    level?: boolean
    mechanic?: boolean
    equipment?: boolean
    primaryMuscles?: boolean
    secondaryMuscles?: boolean
    instructions?: boolean
    image?: boolean
  }

  export type ExerciseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "category" | "force" | "level" | "mechanic" | "equipment" | "primaryMuscles" | "secondaryMuscles" | "instructions" | "image", ExtArgs["result"]["exercise"]>
  export type ExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutTemplateExercises?: boolean | Exercise$workoutTemplateExercisesArgs<ExtArgs>
    workoutSessionExercises?: boolean | Exercise$workoutSessionExercisesArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ExerciseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exercise"
    objects: {
      workoutTemplateExercises: Prisma.$WorkoutTemplateExercisePayload<ExtArgs>[]
      workoutSessionExercises: Prisma.$WorkoutSessionExercisePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      category: string
      force: string | null
      level: string | null
      mechanic: string | null
      equipment: string | null
      primaryMuscles: string[]
      secondaryMuscles: string[]
      instructions: string[]
      image: string | null
    }, ExtArgs["result"]["exercise"]>
    composites: {}
  }

  type ExerciseGetPayload<S extends boolean | null | undefined | ExerciseDefaultArgs> = $Result.GetResult<Prisma.$ExercisePayload, S>

  type ExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExerciseCountAggregateInputType | true
    }

  export interface ExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exercise'], meta: { name: 'Exercise' } }
    /**
     * Find zero or one Exercise that matches the filter.
     * @param {ExerciseFindUniqueArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExerciseFindUniqueArgs>(args: SelectSubset<T, ExerciseFindUniqueArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Exercise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExerciseFindUniqueOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, ExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Exercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExerciseFindFirstArgs>(args?: SelectSubset<T, ExerciseFindFirstArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Exercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, ExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Exercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercises
     * const exercises = await prisma.exercise.findMany()
     * 
     * // Get first 10 Exercises
     * const exercises = await prisma.exercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseWithIdOnly = await prisma.exercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExerciseFindManyArgs>(args?: SelectSubset<T, ExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Exercise.
     * @param {ExerciseCreateArgs} args - Arguments to create a Exercise.
     * @example
     * // Create one Exercise
     * const Exercise = await prisma.exercise.create({
     *   data: {
     *     // ... data to create a Exercise
     *   }
     * })
     * 
     */
    create<T extends ExerciseCreateArgs>(args: SelectSubset<T, ExerciseCreateArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Exercises.
     * @param {ExerciseCreateManyArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExerciseCreateManyArgs>(args?: SelectSubset<T, ExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Exercises and returns the data saved in the database.
     * @param {ExerciseCreateManyAndReturnArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Exercises and only return the `id`
     * const exerciseWithIdOnly = await prisma.exercise.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, ExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Exercise.
     * @param {ExerciseDeleteArgs} args - Arguments to delete one Exercise.
     * @example
     * // Delete one Exercise
     * const Exercise = await prisma.exercise.delete({
     *   where: {
     *     // ... filter to delete one Exercise
     *   }
     * })
     * 
     */
    delete<T extends ExerciseDeleteArgs>(args: SelectSubset<T, ExerciseDeleteArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Exercise.
     * @param {ExerciseUpdateArgs} args - Arguments to update one Exercise.
     * @example
     * // Update one Exercise
     * const exercise = await prisma.exercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExerciseUpdateArgs>(args: SelectSubset<T, ExerciseUpdateArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Exercises.
     * @param {ExerciseDeleteManyArgs} args - Arguments to filter Exercises to delete.
     * @example
     * // Delete a few Exercises
     * const { count } = await prisma.exercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExerciseDeleteManyArgs>(args?: SelectSubset<T, ExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExerciseUpdateManyArgs>(args: SelectSubset<T, ExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises and returns the data updated in the database.
     * @param {ExerciseUpdateManyAndReturnArgs} args - Arguments to update many Exercises.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Exercises and only return the `id`
     * const exerciseWithIdOnly = await prisma.exercise.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExerciseUpdateManyAndReturnArgs>(args: SelectSubset<T, ExerciseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Exercise.
     * @param {ExerciseUpsertArgs} args - Arguments to update or create a Exercise.
     * @example
     * // Update or create a Exercise
     * const exercise = await prisma.exercise.upsert({
     *   create: {
     *     // ... data to create a Exercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercise we want to update
     *   }
     * })
     */
    upsert<T extends ExerciseUpsertArgs>(args: SelectSubset<T, ExerciseUpsertArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCountArgs} args - Arguments to filter Exercises to count.
     * @example
     * // Count the number of Exercises
     * const count = await prisma.exercise.count({
     *   where: {
     *     // ... the filter for the Exercises we want to count
     *   }
     * })
    **/
    count<T extends ExerciseCountArgs>(
      args?: Subset<T, ExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseAggregateArgs>(args: Subset<T, ExerciseAggregateArgs>): Prisma.PrismaPromise<GetExerciseAggregateType<T>>

    /**
     * Group by Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exercise model
   */
  readonly fields: ExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workoutTemplateExercises<T extends Exercise$workoutTemplateExercisesArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$workoutTemplateExercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutTemplateExercisePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    workoutSessionExercises<T extends Exercise$workoutSessionExercisesArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$workoutSessionExercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSessionExercisePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Exercise model
   */ 
  interface ExerciseFieldRefs {
    readonly id: FieldRef<"Exercise", 'String'>
    readonly name: FieldRef<"Exercise", 'String'>
    readonly category: FieldRef<"Exercise", 'String'>
    readonly force: FieldRef<"Exercise", 'String'>
    readonly level: FieldRef<"Exercise", 'String'>
    readonly mechanic: FieldRef<"Exercise", 'String'>
    readonly equipment: FieldRef<"Exercise", 'String'>
    readonly primaryMuscles: FieldRef<"Exercise", 'String[]'>
    readonly secondaryMuscles: FieldRef<"Exercise", 'String[]'>
    readonly instructions: FieldRef<"Exercise", 'String[]'>
    readonly image: FieldRef<"Exercise", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Exercise findUnique
   */
  export type ExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise findUniqueOrThrow
   */
  export type ExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise findFirst
   */
  export type ExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise findFirstOrThrow
   */
  export type ExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise findMany
   */
  export type ExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercises to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise create
   */
  export type ExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a Exercise.
     */
    data: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
  }

  /**
   * Exercise createMany
   */
  export type ExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exercise createManyAndReturn
   */
  export type ExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exercise update
   */
  export type ExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a Exercise.
     */
    data: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
    /**
     * Choose, which Exercise to update.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise updateMany
   */
  export type ExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExerciseWhereInput
    /**
     * Limit how many Exercises to update.
     */
    limit?: number
  }

  /**
   * Exercise updateManyAndReturn
   */
  export type ExerciseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExerciseWhereInput
    /**
     * Limit how many Exercises to update.
     */
    limit?: number
  }

  /**
   * Exercise upsert
   */
  export type ExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the Exercise to update in case it exists.
     */
    where: ExerciseWhereUniqueInput
    /**
     * In case the Exercise found by the `where` argument doesn't exist, create a new Exercise with this data.
     */
    create: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
    /**
     * In case the Exercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
  }

  /**
   * Exercise delete
   */
  export type ExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter which Exercise to delete.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise deleteMany
   */
  export type ExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercises to delete
     */
    where?: ExerciseWhereInput
    /**
     * Limit how many Exercises to delete.
     */
    limit?: number
  }

  /**
   * Exercise.workoutTemplateExercises
   */
  export type Exercise$workoutTemplateExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateExercise
     */
    select?: WorkoutTemplateExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateExercise
     */
    omit?: WorkoutTemplateExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateExerciseInclude<ExtArgs> | null
    where?: WorkoutTemplateExerciseWhereInput
    orderBy?: WorkoutTemplateExerciseOrderByWithRelationInput | WorkoutTemplateExerciseOrderByWithRelationInput[]
    cursor?: WorkoutTemplateExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutTemplateExerciseScalarFieldEnum | WorkoutTemplateExerciseScalarFieldEnum[]
  }

  /**
   * Exercise.workoutSessionExercises
   */
  export type Exercise$workoutSessionExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionExercise
     */
    select?: WorkoutSessionExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionExercise
     */
    omit?: WorkoutSessionExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionExerciseInclude<ExtArgs> | null
    where?: WorkoutSessionExerciseWhereInput
    orderBy?: WorkoutSessionExerciseOrderByWithRelationInput | WorkoutSessionExerciseOrderByWithRelationInput[]
    cursor?: WorkoutSessionExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutSessionExerciseScalarFieldEnum | WorkoutSessionExerciseScalarFieldEnum[]
  }

  /**
   * Exercise without action
   */
  export type ExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exercise
     */
    omit?: ExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutTemplate
   */

  export type AggregateWorkoutTemplate = {
    _count: WorkoutTemplateCountAggregateOutputType | null
    _min: WorkoutTemplateMinAggregateOutputType | null
    _max: WorkoutTemplateMaxAggregateOutputType | null
  }

  export type WorkoutTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type WorkoutTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type WorkoutTemplateCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    createdAt: number
    _all: number
  }


  export type WorkoutTemplateMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
  }

  export type WorkoutTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
  }

  export type WorkoutTemplateCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type WorkoutTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutTemplate to aggregate.
     */
    where?: WorkoutTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutTemplates to fetch.
     */
    orderBy?: WorkoutTemplateOrderByWithRelationInput | WorkoutTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutTemplates
    **/
    _count?: true | WorkoutTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutTemplateMaxAggregateInputType
  }

  export type GetWorkoutTemplateAggregateType<T extends WorkoutTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutTemplate[P]>
      : GetScalarType<T[P], AggregateWorkoutTemplate[P]>
  }




  export type WorkoutTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutTemplateWhereInput
    orderBy?: WorkoutTemplateOrderByWithAggregationInput | WorkoutTemplateOrderByWithAggregationInput[]
    by: WorkoutTemplateScalarFieldEnum[] | WorkoutTemplateScalarFieldEnum
    having?: WorkoutTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutTemplateCountAggregateInputType | true
    _min?: WorkoutTemplateMinAggregateInputType
    _max?: WorkoutTemplateMaxAggregateInputType
  }

  export type WorkoutTemplateGroupByOutputType = {
    id: string
    name: string
    userId: string
    createdAt: Date
    _count: WorkoutTemplateCountAggregateOutputType | null
    _min: WorkoutTemplateMinAggregateOutputType | null
    _max: WorkoutTemplateMaxAggregateOutputType | null
  }

  type GetWorkoutTemplateGroupByPayload<T extends WorkoutTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutTemplateGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    exercises?: boolean | WorkoutTemplate$exercisesArgs<ExtArgs>
    workoutSessions?: boolean | WorkoutTemplate$workoutSessionsArgs<ExtArgs>
    _count?: boolean | WorkoutTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutTemplate"]>

  export type WorkoutTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutTemplate"]>

  export type WorkoutTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutTemplate"]>

  export type WorkoutTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type WorkoutTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "userId" | "createdAt", ExtArgs["result"]["workoutTemplate"]>
  export type WorkoutTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    exercises?: boolean | WorkoutTemplate$exercisesArgs<ExtArgs>
    workoutSessions?: boolean | WorkoutTemplate$workoutSessionsArgs<ExtArgs>
    _count?: boolean | WorkoutTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkoutTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WorkoutTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WorkoutTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutTemplate"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      exercises: Prisma.$WorkoutTemplateExercisePayload<ExtArgs>[]
      workoutSessions: Prisma.$WorkoutSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["workoutTemplate"]>
    composites: {}
  }

  type WorkoutTemplateGetPayload<S extends boolean | null | undefined | WorkoutTemplateDefaultArgs> = $Result.GetResult<Prisma.$WorkoutTemplatePayload, S>

  type WorkoutTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkoutTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkoutTemplateCountAggregateInputType | true
    }

  export interface WorkoutTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutTemplate'], meta: { name: 'WorkoutTemplate' } }
    /**
     * Find zero or one WorkoutTemplate that matches the filter.
     * @param {WorkoutTemplateFindUniqueArgs} args - Arguments to find a WorkoutTemplate
     * @example
     * // Get one WorkoutTemplate
     * const workoutTemplate = await prisma.workoutTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutTemplateFindUniqueArgs>(args: SelectSubset<T, WorkoutTemplateFindUniqueArgs<ExtArgs>>): Prisma__WorkoutTemplateClient<$Result.GetResult<Prisma.$WorkoutTemplatePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one WorkoutTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkoutTemplateFindUniqueOrThrowArgs} args - Arguments to find a WorkoutTemplate
     * @example
     * // Get one WorkoutTemplate
     * const workoutTemplate = await prisma.workoutTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutTemplateClient<$Result.GetResult<Prisma.$WorkoutTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first WorkoutTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateFindFirstArgs} args - Arguments to find a WorkoutTemplate
     * @example
     * // Get one WorkoutTemplate
     * const workoutTemplate = await prisma.workoutTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutTemplateFindFirstArgs>(args?: SelectSubset<T, WorkoutTemplateFindFirstArgs<ExtArgs>>): Prisma__WorkoutTemplateClient<$Result.GetResult<Prisma.$WorkoutTemplatePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first WorkoutTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateFindFirstOrThrowArgs} args - Arguments to find a WorkoutTemplate
     * @example
     * // Get one WorkoutTemplate
     * const workoutTemplate = await prisma.workoutTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutTemplateClient<$Result.GetResult<Prisma.$WorkoutTemplatePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more WorkoutTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutTemplates
     * const workoutTemplates = await prisma.workoutTemplate.findMany()
     * 
     * // Get first 10 WorkoutTemplates
     * const workoutTemplates = await prisma.workoutTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutTemplateWithIdOnly = await prisma.workoutTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutTemplateFindManyArgs>(args?: SelectSubset<T, WorkoutTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutTemplatePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a WorkoutTemplate.
     * @param {WorkoutTemplateCreateArgs} args - Arguments to create a WorkoutTemplate.
     * @example
     * // Create one WorkoutTemplate
     * const WorkoutTemplate = await prisma.workoutTemplate.create({
     *   data: {
     *     // ... data to create a WorkoutTemplate
     *   }
     * })
     * 
     */
    create<T extends WorkoutTemplateCreateArgs>(args: SelectSubset<T, WorkoutTemplateCreateArgs<ExtArgs>>): Prisma__WorkoutTemplateClient<$Result.GetResult<Prisma.$WorkoutTemplatePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many WorkoutTemplates.
     * @param {WorkoutTemplateCreateManyArgs} args - Arguments to create many WorkoutTemplates.
     * @example
     * // Create many WorkoutTemplates
     * const workoutTemplate = await prisma.workoutTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutTemplateCreateManyArgs>(args?: SelectSubset<T, WorkoutTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutTemplates and returns the data saved in the database.
     * @param {WorkoutTemplateCreateManyAndReturnArgs} args - Arguments to create many WorkoutTemplates.
     * @example
     * // Create many WorkoutTemplates
     * const workoutTemplate = await prisma.workoutTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutTemplates and only return the `id`
     * const workoutTemplateWithIdOnly = await prisma.workoutTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutTemplatePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a WorkoutTemplate.
     * @param {WorkoutTemplateDeleteArgs} args - Arguments to delete one WorkoutTemplate.
     * @example
     * // Delete one WorkoutTemplate
     * const WorkoutTemplate = await prisma.workoutTemplate.delete({
     *   where: {
     *     // ... filter to delete one WorkoutTemplate
     *   }
     * })
     * 
     */
    delete<T extends WorkoutTemplateDeleteArgs>(args: SelectSubset<T, WorkoutTemplateDeleteArgs<ExtArgs>>): Prisma__WorkoutTemplateClient<$Result.GetResult<Prisma.$WorkoutTemplatePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one WorkoutTemplate.
     * @param {WorkoutTemplateUpdateArgs} args - Arguments to update one WorkoutTemplate.
     * @example
     * // Update one WorkoutTemplate
     * const workoutTemplate = await prisma.workoutTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutTemplateUpdateArgs>(args: SelectSubset<T, WorkoutTemplateUpdateArgs<ExtArgs>>): Prisma__WorkoutTemplateClient<$Result.GetResult<Prisma.$WorkoutTemplatePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more WorkoutTemplates.
     * @param {WorkoutTemplateDeleteManyArgs} args - Arguments to filter WorkoutTemplates to delete.
     * @example
     * // Delete a few WorkoutTemplates
     * const { count } = await prisma.workoutTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutTemplateDeleteManyArgs>(args?: SelectSubset<T, WorkoutTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutTemplates
     * const workoutTemplate = await prisma.workoutTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutTemplateUpdateManyArgs>(args: SelectSubset<T, WorkoutTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutTemplates and returns the data updated in the database.
     * @param {WorkoutTemplateUpdateManyAndReturnArgs} args - Arguments to update many WorkoutTemplates.
     * @example
     * // Update many WorkoutTemplates
     * const workoutTemplate = await prisma.workoutTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkoutTemplates and only return the `id`
     * const workoutTemplateWithIdOnly = await prisma.workoutTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkoutTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkoutTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutTemplatePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one WorkoutTemplate.
     * @param {WorkoutTemplateUpsertArgs} args - Arguments to update or create a WorkoutTemplate.
     * @example
     * // Update or create a WorkoutTemplate
     * const workoutTemplate = await prisma.workoutTemplate.upsert({
     *   create: {
     *     // ... data to create a WorkoutTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutTemplate we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutTemplateUpsertArgs>(args: SelectSubset<T, WorkoutTemplateUpsertArgs<ExtArgs>>): Prisma__WorkoutTemplateClient<$Result.GetResult<Prisma.$WorkoutTemplatePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of WorkoutTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateCountArgs} args - Arguments to filter WorkoutTemplates to count.
     * @example
     * // Count the number of WorkoutTemplates
     * const count = await prisma.workoutTemplate.count({
     *   where: {
     *     // ... the filter for the WorkoutTemplates we want to count
     *   }
     * })
    **/
    count<T extends WorkoutTemplateCountArgs>(
      args?: Subset<T, WorkoutTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutTemplateAggregateArgs>(args: Subset<T, WorkoutTemplateAggregateArgs>): Prisma.PrismaPromise<GetWorkoutTemplateAggregateType<T>>

    /**
     * Group by WorkoutTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutTemplateGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutTemplate model
   */
  readonly fields: WorkoutTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    exercises<T extends WorkoutTemplate$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutTemplate$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutTemplateExercisePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    workoutSessions<T extends WorkoutTemplate$workoutSessionsArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutTemplate$workoutSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSessionPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkoutTemplate model
   */ 
  interface WorkoutTemplateFieldRefs {
    readonly id: FieldRef<"WorkoutTemplate", 'String'>
    readonly name: FieldRef<"WorkoutTemplate", 'String'>
    readonly userId: FieldRef<"WorkoutTemplate", 'String'>
    readonly createdAt: FieldRef<"WorkoutTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutTemplate findUnique
   */
  export type WorkoutTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplate
     */
    select?: WorkoutTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplate
     */
    omit?: WorkoutTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutTemplate to fetch.
     */
    where: WorkoutTemplateWhereUniqueInput
  }

  /**
   * WorkoutTemplate findUniqueOrThrow
   */
  export type WorkoutTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplate
     */
    select?: WorkoutTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplate
     */
    omit?: WorkoutTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutTemplate to fetch.
     */
    where: WorkoutTemplateWhereUniqueInput
  }

  /**
   * WorkoutTemplate findFirst
   */
  export type WorkoutTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplate
     */
    select?: WorkoutTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplate
     */
    omit?: WorkoutTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutTemplate to fetch.
     */
    where?: WorkoutTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutTemplates to fetch.
     */
    orderBy?: WorkoutTemplateOrderByWithRelationInput | WorkoutTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutTemplates.
     */
    cursor?: WorkoutTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutTemplates.
     */
    distinct?: WorkoutTemplateScalarFieldEnum | WorkoutTemplateScalarFieldEnum[]
  }

  /**
   * WorkoutTemplate findFirstOrThrow
   */
  export type WorkoutTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplate
     */
    select?: WorkoutTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplate
     */
    omit?: WorkoutTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutTemplate to fetch.
     */
    where?: WorkoutTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutTemplates to fetch.
     */
    orderBy?: WorkoutTemplateOrderByWithRelationInput | WorkoutTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutTemplates.
     */
    cursor?: WorkoutTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutTemplates.
     */
    distinct?: WorkoutTemplateScalarFieldEnum | WorkoutTemplateScalarFieldEnum[]
  }

  /**
   * WorkoutTemplate findMany
   */
  export type WorkoutTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplate
     */
    select?: WorkoutTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplate
     */
    omit?: WorkoutTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutTemplates to fetch.
     */
    where?: WorkoutTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutTemplates to fetch.
     */
    orderBy?: WorkoutTemplateOrderByWithRelationInput | WorkoutTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutTemplates.
     */
    cursor?: WorkoutTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutTemplates.
     */
    skip?: number
    distinct?: WorkoutTemplateScalarFieldEnum | WorkoutTemplateScalarFieldEnum[]
  }

  /**
   * WorkoutTemplate create
   */
  export type WorkoutTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplate
     */
    select?: WorkoutTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplate
     */
    omit?: WorkoutTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutTemplate.
     */
    data: XOR<WorkoutTemplateCreateInput, WorkoutTemplateUncheckedCreateInput>
  }

  /**
   * WorkoutTemplate createMany
   */
  export type WorkoutTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutTemplates.
     */
    data: WorkoutTemplateCreateManyInput | WorkoutTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutTemplate createManyAndReturn
   */
  export type WorkoutTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplate
     */
    select?: WorkoutTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplate
     */
    omit?: WorkoutTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many WorkoutTemplates.
     */
    data: WorkoutTemplateCreateManyInput | WorkoutTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutTemplate update
   */
  export type WorkoutTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplate
     */
    select?: WorkoutTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplate
     */
    omit?: WorkoutTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutTemplate.
     */
    data: XOR<WorkoutTemplateUpdateInput, WorkoutTemplateUncheckedUpdateInput>
    /**
     * Choose, which WorkoutTemplate to update.
     */
    where: WorkoutTemplateWhereUniqueInput
  }

  /**
   * WorkoutTemplate updateMany
   */
  export type WorkoutTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutTemplates.
     */
    data: XOR<WorkoutTemplateUpdateManyMutationInput, WorkoutTemplateUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutTemplates to update
     */
    where?: WorkoutTemplateWhereInput
    /**
     * Limit how many WorkoutTemplates to update.
     */
    limit?: number
  }

  /**
   * WorkoutTemplate updateManyAndReturn
   */
  export type WorkoutTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplate
     */
    select?: WorkoutTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplate
     */
    omit?: WorkoutTemplateOmit<ExtArgs> | null
    /**
     * The data used to update WorkoutTemplates.
     */
    data: XOR<WorkoutTemplateUpdateManyMutationInput, WorkoutTemplateUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutTemplates to update
     */
    where?: WorkoutTemplateWhereInput
    /**
     * Limit how many WorkoutTemplates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutTemplate upsert
   */
  export type WorkoutTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplate
     */
    select?: WorkoutTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplate
     */
    omit?: WorkoutTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutTemplate to update in case it exists.
     */
    where: WorkoutTemplateWhereUniqueInput
    /**
     * In case the WorkoutTemplate found by the `where` argument doesn't exist, create a new WorkoutTemplate with this data.
     */
    create: XOR<WorkoutTemplateCreateInput, WorkoutTemplateUncheckedCreateInput>
    /**
     * In case the WorkoutTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutTemplateUpdateInput, WorkoutTemplateUncheckedUpdateInput>
  }

  /**
   * WorkoutTemplate delete
   */
  export type WorkoutTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplate
     */
    select?: WorkoutTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplate
     */
    omit?: WorkoutTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateInclude<ExtArgs> | null
    /**
     * Filter which WorkoutTemplate to delete.
     */
    where: WorkoutTemplateWhereUniqueInput
  }

  /**
   * WorkoutTemplate deleteMany
   */
  export type WorkoutTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutTemplates to delete
     */
    where?: WorkoutTemplateWhereInput
    /**
     * Limit how many WorkoutTemplates to delete.
     */
    limit?: number
  }

  /**
   * WorkoutTemplate.exercises
   */
  export type WorkoutTemplate$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateExercise
     */
    select?: WorkoutTemplateExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateExercise
     */
    omit?: WorkoutTemplateExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateExerciseInclude<ExtArgs> | null
    where?: WorkoutTemplateExerciseWhereInput
    orderBy?: WorkoutTemplateExerciseOrderByWithRelationInput | WorkoutTemplateExerciseOrderByWithRelationInput[]
    cursor?: WorkoutTemplateExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutTemplateExerciseScalarFieldEnum | WorkoutTemplateExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutTemplate.workoutSessions
   */
  export type WorkoutTemplate$workoutSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSession
     */
    select?: WorkoutSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSession
     */
    omit?: WorkoutSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionInclude<ExtArgs> | null
    where?: WorkoutSessionWhereInput
    orderBy?: WorkoutSessionOrderByWithRelationInput | WorkoutSessionOrderByWithRelationInput[]
    cursor?: WorkoutSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutSessionScalarFieldEnum | WorkoutSessionScalarFieldEnum[]
  }

  /**
   * WorkoutTemplate without action
   */
  export type WorkoutTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplate
     */
    select?: WorkoutTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplate
     */
    omit?: WorkoutTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutTemplateExercise
   */

  export type AggregateWorkoutTemplateExercise = {
    _count: WorkoutTemplateExerciseCountAggregateOutputType | null
    _min: WorkoutTemplateExerciseMinAggregateOutputType | null
    _max: WorkoutTemplateExerciseMaxAggregateOutputType | null
  }

  export type WorkoutTemplateExerciseMinAggregateOutputType = {
    id: string | null
    workoutTemplateId: string | null
    exerciseId: string | null
    createdAt: Date | null
  }

  export type WorkoutTemplateExerciseMaxAggregateOutputType = {
    id: string | null
    workoutTemplateId: string | null
    exerciseId: string | null
    createdAt: Date | null
  }

  export type WorkoutTemplateExerciseCountAggregateOutputType = {
    id: number
    workoutTemplateId: number
    exerciseId: number
    createdAt: number
    _all: number
  }


  export type WorkoutTemplateExerciseMinAggregateInputType = {
    id?: true
    workoutTemplateId?: true
    exerciseId?: true
    createdAt?: true
  }

  export type WorkoutTemplateExerciseMaxAggregateInputType = {
    id?: true
    workoutTemplateId?: true
    exerciseId?: true
    createdAt?: true
  }

  export type WorkoutTemplateExerciseCountAggregateInputType = {
    id?: true
    workoutTemplateId?: true
    exerciseId?: true
    createdAt?: true
    _all?: true
  }

  export type WorkoutTemplateExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutTemplateExercise to aggregate.
     */
    where?: WorkoutTemplateExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutTemplateExercises to fetch.
     */
    orderBy?: WorkoutTemplateExerciseOrderByWithRelationInput | WorkoutTemplateExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutTemplateExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutTemplateExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutTemplateExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutTemplateExercises
    **/
    _count?: true | WorkoutTemplateExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutTemplateExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutTemplateExerciseMaxAggregateInputType
  }

  export type GetWorkoutTemplateExerciseAggregateType<T extends WorkoutTemplateExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutTemplateExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutTemplateExercise[P]>
      : GetScalarType<T[P], AggregateWorkoutTemplateExercise[P]>
  }




  export type WorkoutTemplateExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutTemplateExerciseWhereInput
    orderBy?: WorkoutTemplateExerciseOrderByWithAggregationInput | WorkoutTemplateExerciseOrderByWithAggregationInput[]
    by: WorkoutTemplateExerciseScalarFieldEnum[] | WorkoutTemplateExerciseScalarFieldEnum
    having?: WorkoutTemplateExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutTemplateExerciseCountAggregateInputType | true
    _min?: WorkoutTemplateExerciseMinAggregateInputType
    _max?: WorkoutTemplateExerciseMaxAggregateInputType
  }

  export type WorkoutTemplateExerciseGroupByOutputType = {
    id: string
    workoutTemplateId: string
    exerciseId: string
    createdAt: Date
    _count: WorkoutTemplateExerciseCountAggregateOutputType | null
    _min: WorkoutTemplateExerciseMinAggregateOutputType | null
    _max: WorkoutTemplateExerciseMaxAggregateOutputType | null
  }

  type GetWorkoutTemplateExerciseGroupByPayload<T extends WorkoutTemplateExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutTemplateExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutTemplateExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutTemplateExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutTemplateExerciseGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutTemplateExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutTemplateId?: boolean
    exerciseId?: boolean
    createdAt?: boolean
    workoutTemplate?: boolean | WorkoutTemplateDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    sets?: boolean | WorkoutTemplateExercise$setsArgs<ExtArgs>
    _count?: boolean | WorkoutTemplateExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutTemplateExercise"]>

  export type WorkoutTemplateExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutTemplateId?: boolean
    exerciseId?: boolean
    createdAt?: boolean
    workoutTemplate?: boolean | WorkoutTemplateDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutTemplateExercise"]>

  export type WorkoutTemplateExerciseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutTemplateId?: boolean
    exerciseId?: boolean
    createdAt?: boolean
    workoutTemplate?: boolean | WorkoutTemplateDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutTemplateExercise"]>

  export type WorkoutTemplateExerciseSelectScalar = {
    id?: boolean
    workoutTemplateId?: boolean
    exerciseId?: boolean
    createdAt?: boolean
  }

  export type WorkoutTemplateExerciseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workoutTemplateId" | "exerciseId" | "createdAt", ExtArgs["result"]["workoutTemplateExercise"]>
  export type WorkoutTemplateExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutTemplate?: boolean | WorkoutTemplateDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    sets?: boolean | WorkoutTemplateExercise$setsArgs<ExtArgs>
    _count?: boolean | WorkoutTemplateExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkoutTemplateExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutTemplate?: boolean | WorkoutTemplateDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }
  export type WorkoutTemplateExerciseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutTemplate?: boolean | WorkoutTemplateDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }

  export type $WorkoutTemplateExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutTemplateExercise"
    objects: {
      workoutTemplate: Prisma.$WorkoutTemplatePayload<ExtArgs>
      exercise: Prisma.$ExercisePayload<ExtArgs>
      sets: Prisma.$WorkoutTemplateSetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workoutTemplateId: string
      exerciseId: string
      createdAt: Date
    }, ExtArgs["result"]["workoutTemplateExercise"]>
    composites: {}
  }

  type WorkoutTemplateExerciseGetPayload<S extends boolean | null | undefined | WorkoutTemplateExerciseDefaultArgs> = $Result.GetResult<Prisma.$WorkoutTemplateExercisePayload, S>

  type WorkoutTemplateExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkoutTemplateExerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkoutTemplateExerciseCountAggregateInputType | true
    }

  export interface WorkoutTemplateExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutTemplateExercise'], meta: { name: 'WorkoutTemplateExercise' } }
    /**
     * Find zero or one WorkoutTemplateExercise that matches the filter.
     * @param {WorkoutTemplateExerciseFindUniqueArgs} args - Arguments to find a WorkoutTemplateExercise
     * @example
     * // Get one WorkoutTemplateExercise
     * const workoutTemplateExercise = await prisma.workoutTemplateExercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutTemplateExerciseFindUniqueArgs>(args: SelectSubset<T, WorkoutTemplateExerciseFindUniqueArgs<ExtArgs>>): Prisma__WorkoutTemplateExerciseClient<$Result.GetResult<Prisma.$WorkoutTemplateExercisePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one WorkoutTemplateExercise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkoutTemplateExerciseFindUniqueOrThrowArgs} args - Arguments to find a WorkoutTemplateExercise
     * @example
     * // Get one WorkoutTemplateExercise
     * const workoutTemplateExercise = await prisma.workoutTemplateExercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutTemplateExerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutTemplateExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutTemplateExerciseClient<$Result.GetResult<Prisma.$WorkoutTemplateExercisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first WorkoutTemplateExercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateExerciseFindFirstArgs} args - Arguments to find a WorkoutTemplateExercise
     * @example
     * // Get one WorkoutTemplateExercise
     * const workoutTemplateExercise = await prisma.workoutTemplateExercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutTemplateExerciseFindFirstArgs>(args?: SelectSubset<T, WorkoutTemplateExerciseFindFirstArgs<ExtArgs>>): Prisma__WorkoutTemplateExerciseClient<$Result.GetResult<Prisma.$WorkoutTemplateExercisePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first WorkoutTemplateExercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateExerciseFindFirstOrThrowArgs} args - Arguments to find a WorkoutTemplateExercise
     * @example
     * // Get one WorkoutTemplateExercise
     * const workoutTemplateExercise = await prisma.workoutTemplateExercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutTemplateExerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutTemplateExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutTemplateExerciseClient<$Result.GetResult<Prisma.$WorkoutTemplateExercisePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more WorkoutTemplateExercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutTemplateExercises
     * const workoutTemplateExercises = await prisma.workoutTemplateExercise.findMany()
     * 
     * // Get first 10 WorkoutTemplateExercises
     * const workoutTemplateExercises = await prisma.workoutTemplateExercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutTemplateExerciseWithIdOnly = await prisma.workoutTemplateExercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutTemplateExerciseFindManyArgs>(args?: SelectSubset<T, WorkoutTemplateExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutTemplateExercisePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a WorkoutTemplateExercise.
     * @param {WorkoutTemplateExerciseCreateArgs} args - Arguments to create a WorkoutTemplateExercise.
     * @example
     * // Create one WorkoutTemplateExercise
     * const WorkoutTemplateExercise = await prisma.workoutTemplateExercise.create({
     *   data: {
     *     // ... data to create a WorkoutTemplateExercise
     *   }
     * })
     * 
     */
    create<T extends WorkoutTemplateExerciseCreateArgs>(args: SelectSubset<T, WorkoutTemplateExerciseCreateArgs<ExtArgs>>): Prisma__WorkoutTemplateExerciseClient<$Result.GetResult<Prisma.$WorkoutTemplateExercisePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many WorkoutTemplateExercises.
     * @param {WorkoutTemplateExerciseCreateManyArgs} args - Arguments to create many WorkoutTemplateExercises.
     * @example
     * // Create many WorkoutTemplateExercises
     * const workoutTemplateExercise = await prisma.workoutTemplateExercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutTemplateExerciseCreateManyArgs>(args?: SelectSubset<T, WorkoutTemplateExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutTemplateExercises and returns the data saved in the database.
     * @param {WorkoutTemplateExerciseCreateManyAndReturnArgs} args - Arguments to create many WorkoutTemplateExercises.
     * @example
     * // Create many WorkoutTemplateExercises
     * const workoutTemplateExercise = await prisma.workoutTemplateExercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutTemplateExercises and only return the `id`
     * const workoutTemplateExerciseWithIdOnly = await prisma.workoutTemplateExercise.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutTemplateExerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutTemplateExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutTemplateExercisePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a WorkoutTemplateExercise.
     * @param {WorkoutTemplateExerciseDeleteArgs} args - Arguments to delete one WorkoutTemplateExercise.
     * @example
     * // Delete one WorkoutTemplateExercise
     * const WorkoutTemplateExercise = await prisma.workoutTemplateExercise.delete({
     *   where: {
     *     // ... filter to delete one WorkoutTemplateExercise
     *   }
     * })
     * 
     */
    delete<T extends WorkoutTemplateExerciseDeleteArgs>(args: SelectSubset<T, WorkoutTemplateExerciseDeleteArgs<ExtArgs>>): Prisma__WorkoutTemplateExerciseClient<$Result.GetResult<Prisma.$WorkoutTemplateExercisePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one WorkoutTemplateExercise.
     * @param {WorkoutTemplateExerciseUpdateArgs} args - Arguments to update one WorkoutTemplateExercise.
     * @example
     * // Update one WorkoutTemplateExercise
     * const workoutTemplateExercise = await prisma.workoutTemplateExercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutTemplateExerciseUpdateArgs>(args: SelectSubset<T, WorkoutTemplateExerciseUpdateArgs<ExtArgs>>): Prisma__WorkoutTemplateExerciseClient<$Result.GetResult<Prisma.$WorkoutTemplateExercisePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more WorkoutTemplateExercises.
     * @param {WorkoutTemplateExerciseDeleteManyArgs} args - Arguments to filter WorkoutTemplateExercises to delete.
     * @example
     * // Delete a few WorkoutTemplateExercises
     * const { count } = await prisma.workoutTemplateExercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutTemplateExerciseDeleteManyArgs>(args?: SelectSubset<T, WorkoutTemplateExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutTemplateExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutTemplateExercises
     * const workoutTemplateExercise = await prisma.workoutTemplateExercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutTemplateExerciseUpdateManyArgs>(args: SelectSubset<T, WorkoutTemplateExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutTemplateExercises and returns the data updated in the database.
     * @param {WorkoutTemplateExerciseUpdateManyAndReturnArgs} args - Arguments to update many WorkoutTemplateExercises.
     * @example
     * // Update many WorkoutTemplateExercises
     * const workoutTemplateExercise = await prisma.workoutTemplateExercise.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkoutTemplateExercises and only return the `id`
     * const workoutTemplateExerciseWithIdOnly = await prisma.workoutTemplateExercise.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkoutTemplateExerciseUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkoutTemplateExerciseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutTemplateExercisePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one WorkoutTemplateExercise.
     * @param {WorkoutTemplateExerciseUpsertArgs} args - Arguments to update or create a WorkoutTemplateExercise.
     * @example
     * // Update or create a WorkoutTemplateExercise
     * const workoutTemplateExercise = await prisma.workoutTemplateExercise.upsert({
     *   create: {
     *     // ... data to create a WorkoutTemplateExercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutTemplateExercise we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutTemplateExerciseUpsertArgs>(args: SelectSubset<T, WorkoutTemplateExerciseUpsertArgs<ExtArgs>>): Prisma__WorkoutTemplateExerciseClient<$Result.GetResult<Prisma.$WorkoutTemplateExercisePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of WorkoutTemplateExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateExerciseCountArgs} args - Arguments to filter WorkoutTemplateExercises to count.
     * @example
     * // Count the number of WorkoutTemplateExercises
     * const count = await prisma.workoutTemplateExercise.count({
     *   where: {
     *     // ... the filter for the WorkoutTemplateExercises we want to count
     *   }
     * })
    **/
    count<T extends WorkoutTemplateExerciseCountArgs>(
      args?: Subset<T, WorkoutTemplateExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutTemplateExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutTemplateExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutTemplateExerciseAggregateArgs>(args: Subset<T, WorkoutTemplateExerciseAggregateArgs>): Prisma.PrismaPromise<GetWorkoutTemplateExerciseAggregateType<T>>

    /**
     * Group by WorkoutTemplateExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutTemplateExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutTemplateExerciseGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutTemplateExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutTemplateExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutTemplateExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutTemplateExercise model
   */
  readonly fields: WorkoutTemplateExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutTemplateExercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutTemplateExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workoutTemplate<T extends WorkoutTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutTemplateDefaultArgs<ExtArgs>>): Prisma__WorkoutTemplateClient<$Result.GetResult<Prisma.$WorkoutTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    exercise<T extends ExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseDefaultArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    sets<T extends WorkoutTemplateExercise$setsArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutTemplateExercise$setsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutTemplateSetPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkoutTemplateExercise model
   */ 
  interface WorkoutTemplateExerciseFieldRefs {
    readonly id: FieldRef<"WorkoutTemplateExercise", 'String'>
    readonly workoutTemplateId: FieldRef<"WorkoutTemplateExercise", 'String'>
    readonly exerciseId: FieldRef<"WorkoutTemplateExercise", 'String'>
    readonly createdAt: FieldRef<"WorkoutTemplateExercise", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutTemplateExercise findUnique
   */
  export type WorkoutTemplateExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateExercise
     */
    select?: WorkoutTemplateExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateExercise
     */
    omit?: WorkoutTemplateExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutTemplateExercise to fetch.
     */
    where: WorkoutTemplateExerciseWhereUniqueInput
  }

  /**
   * WorkoutTemplateExercise findUniqueOrThrow
   */
  export type WorkoutTemplateExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateExercise
     */
    select?: WorkoutTemplateExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateExercise
     */
    omit?: WorkoutTemplateExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutTemplateExercise to fetch.
     */
    where: WorkoutTemplateExerciseWhereUniqueInput
  }

  /**
   * WorkoutTemplateExercise findFirst
   */
  export type WorkoutTemplateExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateExercise
     */
    select?: WorkoutTemplateExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateExercise
     */
    omit?: WorkoutTemplateExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutTemplateExercise to fetch.
     */
    where?: WorkoutTemplateExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutTemplateExercises to fetch.
     */
    orderBy?: WorkoutTemplateExerciseOrderByWithRelationInput | WorkoutTemplateExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutTemplateExercises.
     */
    cursor?: WorkoutTemplateExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutTemplateExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutTemplateExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutTemplateExercises.
     */
    distinct?: WorkoutTemplateExerciseScalarFieldEnum | WorkoutTemplateExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutTemplateExercise findFirstOrThrow
   */
  export type WorkoutTemplateExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateExercise
     */
    select?: WorkoutTemplateExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateExercise
     */
    omit?: WorkoutTemplateExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutTemplateExercise to fetch.
     */
    where?: WorkoutTemplateExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutTemplateExercises to fetch.
     */
    orderBy?: WorkoutTemplateExerciseOrderByWithRelationInput | WorkoutTemplateExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutTemplateExercises.
     */
    cursor?: WorkoutTemplateExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutTemplateExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutTemplateExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutTemplateExercises.
     */
    distinct?: WorkoutTemplateExerciseScalarFieldEnum | WorkoutTemplateExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutTemplateExercise findMany
   */
  export type WorkoutTemplateExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateExercise
     */
    select?: WorkoutTemplateExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateExercise
     */
    omit?: WorkoutTemplateExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutTemplateExercises to fetch.
     */
    where?: WorkoutTemplateExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutTemplateExercises to fetch.
     */
    orderBy?: WorkoutTemplateExerciseOrderByWithRelationInput | WorkoutTemplateExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutTemplateExercises.
     */
    cursor?: WorkoutTemplateExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutTemplateExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutTemplateExercises.
     */
    skip?: number
    distinct?: WorkoutTemplateExerciseScalarFieldEnum | WorkoutTemplateExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutTemplateExercise create
   */
  export type WorkoutTemplateExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateExercise
     */
    select?: WorkoutTemplateExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateExercise
     */
    omit?: WorkoutTemplateExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutTemplateExercise.
     */
    data: XOR<WorkoutTemplateExerciseCreateInput, WorkoutTemplateExerciseUncheckedCreateInput>
  }

  /**
   * WorkoutTemplateExercise createMany
   */
  export type WorkoutTemplateExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutTemplateExercises.
     */
    data: WorkoutTemplateExerciseCreateManyInput | WorkoutTemplateExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutTemplateExercise createManyAndReturn
   */
  export type WorkoutTemplateExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateExercise
     */
    select?: WorkoutTemplateExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateExercise
     */
    omit?: WorkoutTemplateExerciseOmit<ExtArgs> | null
    /**
     * The data used to create many WorkoutTemplateExercises.
     */
    data: WorkoutTemplateExerciseCreateManyInput | WorkoutTemplateExerciseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateExerciseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutTemplateExercise update
   */
  export type WorkoutTemplateExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateExercise
     */
    select?: WorkoutTemplateExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateExercise
     */
    omit?: WorkoutTemplateExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutTemplateExercise.
     */
    data: XOR<WorkoutTemplateExerciseUpdateInput, WorkoutTemplateExerciseUncheckedUpdateInput>
    /**
     * Choose, which WorkoutTemplateExercise to update.
     */
    where: WorkoutTemplateExerciseWhereUniqueInput
  }

  /**
   * WorkoutTemplateExercise updateMany
   */
  export type WorkoutTemplateExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutTemplateExercises.
     */
    data: XOR<WorkoutTemplateExerciseUpdateManyMutationInput, WorkoutTemplateExerciseUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutTemplateExercises to update
     */
    where?: WorkoutTemplateExerciseWhereInput
    /**
     * Limit how many WorkoutTemplateExercises to update.
     */
    limit?: number
  }

  /**
   * WorkoutTemplateExercise updateManyAndReturn
   */
  export type WorkoutTemplateExerciseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateExercise
     */
    select?: WorkoutTemplateExerciseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateExercise
     */
    omit?: WorkoutTemplateExerciseOmit<ExtArgs> | null
    /**
     * The data used to update WorkoutTemplateExercises.
     */
    data: XOR<WorkoutTemplateExerciseUpdateManyMutationInput, WorkoutTemplateExerciseUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutTemplateExercises to update
     */
    where?: WorkoutTemplateExerciseWhereInput
    /**
     * Limit how many WorkoutTemplateExercises to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateExerciseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutTemplateExercise upsert
   */
  export type WorkoutTemplateExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateExercise
     */
    select?: WorkoutTemplateExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateExercise
     */
    omit?: WorkoutTemplateExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutTemplateExercise to update in case it exists.
     */
    where: WorkoutTemplateExerciseWhereUniqueInput
    /**
     * In case the WorkoutTemplateExercise found by the `where` argument doesn't exist, create a new WorkoutTemplateExercise with this data.
     */
    create: XOR<WorkoutTemplateExerciseCreateInput, WorkoutTemplateExerciseUncheckedCreateInput>
    /**
     * In case the WorkoutTemplateExercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutTemplateExerciseUpdateInput, WorkoutTemplateExerciseUncheckedUpdateInput>
  }

  /**
   * WorkoutTemplateExercise delete
   */
  export type WorkoutTemplateExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateExercise
     */
    select?: WorkoutTemplateExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateExercise
     */
    omit?: WorkoutTemplateExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateExerciseInclude<ExtArgs> | null
    /**
     * Filter which WorkoutTemplateExercise to delete.
     */
    where: WorkoutTemplateExerciseWhereUniqueInput
  }

  /**
   * WorkoutTemplateExercise deleteMany
   */
  export type WorkoutTemplateExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutTemplateExercises to delete
     */
    where?: WorkoutTemplateExerciseWhereInput
    /**
     * Limit how many WorkoutTemplateExercises to delete.
     */
    limit?: number
  }

  /**
   * WorkoutTemplateExercise.sets
   */
  export type WorkoutTemplateExercise$setsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateSet
     */
    select?: WorkoutTemplateSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateSet
     */
    omit?: WorkoutTemplateSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateSetInclude<ExtArgs> | null
    where?: WorkoutTemplateSetWhereInput
    orderBy?: WorkoutTemplateSetOrderByWithRelationInput | WorkoutTemplateSetOrderByWithRelationInput[]
    cursor?: WorkoutTemplateSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutTemplateSetScalarFieldEnum | WorkoutTemplateSetScalarFieldEnum[]
  }

  /**
   * WorkoutTemplateExercise without action
   */
  export type WorkoutTemplateExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateExercise
     */
    select?: WorkoutTemplateExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateExercise
     */
    omit?: WorkoutTemplateExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateExerciseInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutTemplateSet
   */

  export type AggregateWorkoutTemplateSet = {
    _count: WorkoutTemplateSetCountAggregateOutputType | null
    _avg: WorkoutTemplateSetAvgAggregateOutputType | null
    _sum: WorkoutTemplateSetSumAggregateOutputType | null
    _min: WorkoutTemplateSetMinAggregateOutputType | null
    _max: WorkoutTemplateSetMaxAggregateOutputType | null
  }

  export type WorkoutTemplateSetAvgAggregateOutputType = {
    order: number | null
    reps: number | null
    weight: number | null
  }

  export type WorkoutTemplateSetSumAggregateOutputType = {
    order: number | null
    reps: number | null
    weight: number | null
  }

  export type WorkoutTemplateSetMinAggregateOutputType = {
    id: string | null
    workoutTemplateExerciseId: string | null
    order: number | null
    reps: number | null
    weight: number | null
    createdAt: Date | null
  }

  export type WorkoutTemplateSetMaxAggregateOutputType = {
    id: string | null
    workoutTemplateExerciseId: string | null
    order: number | null
    reps: number | null
    weight: number | null
    createdAt: Date | null
  }

  export type WorkoutTemplateSetCountAggregateOutputType = {
    id: number
    workoutTemplateExerciseId: number
    order: number
    reps: number
    weight: number
    createdAt: number
    _all: number
  }


  export type WorkoutTemplateSetAvgAggregateInputType = {
    order?: true
    reps?: true
    weight?: true
  }

  export type WorkoutTemplateSetSumAggregateInputType = {
    order?: true
    reps?: true
    weight?: true
  }

  export type WorkoutTemplateSetMinAggregateInputType = {
    id?: true
    workoutTemplateExerciseId?: true
    order?: true
    reps?: true
    weight?: true
    createdAt?: true
  }

  export type WorkoutTemplateSetMaxAggregateInputType = {
    id?: true
    workoutTemplateExerciseId?: true
    order?: true
    reps?: true
    weight?: true
    createdAt?: true
  }

  export type WorkoutTemplateSetCountAggregateInputType = {
    id?: true
    workoutTemplateExerciseId?: true
    order?: true
    reps?: true
    weight?: true
    createdAt?: true
    _all?: true
  }

  export type WorkoutTemplateSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutTemplateSet to aggregate.
     */
    where?: WorkoutTemplateSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutTemplateSets to fetch.
     */
    orderBy?: WorkoutTemplateSetOrderByWithRelationInput | WorkoutTemplateSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutTemplateSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutTemplateSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutTemplateSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutTemplateSets
    **/
    _count?: true | WorkoutTemplateSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutTemplateSetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutTemplateSetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutTemplateSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutTemplateSetMaxAggregateInputType
  }

  export type GetWorkoutTemplateSetAggregateType<T extends WorkoutTemplateSetAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutTemplateSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutTemplateSet[P]>
      : GetScalarType<T[P], AggregateWorkoutTemplateSet[P]>
  }




  export type WorkoutTemplateSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutTemplateSetWhereInput
    orderBy?: WorkoutTemplateSetOrderByWithAggregationInput | WorkoutTemplateSetOrderByWithAggregationInput[]
    by: WorkoutTemplateSetScalarFieldEnum[] | WorkoutTemplateSetScalarFieldEnum
    having?: WorkoutTemplateSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutTemplateSetCountAggregateInputType | true
    _avg?: WorkoutTemplateSetAvgAggregateInputType
    _sum?: WorkoutTemplateSetSumAggregateInputType
    _min?: WorkoutTemplateSetMinAggregateInputType
    _max?: WorkoutTemplateSetMaxAggregateInputType
  }

  export type WorkoutTemplateSetGroupByOutputType = {
    id: string
    workoutTemplateExerciseId: string
    order: number
    reps: number
    weight: number
    createdAt: Date
    _count: WorkoutTemplateSetCountAggregateOutputType | null
    _avg: WorkoutTemplateSetAvgAggregateOutputType | null
    _sum: WorkoutTemplateSetSumAggregateOutputType | null
    _min: WorkoutTemplateSetMinAggregateOutputType | null
    _max: WorkoutTemplateSetMaxAggregateOutputType | null
  }

  type GetWorkoutTemplateSetGroupByPayload<T extends WorkoutTemplateSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutTemplateSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutTemplateSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutTemplateSetGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutTemplateSetGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutTemplateSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutTemplateExerciseId?: boolean
    order?: boolean
    reps?: boolean
    weight?: boolean
    createdAt?: boolean
    workoutTemplateExercise?: boolean | WorkoutTemplateExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutTemplateSet"]>

  export type WorkoutTemplateSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutTemplateExerciseId?: boolean
    order?: boolean
    reps?: boolean
    weight?: boolean
    createdAt?: boolean
    workoutTemplateExercise?: boolean | WorkoutTemplateExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutTemplateSet"]>

  export type WorkoutTemplateSetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutTemplateExerciseId?: boolean
    order?: boolean
    reps?: boolean
    weight?: boolean
    createdAt?: boolean
    workoutTemplateExercise?: boolean | WorkoutTemplateExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutTemplateSet"]>

  export type WorkoutTemplateSetSelectScalar = {
    id?: boolean
    workoutTemplateExerciseId?: boolean
    order?: boolean
    reps?: boolean
    weight?: boolean
    createdAt?: boolean
  }

  export type WorkoutTemplateSetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workoutTemplateExerciseId" | "order" | "reps" | "weight" | "createdAt", ExtArgs["result"]["workoutTemplateSet"]>
  export type WorkoutTemplateSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutTemplateExercise?: boolean | WorkoutTemplateExerciseDefaultArgs<ExtArgs>
  }
  export type WorkoutTemplateSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutTemplateExercise?: boolean | WorkoutTemplateExerciseDefaultArgs<ExtArgs>
  }
  export type WorkoutTemplateSetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutTemplateExercise?: boolean | WorkoutTemplateExerciseDefaultArgs<ExtArgs>
  }

  export type $WorkoutTemplateSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutTemplateSet"
    objects: {
      workoutTemplateExercise: Prisma.$WorkoutTemplateExercisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workoutTemplateExerciseId: string
      order: number
      reps: number
      weight: number
      createdAt: Date
    }, ExtArgs["result"]["workoutTemplateSet"]>
    composites: {}
  }

  type WorkoutTemplateSetGetPayload<S extends boolean | null | undefined | WorkoutTemplateSetDefaultArgs> = $Result.GetResult<Prisma.$WorkoutTemplateSetPayload, S>

  type WorkoutTemplateSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkoutTemplateSetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkoutTemplateSetCountAggregateInputType | true
    }

  export interface WorkoutTemplateSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutTemplateSet'], meta: { name: 'WorkoutTemplateSet' } }
    /**
     * Find zero or one WorkoutTemplateSet that matches the filter.
     * @param {WorkoutTemplateSetFindUniqueArgs} args - Arguments to find a WorkoutTemplateSet
     * @example
     * // Get one WorkoutTemplateSet
     * const workoutTemplateSet = await prisma.workoutTemplateSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutTemplateSetFindUniqueArgs>(args: SelectSubset<T, WorkoutTemplateSetFindUniqueArgs<ExtArgs>>): Prisma__WorkoutTemplateSetClient<$Result.GetResult<Prisma.$WorkoutTemplateSetPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one WorkoutTemplateSet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkoutTemplateSetFindUniqueOrThrowArgs} args - Arguments to find a WorkoutTemplateSet
     * @example
     * // Get one WorkoutTemplateSet
     * const workoutTemplateSet = await prisma.workoutTemplateSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutTemplateSetFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutTemplateSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutTemplateSetClient<$Result.GetResult<Prisma.$WorkoutTemplateSetPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first WorkoutTemplateSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateSetFindFirstArgs} args - Arguments to find a WorkoutTemplateSet
     * @example
     * // Get one WorkoutTemplateSet
     * const workoutTemplateSet = await prisma.workoutTemplateSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutTemplateSetFindFirstArgs>(args?: SelectSubset<T, WorkoutTemplateSetFindFirstArgs<ExtArgs>>): Prisma__WorkoutTemplateSetClient<$Result.GetResult<Prisma.$WorkoutTemplateSetPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first WorkoutTemplateSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateSetFindFirstOrThrowArgs} args - Arguments to find a WorkoutTemplateSet
     * @example
     * // Get one WorkoutTemplateSet
     * const workoutTemplateSet = await prisma.workoutTemplateSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutTemplateSetFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutTemplateSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutTemplateSetClient<$Result.GetResult<Prisma.$WorkoutTemplateSetPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more WorkoutTemplateSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutTemplateSets
     * const workoutTemplateSets = await prisma.workoutTemplateSet.findMany()
     * 
     * // Get first 10 WorkoutTemplateSets
     * const workoutTemplateSets = await prisma.workoutTemplateSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutTemplateSetWithIdOnly = await prisma.workoutTemplateSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutTemplateSetFindManyArgs>(args?: SelectSubset<T, WorkoutTemplateSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutTemplateSetPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a WorkoutTemplateSet.
     * @param {WorkoutTemplateSetCreateArgs} args - Arguments to create a WorkoutTemplateSet.
     * @example
     * // Create one WorkoutTemplateSet
     * const WorkoutTemplateSet = await prisma.workoutTemplateSet.create({
     *   data: {
     *     // ... data to create a WorkoutTemplateSet
     *   }
     * })
     * 
     */
    create<T extends WorkoutTemplateSetCreateArgs>(args: SelectSubset<T, WorkoutTemplateSetCreateArgs<ExtArgs>>): Prisma__WorkoutTemplateSetClient<$Result.GetResult<Prisma.$WorkoutTemplateSetPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many WorkoutTemplateSets.
     * @param {WorkoutTemplateSetCreateManyArgs} args - Arguments to create many WorkoutTemplateSets.
     * @example
     * // Create many WorkoutTemplateSets
     * const workoutTemplateSet = await prisma.workoutTemplateSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutTemplateSetCreateManyArgs>(args?: SelectSubset<T, WorkoutTemplateSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutTemplateSets and returns the data saved in the database.
     * @param {WorkoutTemplateSetCreateManyAndReturnArgs} args - Arguments to create many WorkoutTemplateSets.
     * @example
     * // Create many WorkoutTemplateSets
     * const workoutTemplateSet = await prisma.workoutTemplateSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutTemplateSets and only return the `id`
     * const workoutTemplateSetWithIdOnly = await prisma.workoutTemplateSet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutTemplateSetCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutTemplateSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutTemplateSetPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a WorkoutTemplateSet.
     * @param {WorkoutTemplateSetDeleteArgs} args - Arguments to delete one WorkoutTemplateSet.
     * @example
     * // Delete one WorkoutTemplateSet
     * const WorkoutTemplateSet = await prisma.workoutTemplateSet.delete({
     *   where: {
     *     // ... filter to delete one WorkoutTemplateSet
     *   }
     * })
     * 
     */
    delete<T extends WorkoutTemplateSetDeleteArgs>(args: SelectSubset<T, WorkoutTemplateSetDeleteArgs<ExtArgs>>): Prisma__WorkoutTemplateSetClient<$Result.GetResult<Prisma.$WorkoutTemplateSetPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one WorkoutTemplateSet.
     * @param {WorkoutTemplateSetUpdateArgs} args - Arguments to update one WorkoutTemplateSet.
     * @example
     * // Update one WorkoutTemplateSet
     * const workoutTemplateSet = await prisma.workoutTemplateSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutTemplateSetUpdateArgs>(args: SelectSubset<T, WorkoutTemplateSetUpdateArgs<ExtArgs>>): Prisma__WorkoutTemplateSetClient<$Result.GetResult<Prisma.$WorkoutTemplateSetPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more WorkoutTemplateSets.
     * @param {WorkoutTemplateSetDeleteManyArgs} args - Arguments to filter WorkoutTemplateSets to delete.
     * @example
     * // Delete a few WorkoutTemplateSets
     * const { count } = await prisma.workoutTemplateSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutTemplateSetDeleteManyArgs>(args?: SelectSubset<T, WorkoutTemplateSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutTemplateSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutTemplateSets
     * const workoutTemplateSet = await prisma.workoutTemplateSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutTemplateSetUpdateManyArgs>(args: SelectSubset<T, WorkoutTemplateSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutTemplateSets and returns the data updated in the database.
     * @param {WorkoutTemplateSetUpdateManyAndReturnArgs} args - Arguments to update many WorkoutTemplateSets.
     * @example
     * // Update many WorkoutTemplateSets
     * const workoutTemplateSet = await prisma.workoutTemplateSet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkoutTemplateSets and only return the `id`
     * const workoutTemplateSetWithIdOnly = await prisma.workoutTemplateSet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkoutTemplateSetUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkoutTemplateSetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutTemplateSetPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one WorkoutTemplateSet.
     * @param {WorkoutTemplateSetUpsertArgs} args - Arguments to update or create a WorkoutTemplateSet.
     * @example
     * // Update or create a WorkoutTemplateSet
     * const workoutTemplateSet = await prisma.workoutTemplateSet.upsert({
     *   create: {
     *     // ... data to create a WorkoutTemplateSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutTemplateSet we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutTemplateSetUpsertArgs>(args: SelectSubset<T, WorkoutTemplateSetUpsertArgs<ExtArgs>>): Prisma__WorkoutTemplateSetClient<$Result.GetResult<Prisma.$WorkoutTemplateSetPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of WorkoutTemplateSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateSetCountArgs} args - Arguments to filter WorkoutTemplateSets to count.
     * @example
     * // Count the number of WorkoutTemplateSets
     * const count = await prisma.workoutTemplateSet.count({
     *   where: {
     *     // ... the filter for the WorkoutTemplateSets we want to count
     *   }
     * })
    **/
    count<T extends WorkoutTemplateSetCountArgs>(
      args?: Subset<T, WorkoutTemplateSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutTemplateSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutTemplateSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutTemplateSetAggregateArgs>(args: Subset<T, WorkoutTemplateSetAggregateArgs>): Prisma.PrismaPromise<GetWorkoutTemplateSetAggregateType<T>>

    /**
     * Group by WorkoutTemplateSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutTemplateSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutTemplateSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutTemplateSetGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutTemplateSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutTemplateSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutTemplateSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutTemplateSet model
   */
  readonly fields: WorkoutTemplateSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutTemplateSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutTemplateSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workoutTemplateExercise<T extends WorkoutTemplateExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutTemplateExerciseDefaultArgs<ExtArgs>>): Prisma__WorkoutTemplateExerciseClient<$Result.GetResult<Prisma.$WorkoutTemplateExercisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkoutTemplateSet model
   */ 
  interface WorkoutTemplateSetFieldRefs {
    readonly id: FieldRef<"WorkoutTemplateSet", 'String'>
    readonly workoutTemplateExerciseId: FieldRef<"WorkoutTemplateSet", 'String'>
    readonly order: FieldRef<"WorkoutTemplateSet", 'Int'>
    readonly reps: FieldRef<"WorkoutTemplateSet", 'Int'>
    readonly weight: FieldRef<"WorkoutTemplateSet", 'Float'>
    readonly createdAt: FieldRef<"WorkoutTemplateSet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutTemplateSet findUnique
   */
  export type WorkoutTemplateSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateSet
     */
    select?: WorkoutTemplateSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateSet
     */
    omit?: WorkoutTemplateSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateSetInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutTemplateSet to fetch.
     */
    where: WorkoutTemplateSetWhereUniqueInput
  }

  /**
   * WorkoutTemplateSet findUniqueOrThrow
   */
  export type WorkoutTemplateSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateSet
     */
    select?: WorkoutTemplateSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateSet
     */
    omit?: WorkoutTemplateSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateSetInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutTemplateSet to fetch.
     */
    where: WorkoutTemplateSetWhereUniqueInput
  }

  /**
   * WorkoutTemplateSet findFirst
   */
  export type WorkoutTemplateSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateSet
     */
    select?: WorkoutTemplateSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateSet
     */
    omit?: WorkoutTemplateSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateSetInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutTemplateSet to fetch.
     */
    where?: WorkoutTemplateSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutTemplateSets to fetch.
     */
    orderBy?: WorkoutTemplateSetOrderByWithRelationInput | WorkoutTemplateSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutTemplateSets.
     */
    cursor?: WorkoutTemplateSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutTemplateSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutTemplateSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutTemplateSets.
     */
    distinct?: WorkoutTemplateSetScalarFieldEnum | WorkoutTemplateSetScalarFieldEnum[]
  }

  /**
   * WorkoutTemplateSet findFirstOrThrow
   */
  export type WorkoutTemplateSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateSet
     */
    select?: WorkoutTemplateSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateSet
     */
    omit?: WorkoutTemplateSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateSetInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutTemplateSet to fetch.
     */
    where?: WorkoutTemplateSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutTemplateSets to fetch.
     */
    orderBy?: WorkoutTemplateSetOrderByWithRelationInput | WorkoutTemplateSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutTemplateSets.
     */
    cursor?: WorkoutTemplateSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutTemplateSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutTemplateSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutTemplateSets.
     */
    distinct?: WorkoutTemplateSetScalarFieldEnum | WorkoutTemplateSetScalarFieldEnum[]
  }

  /**
   * WorkoutTemplateSet findMany
   */
  export type WorkoutTemplateSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateSet
     */
    select?: WorkoutTemplateSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateSet
     */
    omit?: WorkoutTemplateSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateSetInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutTemplateSets to fetch.
     */
    where?: WorkoutTemplateSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutTemplateSets to fetch.
     */
    orderBy?: WorkoutTemplateSetOrderByWithRelationInput | WorkoutTemplateSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutTemplateSets.
     */
    cursor?: WorkoutTemplateSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutTemplateSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutTemplateSets.
     */
    skip?: number
    distinct?: WorkoutTemplateSetScalarFieldEnum | WorkoutTemplateSetScalarFieldEnum[]
  }

  /**
   * WorkoutTemplateSet create
   */
  export type WorkoutTemplateSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateSet
     */
    select?: WorkoutTemplateSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateSet
     */
    omit?: WorkoutTemplateSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateSetInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutTemplateSet.
     */
    data: XOR<WorkoutTemplateSetCreateInput, WorkoutTemplateSetUncheckedCreateInput>
  }

  /**
   * WorkoutTemplateSet createMany
   */
  export type WorkoutTemplateSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutTemplateSets.
     */
    data: WorkoutTemplateSetCreateManyInput | WorkoutTemplateSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutTemplateSet createManyAndReturn
   */
  export type WorkoutTemplateSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateSet
     */
    select?: WorkoutTemplateSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateSet
     */
    omit?: WorkoutTemplateSetOmit<ExtArgs> | null
    /**
     * The data used to create many WorkoutTemplateSets.
     */
    data: WorkoutTemplateSetCreateManyInput | WorkoutTemplateSetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateSetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutTemplateSet update
   */
  export type WorkoutTemplateSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateSet
     */
    select?: WorkoutTemplateSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateSet
     */
    omit?: WorkoutTemplateSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateSetInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutTemplateSet.
     */
    data: XOR<WorkoutTemplateSetUpdateInput, WorkoutTemplateSetUncheckedUpdateInput>
    /**
     * Choose, which WorkoutTemplateSet to update.
     */
    where: WorkoutTemplateSetWhereUniqueInput
  }

  /**
   * WorkoutTemplateSet updateMany
   */
  export type WorkoutTemplateSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutTemplateSets.
     */
    data: XOR<WorkoutTemplateSetUpdateManyMutationInput, WorkoutTemplateSetUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutTemplateSets to update
     */
    where?: WorkoutTemplateSetWhereInput
    /**
     * Limit how many WorkoutTemplateSets to update.
     */
    limit?: number
  }

  /**
   * WorkoutTemplateSet updateManyAndReturn
   */
  export type WorkoutTemplateSetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateSet
     */
    select?: WorkoutTemplateSetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateSet
     */
    omit?: WorkoutTemplateSetOmit<ExtArgs> | null
    /**
     * The data used to update WorkoutTemplateSets.
     */
    data: XOR<WorkoutTemplateSetUpdateManyMutationInput, WorkoutTemplateSetUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutTemplateSets to update
     */
    where?: WorkoutTemplateSetWhereInput
    /**
     * Limit how many WorkoutTemplateSets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateSetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutTemplateSet upsert
   */
  export type WorkoutTemplateSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateSet
     */
    select?: WorkoutTemplateSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateSet
     */
    omit?: WorkoutTemplateSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateSetInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutTemplateSet to update in case it exists.
     */
    where: WorkoutTemplateSetWhereUniqueInput
    /**
     * In case the WorkoutTemplateSet found by the `where` argument doesn't exist, create a new WorkoutTemplateSet with this data.
     */
    create: XOR<WorkoutTemplateSetCreateInput, WorkoutTemplateSetUncheckedCreateInput>
    /**
     * In case the WorkoutTemplateSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutTemplateSetUpdateInput, WorkoutTemplateSetUncheckedUpdateInput>
  }

  /**
   * WorkoutTemplateSet delete
   */
  export type WorkoutTemplateSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateSet
     */
    select?: WorkoutTemplateSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateSet
     */
    omit?: WorkoutTemplateSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateSetInclude<ExtArgs> | null
    /**
     * Filter which WorkoutTemplateSet to delete.
     */
    where: WorkoutTemplateSetWhereUniqueInput
  }

  /**
   * WorkoutTemplateSet deleteMany
   */
  export type WorkoutTemplateSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutTemplateSets to delete
     */
    where?: WorkoutTemplateSetWhereInput
    /**
     * Limit how many WorkoutTemplateSets to delete.
     */
    limit?: number
  }

  /**
   * WorkoutTemplateSet without action
   */
  export type WorkoutTemplateSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplateSet
     */
    select?: WorkoutTemplateSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplateSet
     */
    omit?: WorkoutTemplateSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateSetInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutSession
   */

  export type AggregateWorkoutSession = {
    _count: WorkoutSessionCountAggregateOutputType | null
    _min: WorkoutSessionMinAggregateOutputType | null
    _max: WorkoutSessionMaxAggregateOutputType | null
  }

  export type WorkoutSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    workoutTemplateId: string | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
  }

  export type WorkoutSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    workoutTemplateId: string | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
  }

  export type WorkoutSessionCountAggregateOutputType = {
    id: number
    userId: number
    workoutTemplateId: number
    startTime: number
    endTime: number
    createdAt: number
    _all: number
  }


  export type WorkoutSessionMinAggregateInputType = {
    id?: true
    userId?: true
    workoutTemplateId?: true
    startTime?: true
    endTime?: true
    createdAt?: true
  }

  export type WorkoutSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    workoutTemplateId?: true
    startTime?: true
    endTime?: true
    createdAt?: true
  }

  export type WorkoutSessionCountAggregateInputType = {
    id?: true
    userId?: true
    workoutTemplateId?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    _all?: true
  }

  export type WorkoutSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutSession to aggregate.
     */
    where?: WorkoutSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutSessions to fetch.
     */
    orderBy?: WorkoutSessionOrderByWithRelationInput | WorkoutSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutSessions
    **/
    _count?: true | WorkoutSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutSessionMaxAggregateInputType
  }

  export type GetWorkoutSessionAggregateType<T extends WorkoutSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutSession[P]>
      : GetScalarType<T[P], AggregateWorkoutSession[P]>
  }




  export type WorkoutSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutSessionWhereInput
    orderBy?: WorkoutSessionOrderByWithAggregationInput | WorkoutSessionOrderByWithAggregationInput[]
    by: WorkoutSessionScalarFieldEnum[] | WorkoutSessionScalarFieldEnum
    having?: WorkoutSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutSessionCountAggregateInputType | true
    _min?: WorkoutSessionMinAggregateInputType
    _max?: WorkoutSessionMaxAggregateInputType
  }

  export type WorkoutSessionGroupByOutputType = {
    id: string
    userId: string
    workoutTemplateId: string | null
    startTime: Date
    endTime: Date | null
    createdAt: Date
    _count: WorkoutSessionCountAggregateOutputType | null
    _min: WorkoutSessionMinAggregateOutputType | null
    _max: WorkoutSessionMaxAggregateOutputType | null
  }

  type GetWorkoutSessionGroupByPayload<T extends WorkoutSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutSessionGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutSessionGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    workoutTemplateId?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    workoutTemplate?: boolean | WorkoutSession$workoutTemplateArgs<ExtArgs>
    exercises?: boolean | WorkoutSession$exercisesArgs<ExtArgs>
    _count?: boolean | WorkoutSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutSession"]>

  export type WorkoutSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    workoutTemplateId?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    workoutTemplate?: boolean | WorkoutSession$workoutTemplateArgs<ExtArgs>
  }, ExtArgs["result"]["workoutSession"]>

  export type WorkoutSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    workoutTemplateId?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    workoutTemplate?: boolean | WorkoutSession$workoutTemplateArgs<ExtArgs>
  }, ExtArgs["result"]["workoutSession"]>

  export type WorkoutSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    workoutTemplateId?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
  }

  export type WorkoutSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "workoutTemplateId" | "startTime" | "endTime" | "createdAt", ExtArgs["result"]["workoutSession"]>
  export type WorkoutSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    workoutTemplate?: boolean | WorkoutSession$workoutTemplateArgs<ExtArgs>
    exercises?: boolean | WorkoutSession$exercisesArgs<ExtArgs>
    _count?: boolean | WorkoutSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkoutSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    workoutTemplate?: boolean | WorkoutSession$workoutTemplateArgs<ExtArgs>
  }
  export type WorkoutSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    workoutTemplate?: boolean | WorkoutSession$workoutTemplateArgs<ExtArgs>
  }

  export type $WorkoutSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      workoutTemplate: Prisma.$WorkoutTemplatePayload<ExtArgs> | null
      exercises: Prisma.$WorkoutSessionExercisePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      workoutTemplateId: string | null
      startTime: Date
      endTime: Date | null
      createdAt: Date
    }, ExtArgs["result"]["workoutSession"]>
    composites: {}
  }

  type WorkoutSessionGetPayload<S extends boolean | null | undefined | WorkoutSessionDefaultArgs> = $Result.GetResult<Prisma.$WorkoutSessionPayload, S>

  type WorkoutSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkoutSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkoutSessionCountAggregateInputType | true
    }

  export interface WorkoutSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutSession'], meta: { name: 'WorkoutSession' } }
    /**
     * Find zero or one WorkoutSession that matches the filter.
     * @param {WorkoutSessionFindUniqueArgs} args - Arguments to find a WorkoutSession
     * @example
     * // Get one WorkoutSession
     * const workoutSession = await prisma.workoutSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutSessionFindUniqueArgs>(args: SelectSubset<T, WorkoutSessionFindUniqueArgs<ExtArgs>>): Prisma__WorkoutSessionClient<$Result.GetResult<Prisma.$WorkoutSessionPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one WorkoutSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkoutSessionFindUniqueOrThrowArgs} args - Arguments to find a WorkoutSession
     * @example
     * // Get one WorkoutSession
     * const workoutSession = await prisma.workoutSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutSessionClient<$Result.GetResult<Prisma.$WorkoutSessionPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first WorkoutSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionFindFirstArgs} args - Arguments to find a WorkoutSession
     * @example
     * // Get one WorkoutSession
     * const workoutSession = await prisma.workoutSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutSessionFindFirstArgs>(args?: SelectSubset<T, WorkoutSessionFindFirstArgs<ExtArgs>>): Prisma__WorkoutSessionClient<$Result.GetResult<Prisma.$WorkoutSessionPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first WorkoutSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionFindFirstOrThrowArgs} args - Arguments to find a WorkoutSession
     * @example
     * // Get one WorkoutSession
     * const workoutSession = await prisma.workoutSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutSessionClient<$Result.GetResult<Prisma.$WorkoutSessionPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more WorkoutSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutSessions
     * const workoutSessions = await prisma.workoutSession.findMany()
     * 
     * // Get first 10 WorkoutSessions
     * const workoutSessions = await prisma.workoutSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutSessionWithIdOnly = await prisma.workoutSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutSessionFindManyArgs>(args?: SelectSubset<T, WorkoutSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSessionPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a WorkoutSession.
     * @param {WorkoutSessionCreateArgs} args - Arguments to create a WorkoutSession.
     * @example
     * // Create one WorkoutSession
     * const WorkoutSession = await prisma.workoutSession.create({
     *   data: {
     *     // ... data to create a WorkoutSession
     *   }
     * })
     * 
     */
    create<T extends WorkoutSessionCreateArgs>(args: SelectSubset<T, WorkoutSessionCreateArgs<ExtArgs>>): Prisma__WorkoutSessionClient<$Result.GetResult<Prisma.$WorkoutSessionPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many WorkoutSessions.
     * @param {WorkoutSessionCreateManyArgs} args - Arguments to create many WorkoutSessions.
     * @example
     * // Create many WorkoutSessions
     * const workoutSession = await prisma.workoutSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutSessionCreateManyArgs>(args?: SelectSubset<T, WorkoutSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutSessions and returns the data saved in the database.
     * @param {WorkoutSessionCreateManyAndReturnArgs} args - Arguments to create many WorkoutSessions.
     * @example
     * // Create many WorkoutSessions
     * const workoutSession = await prisma.workoutSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutSessions and only return the `id`
     * const workoutSessionWithIdOnly = await prisma.workoutSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSessionPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a WorkoutSession.
     * @param {WorkoutSessionDeleteArgs} args - Arguments to delete one WorkoutSession.
     * @example
     * // Delete one WorkoutSession
     * const WorkoutSession = await prisma.workoutSession.delete({
     *   where: {
     *     // ... filter to delete one WorkoutSession
     *   }
     * })
     * 
     */
    delete<T extends WorkoutSessionDeleteArgs>(args: SelectSubset<T, WorkoutSessionDeleteArgs<ExtArgs>>): Prisma__WorkoutSessionClient<$Result.GetResult<Prisma.$WorkoutSessionPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one WorkoutSession.
     * @param {WorkoutSessionUpdateArgs} args - Arguments to update one WorkoutSession.
     * @example
     * // Update one WorkoutSession
     * const workoutSession = await prisma.workoutSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutSessionUpdateArgs>(args: SelectSubset<T, WorkoutSessionUpdateArgs<ExtArgs>>): Prisma__WorkoutSessionClient<$Result.GetResult<Prisma.$WorkoutSessionPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more WorkoutSessions.
     * @param {WorkoutSessionDeleteManyArgs} args - Arguments to filter WorkoutSessions to delete.
     * @example
     * // Delete a few WorkoutSessions
     * const { count } = await prisma.workoutSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutSessionDeleteManyArgs>(args?: SelectSubset<T, WorkoutSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutSessions
     * const workoutSession = await prisma.workoutSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutSessionUpdateManyArgs>(args: SelectSubset<T, WorkoutSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutSessions and returns the data updated in the database.
     * @param {WorkoutSessionUpdateManyAndReturnArgs} args - Arguments to update many WorkoutSessions.
     * @example
     * // Update many WorkoutSessions
     * const workoutSession = await prisma.workoutSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkoutSessions and only return the `id`
     * const workoutSessionWithIdOnly = await prisma.workoutSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkoutSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkoutSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSessionPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one WorkoutSession.
     * @param {WorkoutSessionUpsertArgs} args - Arguments to update or create a WorkoutSession.
     * @example
     * // Update or create a WorkoutSession
     * const workoutSession = await prisma.workoutSession.upsert({
     *   create: {
     *     // ... data to create a WorkoutSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutSession we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutSessionUpsertArgs>(args: SelectSubset<T, WorkoutSessionUpsertArgs<ExtArgs>>): Prisma__WorkoutSessionClient<$Result.GetResult<Prisma.$WorkoutSessionPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of WorkoutSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionCountArgs} args - Arguments to filter WorkoutSessions to count.
     * @example
     * // Count the number of WorkoutSessions
     * const count = await prisma.workoutSession.count({
     *   where: {
     *     // ... the filter for the WorkoutSessions we want to count
     *   }
     * })
    **/
    count<T extends WorkoutSessionCountArgs>(
      args?: Subset<T, WorkoutSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutSessionAggregateArgs>(args: Subset<T, WorkoutSessionAggregateArgs>): Prisma.PrismaPromise<GetWorkoutSessionAggregateType<T>>

    /**
     * Group by WorkoutSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutSessionGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutSession model
   */
  readonly fields: WorkoutSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    workoutTemplate<T extends WorkoutSession$workoutTemplateArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutSession$workoutTemplateArgs<ExtArgs>>): Prisma__WorkoutTemplateClient<$Result.GetResult<Prisma.$WorkoutTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    exercises<T extends WorkoutSession$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutSession$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSessionExercisePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkoutSession model
   */ 
  interface WorkoutSessionFieldRefs {
    readonly id: FieldRef<"WorkoutSession", 'String'>
    readonly userId: FieldRef<"WorkoutSession", 'String'>
    readonly workoutTemplateId: FieldRef<"WorkoutSession", 'String'>
    readonly startTime: FieldRef<"WorkoutSession", 'DateTime'>
    readonly endTime: FieldRef<"WorkoutSession", 'DateTime'>
    readonly createdAt: FieldRef<"WorkoutSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutSession findUnique
   */
  export type WorkoutSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSession
     */
    select?: WorkoutSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSession
     */
    omit?: WorkoutSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSession to fetch.
     */
    where: WorkoutSessionWhereUniqueInput
  }

  /**
   * WorkoutSession findUniqueOrThrow
   */
  export type WorkoutSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSession
     */
    select?: WorkoutSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSession
     */
    omit?: WorkoutSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSession to fetch.
     */
    where: WorkoutSessionWhereUniqueInput
  }

  /**
   * WorkoutSession findFirst
   */
  export type WorkoutSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSession
     */
    select?: WorkoutSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSession
     */
    omit?: WorkoutSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSession to fetch.
     */
    where?: WorkoutSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutSessions to fetch.
     */
    orderBy?: WorkoutSessionOrderByWithRelationInput | WorkoutSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutSessions.
     */
    cursor?: WorkoutSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutSessions.
     */
    distinct?: WorkoutSessionScalarFieldEnum | WorkoutSessionScalarFieldEnum[]
  }

  /**
   * WorkoutSession findFirstOrThrow
   */
  export type WorkoutSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSession
     */
    select?: WorkoutSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSession
     */
    omit?: WorkoutSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSession to fetch.
     */
    where?: WorkoutSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutSessions to fetch.
     */
    orderBy?: WorkoutSessionOrderByWithRelationInput | WorkoutSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutSessions.
     */
    cursor?: WorkoutSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutSessions.
     */
    distinct?: WorkoutSessionScalarFieldEnum | WorkoutSessionScalarFieldEnum[]
  }

  /**
   * WorkoutSession findMany
   */
  export type WorkoutSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSession
     */
    select?: WorkoutSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSession
     */
    omit?: WorkoutSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSessions to fetch.
     */
    where?: WorkoutSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutSessions to fetch.
     */
    orderBy?: WorkoutSessionOrderByWithRelationInput | WorkoutSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutSessions.
     */
    cursor?: WorkoutSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutSessions.
     */
    skip?: number
    distinct?: WorkoutSessionScalarFieldEnum | WorkoutSessionScalarFieldEnum[]
  }

  /**
   * WorkoutSession create
   */
  export type WorkoutSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSession
     */
    select?: WorkoutSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSession
     */
    omit?: WorkoutSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutSession.
     */
    data: XOR<WorkoutSessionCreateInput, WorkoutSessionUncheckedCreateInput>
  }

  /**
   * WorkoutSession createMany
   */
  export type WorkoutSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutSessions.
     */
    data: WorkoutSessionCreateManyInput | WorkoutSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutSession createManyAndReturn
   */
  export type WorkoutSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSession
     */
    select?: WorkoutSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSession
     */
    omit?: WorkoutSessionOmit<ExtArgs> | null
    /**
     * The data used to create many WorkoutSessions.
     */
    data: WorkoutSessionCreateManyInput | WorkoutSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutSession update
   */
  export type WorkoutSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSession
     */
    select?: WorkoutSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSession
     */
    omit?: WorkoutSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutSession.
     */
    data: XOR<WorkoutSessionUpdateInput, WorkoutSessionUncheckedUpdateInput>
    /**
     * Choose, which WorkoutSession to update.
     */
    where: WorkoutSessionWhereUniqueInput
  }

  /**
   * WorkoutSession updateMany
   */
  export type WorkoutSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutSessions.
     */
    data: XOR<WorkoutSessionUpdateManyMutationInput, WorkoutSessionUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutSessions to update
     */
    where?: WorkoutSessionWhereInput
    /**
     * Limit how many WorkoutSessions to update.
     */
    limit?: number
  }

  /**
   * WorkoutSession updateManyAndReturn
   */
  export type WorkoutSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSession
     */
    select?: WorkoutSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSession
     */
    omit?: WorkoutSessionOmit<ExtArgs> | null
    /**
     * The data used to update WorkoutSessions.
     */
    data: XOR<WorkoutSessionUpdateManyMutationInput, WorkoutSessionUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutSessions to update
     */
    where?: WorkoutSessionWhereInput
    /**
     * Limit how many WorkoutSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutSession upsert
   */
  export type WorkoutSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSession
     */
    select?: WorkoutSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSession
     */
    omit?: WorkoutSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutSession to update in case it exists.
     */
    where: WorkoutSessionWhereUniqueInput
    /**
     * In case the WorkoutSession found by the `where` argument doesn't exist, create a new WorkoutSession with this data.
     */
    create: XOR<WorkoutSessionCreateInput, WorkoutSessionUncheckedCreateInput>
    /**
     * In case the WorkoutSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutSessionUpdateInput, WorkoutSessionUncheckedUpdateInput>
  }

  /**
   * WorkoutSession delete
   */
  export type WorkoutSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSession
     */
    select?: WorkoutSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSession
     */
    omit?: WorkoutSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionInclude<ExtArgs> | null
    /**
     * Filter which WorkoutSession to delete.
     */
    where: WorkoutSessionWhereUniqueInput
  }

  /**
   * WorkoutSession deleteMany
   */
  export type WorkoutSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutSessions to delete
     */
    where?: WorkoutSessionWhereInput
    /**
     * Limit how many WorkoutSessions to delete.
     */
    limit?: number
  }

  /**
   * WorkoutSession.workoutTemplate
   */
  export type WorkoutSession$workoutTemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutTemplate
     */
    select?: WorkoutTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutTemplate
     */
    omit?: WorkoutTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutTemplateInclude<ExtArgs> | null
    where?: WorkoutTemplateWhereInput
  }

  /**
   * WorkoutSession.exercises
   */
  export type WorkoutSession$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionExercise
     */
    select?: WorkoutSessionExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionExercise
     */
    omit?: WorkoutSessionExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionExerciseInclude<ExtArgs> | null
    where?: WorkoutSessionExerciseWhereInput
    orderBy?: WorkoutSessionExerciseOrderByWithRelationInput | WorkoutSessionExerciseOrderByWithRelationInput[]
    cursor?: WorkoutSessionExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutSessionExerciseScalarFieldEnum | WorkoutSessionExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutSession without action
   */
  export type WorkoutSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSession
     */
    select?: WorkoutSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSession
     */
    omit?: WorkoutSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutSessionExercise
   */

  export type AggregateWorkoutSessionExercise = {
    _count: WorkoutSessionExerciseCountAggregateOutputType | null
    _min: WorkoutSessionExerciseMinAggregateOutputType | null
    _max: WorkoutSessionExerciseMaxAggregateOutputType | null
  }

  export type WorkoutSessionExerciseMinAggregateOutputType = {
    id: string | null
    workoutSessionId: string | null
    exerciseId: string | null
    createdAt: Date | null
  }

  export type WorkoutSessionExerciseMaxAggregateOutputType = {
    id: string | null
    workoutSessionId: string | null
    exerciseId: string | null
    createdAt: Date | null
  }

  export type WorkoutSessionExerciseCountAggregateOutputType = {
    id: number
    workoutSessionId: number
    exerciseId: number
    createdAt: number
    _all: number
  }


  export type WorkoutSessionExerciseMinAggregateInputType = {
    id?: true
    workoutSessionId?: true
    exerciseId?: true
    createdAt?: true
  }

  export type WorkoutSessionExerciseMaxAggregateInputType = {
    id?: true
    workoutSessionId?: true
    exerciseId?: true
    createdAt?: true
  }

  export type WorkoutSessionExerciseCountAggregateInputType = {
    id?: true
    workoutSessionId?: true
    exerciseId?: true
    createdAt?: true
    _all?: true
  }

  export type WorkoutSessionExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutSessionExercise to aggregate.
     */
    where?: WorkoutSessionExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutSessionExercises to fetch.
     */
    orderBy?: WorkoutSessionExerciseOrderByWithRelationInput | WorkoutSessionExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutSessionExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutSessionExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutSessionExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutSessionExercises
    **/
    _count?: true | WorkoutSessionExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutSessionExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutSessionExerciseMaxAggregateInputType
  }

  export type GetWorkoutSessionExerciseAggregateType<T extends WorkoutSessionExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutSessionExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutSessionExercise[P]>
      : GetScalarType<T[P], AggregateWorkoutSessionExercise[P]>
  }




  export type WorkoutSessionExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutSessionExerciseWhereInput
    orderBy?: WorkoutSessionExerciseOrderByWithAggregationInput | WorkoutSessionExerciseOrderByWithAggregationInput[]
    by: WorkoutSessionExerciseScalarFieldEnum[] | WorkoutSessionExerciseScalarFieldEnum
    having?: WorkoutSessionExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutSessionExerciseCountAggregateInputType | true
    _min?: WorkoutSessionExerciseMinAggregateInputType
    _max?: WorkoutSessionExerciseMaxAggregateInputType
  }

  export type WorkoutSessionExerciseGroupByOutputType = {
    id: string
    workoutSessionId: string
    exerciseId: string
    createdAt: Date
    _count: WorkoutSessionExerciseCountAggregateOutputType | null
    _min: WorkoutSessionExerciseMinAggregateOutputType | null
    _max: WorkoutSessionExerciseMaxAggregateOutputType | null
  }

  type GetWorkoutSessionExerciseGroupByPayload<T extends WorkoutSessionExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutSessionExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutSessionExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutSessionExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutSessionExerciseGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutSessionExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutSessionId?: boolean
    exerciseId?: boolean
    createdAt?: boolean
    workoutSession?: boolean | WorkoutSessionDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    sets?: boolean | WorkoutSessionExercise$setsArgs<ExtArgs>
    _count?: boolean | WorkoutSessionExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutSessionExercise"]>

  export type WorkoutSessionExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutSessionId?: boolean
    exerciseId?: boolean
    createdAt?: boolean
    workoutSession?: boolean | WorkoutSessionDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutSessionExercise"]>

  export type WorkoutSessionExerciseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutSessionId?: boolean
    exerciseId?: boolean
    createdAt?: boolean
    workoutSession?: boolean | WorkoutSessionDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutSessionExercise"]>

  export type WorkoutSessionExerciseSelectScalar = {
    id?: boolean
    workoutSessionId?: boolean
    exerciseId?: boolean
    createdAt?: boolean
  }

  export type WorkoutSessionExerciseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workoutSessionId" | "exerciseId" | "createdAt", ExtArgs["result"]["workoutSessionExercise"]>
  export type WorkoutSessionExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutSession?: boolean | WorkoutSessionDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    sets?: boolean | WorkoutSessionExercise$setsArgs<ExtArgs>
    _count?: boolean | WorkoutSessionExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkoutSessionExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutSession?: boolean | WorkoutSessionDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }
  export type WorkoutSessionExerciseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutSession?: boolean | WorkoutSessionDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
  }

  export type $WorkoutSessionExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutSessionExercise"
    objects: {
      workoutSession: Prisma.$WorkoutSessionPayload<ExtArgs>
      exercise: Prisma.$ExercisePayload<ExtArgs>
      sets: Prisma.$WorkoutSessionSetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workoutSessionId: string
      exerciseId: string
      createdAt: Date
    }, ExtArgs["result"]["workoutSessionExercise"]>
    composites: {}
  }

  type WorkoutSessionExerciseGetPayload<S extends boolean | null | undefined | WorkoutSessionExerciseDefaultArgs> = $Result.GetResult<Prisma.$WorkoutSessionExercisePayload, S>

  type WorkoutSessionExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkoutSessionExerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkoutSessionExerciseCountAggregateInputType | true
    }

  export interface WorkoutSessionExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutSessionExercise'], meta: { name: 'WorkoutSessionExercise' } }
    /**
     * Find zero or one WorkoutSessionExercise that matches the filter.
     * @param {WorkoutSessionExerciseFindUniqueArgs} args - Arguments to find a WorkoutSessionExercise
     * @example
     * // Get one WorkoutSessionExercise
     * const workoutSessionExercise = await prisma.workoutSessionExercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutSessionExerciseFindUniqueArgs>(args: SelectSubset<T, WorkoutSessionExerciseFindUniqueArgs<ExtArgs>>): Prisma__WorkoutSessionExerciseClient<$Result.GetResult<Prisma.$WorkoutSessionExercisePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one WorkoutSessionExercise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkoutSessionExerciseFindUniqueOrThrowArgs} args - Arguments to find a WorkoutSessionExercise
     * @example
     * // Get one WorkoutSessionExercise
     * const workoutSessionExercise = await prisma.workoutSessionExercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutSessionExerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutSessionExerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutSessionExerciseClient<$Result.GetResult<Prisma.$WorkoutSessionExercisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first WorkoutSessionExercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionExerciseFindFirstArgs} args - Arguments to find a WorkoutSessionExercise
     * @example
     * // Get one WorkoutSessionExercise
     * const workoutSessionExercise = await prisma.workoutSessionExercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutSessionExerciseFindFirstArgs>(args?: SelectSubset<T, WorkoutSessionExerciseFindFirstArgs<ExtArgs>>): Prisma__WorkoutSessionExerciseClient<$Result.GetResult<Prisma.$WorkoutSessionExercisePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first WorkoutSessionExercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionExerciseFindFirstOrThrowArgs} args - Arguments to find a WorkoutSessionExercise
     * @example
     * // Get one WorkoutSessionExercise
     * const workoutSessionExercise = await prisma.workoutSessionExercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutSessionExerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutSessionExerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutSessionExerciseClient<$Result.GetResult<Prisma.$WorkoutSessionExercisePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more WorkoutSessionExercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutSessionExercises
     * const workoutSessionExercises = await prisma.workoutSessionExercise.findMany()
     * 
     * // Get first 10 WorkoutSessionExercises
     * const workoutSessionExercises = await prisma.workoutSessionExercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutSessionExerciseWithIdOnly = await prisma.workoutSessionExercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutSessionExerciseFindManyArgs>(args?: SelectSubset<T, WorkoutSessionExerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSessionExercisePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a WorkoutSessionExercise.
     * @param {WorkoutSessionExerciseCreateArgs} args - Arguments to create a WorkoutSessionExercise.
     * @example
     * // Create one WorkoutSessionExercise
     * const WorkoutSessionExercise = await prisma.workoutSessionExercise.create({
     *   data: {
     *     // ... data to create a WorkoutSessionExercise
     *   }
     * })
     * 
     */
    create<T extends WorkoutSessionExerciseCreateArgs>(args: SelectSubset<T, WorkoutSessionExerciseCreateArgs<ExtArgs>>): Prisma__WorkoutSessionExerciseClient<$Result.GetResult<Prisma.$WorkoutSessionExercisePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many WorkoutSessionExercises.
     * @param {WorkoutSessionExerciseCreateManyArgs} args - Arguments to create many WorkoutSessionExercises.
     * @example
     * // Create many WorkoutSessionExercises
     * const workoutSessionExercise = await prisma.workoutSessionExercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutSessionExerciseCreateManyArgs>(args?: SelectSubset<T, WorkoutSessionExerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutSessionExercises and returns the data saved in the database.
     * @param {WorkoutSessionExerciseCreateManyAndReturnArgs} args - Arguments to create many WorkoutSessionExercises.
     * @example
     * // Create many WorkoutSessionExercises
     * const workoutSessionExercise = await prisma.workoutSessionExercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutSessionExercises and only return the `id`
     * const workoutSessionExerciseWithIdOnly = await prisma.workoutSessionExercise.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutSessionExerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutSessionExerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSessionExercisePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a WorkoutSessionExercise.
     * @param {WorkoutSessionExerciseDeleteArgs} args - Arguments to delete one WorkoutSessionExercise.
     * @example
     * // Delete one WorkoutSessionExercise
     * const WorkoutSessionExercise = await prisma.workoutSessionExercise.delete({
     *   where: {
     *     // ... filter to delete one WorkoutSessionExercise
     *   }
     * })
     * 
     */
    delete<T extends WorkoutSessionExerciseDeleteArgs>(args: SelectSubset<T, WorkoutSessionExerciseDeleteArgs<ExtArgs>>): Prisma__WorkoutSessionExerciseClient<$Result.GetResult<Prisma.$WorkoutSessionExercisePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one WorkoutSessionExercise.
     * @param {WorkoutSessionExerciseUpdateArgs} args - Arguments to update one WorkoutSessionExercise.
     * @example
     * // Update one WorkoutSessionExercise
     * const workoutSessionExercise = await prisma.workoutSessionExercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutSessionExerciseUpdateArgs>(args: SelectSubset<T, WorkoutSessionExerciseUpdateArgs<ExtArgs>>): Prisma__WorkoutSessionExerciseClient<$Result.GetResult<Prisma.$WorkoutSessionExercisePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more WorkoutSessionExercises.
     * @param {WorkoutSessionExerciseDeleteManyArgs} args - Arguments to filter WorkoutSessionExercises to delete.
     * @example
     * // Delete a few WorkoutSessionExercises
     * const { count } = await prisma.workoutSessionExercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutSessionExerciseDeleteManyArgs>(args?: SelectSubset<T, WorkoutSessionExerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutSessionExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutSessionExercises
     * const workoutSessionExercise = await prisma.workoutSessionExercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutSessionExerciseUpdateManyArgs>(args: SelectSubset<T, WorkoutSessionExerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutSessionExercises and returns the data updated in the database.
     * @param {WorkoutSessionExerciseUpdateManyAndReturnArgs} args - Arguments to update many WorkoutSessionExercises.
     * @example
     * // Update many WorkoutSessionExercises
     * const workoutSessionExercise = await prisma.workoutSessionExercise.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkoutSessionExercises and only return the `id`
     * const workoutSessionExerciseWithIdOnly = await prisma.workoutSessionExercise.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkoutSessionExerciseUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkoutSessionExerciseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSessionExercisePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one WorkoutSessionExercise.
     * @param {WorkoutSessionExerciseUpsertArgs} args - Arguments to update or create a WorkoutSessionExercise.
     * @example
     * // Update or create a WorkoutSessionExercise
     * const workoutSessionExercise = await prisma.workoutSessionExercise.upsert({
     *   create: {
     *     // ... data to create a WorkoutSessionExercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutSessionExercise we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutSessionExerciseUpsertArgs>(args: SelectSubset<T, WorkoutSessionExerciseUpsertArgs<ExtArgs>>): Prisma__WorkoutSessionExerciseClient<$Result.GetResult<Prisma.$WorkoutSessionExercisePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of WorkoutSessionExercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionExerciseCountArgs} args - Arguments to filter WorkoutSessionExercises to count.
     * @example
     * // Count the number of WorkoutSessionExercises
     * const count = await prisma.workoutSessionExercise.count({
     *   where: {
     *     // ... the filter for the WorkoutSessionExercises we want to count
     *   }
     * })
    **/
    count<T extends WorkoutSessionExerciseCountArgs>(
      args?: Subset<T, WorkoutSessionExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutSessionExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutSessionExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutSessionExerciseAggregateArgs>(args: Subset<T, WorkoutSessionExerciseAggregateArgs>): Prisma.PrismaPromise<GetWorkoutSessionExerciseAggregateType<T>>

    /**
     * Group by WorkoutSessionExercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutSessionExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutSessionExerciseGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutSessionExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutSessionExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutSessionExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutSessionExercise model
   */
  readonly fields: WorkoutSessionExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutSessionExercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutSessionExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workoutSession<T extends WorkoutSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutSessionDefaultArgs<ExtArgs>>): Prisma__WorkoutSessionClient<$Result.GetResult<Prisma.$WorkoutSessionPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    exercise<T extends ExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseDefaultArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    sets<T extends WorkoutSessionExercise$setsArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutSessionExercise$setsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSessionSetPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkoutSessionExercise model
   */ 
  interface WorkoutSessionExerciseFieldRefs {
    readonly id: FieldRef<"WorkoutSessionExercise", 'String'>
    readonly workoutSessionId: FieldRef<"WorkoutSessionExercise", 'String'>
    readonly exerciseId: FieldRef<"WorkoutSessionExercise", 'String'>
    readonly createdAt: FieldRef<"WorkoutSessionExercise", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutSessionExercise findUnique
   */
  export type WorkoutSessionExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionExercise
     */
    select?: WorkoutSessionExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionExercise
     */
    omit?: WorkoutSessionExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSessionExercise to fetch.
     */
    where: WorkoutSessionExerciseWhereUniqueInput
  }

  /**
   * WorkoutSessionExercise findUniqueOrThrow
   */
  export type WorkoutSessionExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionExercise
     */
    select?: WorkoutSessionExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionExercise
     */
    omit?: WorkoutSessionExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSessionExercise to fetch.
     */
    where: WorkoutSessionExerciseWhereUniqueInput
  }

  /**
   * WorkoutSessionExercise findFirst
   */
  export type WorkoutSessionExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionExercise
     */
    select?: WorkoutSessionExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionExercise
     */
    omit?: WorkoutSessionExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSessionExercise to fetch.
     */
    where?: WorkoutSessionExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutSessionExercises to fetch.
     */
    orderBy?: WorkoutSessionExerciseOrderByWithRelationInput | WorkoutSessionExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutSessionExercises.
     */
    cursor?: WorkoutSessionExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutSessionExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutSessionExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutSessionExercises.
     */
    distinct?: WorkoutSessionExerciseScalarFieldEnum | WorkoutSessionExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutSessionExercise findFirstOrThrow
   */
  export type WorkoutSessionExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionExercise
     */
    select?: WorkoutSessionExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionExercise
     */
    omit?: WorkoutSessionExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSessionExercise to fetch.
     */
    where?: WorkoutSessionExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutSessionExercises to fetch.
     */
    orderBy?: WorkoutSessionExerciseOrderByWithRelationInput | WorkoutSessionExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutSessionExercises.
     */
    cursor?: WorkoutSessionExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutSessionExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutSessionExercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutSessionExercises.
     */
    distinct?: WorkoutSessionExerciseScalarFieldEnum | WorkoutSessionExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutSessionExercise findMany
   */
  export type WorkoutSessionExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionExercise
     */
    select?: WorkoutSessionExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionExercise
     */
    omit?: WorkoutSessionExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionExerciseInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSessionExercises to fetch.
     */
    where?: WorkoutSessionExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutSessionExercises to fetch.
     */
    orderBy?: WorkoutSessionExerciseOrderByWithRelationInput | WorkoutSessionExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutSessionExercises.
     */
    cursor?: WorkoutSessionExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutSessionExercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutSessionExercises.
     */
    skip?: number
    distinct?: WorkoutSessionExerciseScalarFieldEnum | WorkoutSessionExerciseScalarFieldEnum[]
  }

  /**
   * WorkoutSessionExercise create
   */
  export type WorkoutSessionExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionExercise
     */
    select?: WorkoutSessionExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionExercise
     */
    omit?: WorkoutSessionExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutSessionExercise.
     */
    data: XOR<WorkoutSessionExerciseCreateInput, WorkoutSessionExerciseUncheckedCreateInput>
  }

  /**
   * WorkoutSessionExercise createMany
   */
  export type WorkoutSessionExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutSessionExercises.
     */
    data: WorkoutSessionExerciseCreateManyInput | WorkoutSessionExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutSessionExercise createManyAndReturn
   */
  export type WorkoutSessionExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionExercise
     */
    select?: WorkoutSessionExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionExercise
     */
    omit?: WorkoutSessionExerciseOmit<ExtArgs> | null
    /**
     * The data used to create many WorkoutSessionExercises.
     */
    data: WorkoutSessionExerciseCreateManyInput | WorkoutSessionExerciseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionExerciseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutSessionExercise update
   */
  export type WorkoutSessionExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionExercise
     */
    select?: WorkoutSessionExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionExercise
     */
    omit?: WorkoutSessionExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutSessionExercise.
     */
    data: XOR<WorkoutSessionExerciseUpdateInput, WorkoutSessionExerciseUncheckedUpdateInput>
    /**
     * Choose, which WorkoutSessionExercise to update.
     */
    where: WorkoutSessionExerciseWhereUniqueInput
  }

  /**
   * WorkoutSessionExercise updateMany
   */
  export type WorkoutSessionExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutSessionExercises.
     */
    data: XOR<WorkoutSessionExerciseUpdateManyMutationInput, WorkoutSessionExerciseUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutSessionExercises to update
     */
    where?: WorkoutSessionExerciseWhereInput
    /**
     * Limit how many WorkoutSessionExercises to update.
     */
    limit?: number
  }

  /**
   * WorkoutSessionExercise updateManyAndReturn
   */
  export type WorkoutSessionExerciseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionExercise
     */
    select?: WorkoutSessionExerciseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionExercise
     */
    omit?: WorkoutSessionExerciseOmit<ExtArgs> | null
    /**
     * The data used to update WorkoutSessionExercises.
     */
    data: XOR<WorkoutSessionExerciseUpdateManyMutationInput, WorkoutSessionExerciseUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutSessionExercises to update
     */
    where?: WorkoutSessionExerciseWhereInput
    /**
     * Limit how many WorkoutSessionExercises to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionExerciseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutSessionExercise upsert
   */
  export type WorkoutSessionExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionExercise
     */
    select?: WorkoutSessionExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionExercise
     */
    omit?: WorkoutSessionExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutSessionExercise to update in case it exists.
     */
    where: WorkoutSessionExerciseWhereUniqueInput
    /**
     * In case the WorkoutSessionExercise found by the `where` argument doesn't exist, create a new WorkoutSessionExercise with this data.
     */
    create: XOR<WorkoutSessionExerciseCreateInput, WorkoutSessionExerciseUncheckedCreateInput>
    /**
     * In case the WorkoutSessionExercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutSessionExerciseUpdateInput, WorkoutSessionExerciseUncheckedUpdateInput>
  }

  /**
   * WorkoutSessionExercise delete
   */
  export type WorkoutSessionExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionExercise
     */
    select?: WorkoutSessionExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionExercise
     */
    omit?: WorkoutSessionExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionExerciseInclude<ExtArgs> | null
    /**
     * Filter which WorkoutSessionExercise to delete.
     */
    where: WorkoutSessionExerciseWhereUniqueInput
  }

  /**
   * WorkoutSessionExercise deleteMany
   */
  export type WorkoutSessionExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutSessionExercises to delete
     */
    where?: WorkoutSessionExerciseWhereInput
    /**
     * Limit how many WorkoutSessionExercises to delete.
     */
    limit?: number
  }

  /**
   * WorkoutSessionExercise.sets
   */
  export type WorkoutSessionExercise$setsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionSet
     */
    select?: WorkoutSessionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionSet
     */
    omit?: WorkoutSessionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionSetInclude<ExtArgs> | null
    where?: WorkoutSessionSetWhereInput
    orderBy?: WorkoutSessionSetOrderByWithRelationInput | WorkoutSessionSetOrderByWithRelationInput[]
    cursor?: WorkoutSessionSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutSessionSetScalarFieldEnum | WorkoutSessionSetScalarFieldEnum[]
  }

  /**
   * WorkoutSessionExercise without action
   */
  export type WorkoutSessionExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionExercise
     */
    select?: WorkoutSessionExerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionExercise
     */
    omit?: WorkoutSessionExerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionExerciseInclude<ExtArgs> | null
  }


  /**
   * Model WorkoutSessionSet
   */

  export type AggregateWorkoutSessionSet = {
    _count: WorkoutSessionSetCountAggregateOutputType | null
    _avg: WorkoutSessionSetAvgAggregateOutputType | null
    _sum: WorkoutSessionSetSumAggregateOutputType | null
    _min: WorkoutSessionSetMinAggregateOutputType | null
    _max: WorkoutSessionSetMaxAggregateOutputType | null
  }

  export type WorkoutSessionSetAvgAggregateOutputType = {
    order: number | null
    reps: number | null
    weight: number | null
  }

  export type WorkoutSessionSetSumAggregateOutputType = {
    order: number | null
    reps: number | null
    weight: number | null
  }

  export type WorkoutSessionSetMinAggregateOutputType = {
    id: string | null
    workoutSessionExerciseId: string | null
    order: number | null
    reps: number | null
    weight: number | null
    createdAt: Date | null
  }

  export type WorkoutSessionSetMaxAggregateOutputType = {
    id: string | null
    workoutSessionExerciseId: string | null
    order: number | null
    reps: number | null
    weight: number | null
    createdAt: Date | null
  }

  export type WorkoutSessionSetCountAggregateOutputType = {
    id: number
    workoutSessionExerciseId: number
    order: number
    reps: number
    weight: number
    createdAt: number
    _all: number
  }


  export type WorkoutSessionSetAvgAggregateInputType = {
    order?: true
    reps?: true
    weight?: true
  }

  export type WorkoutSessionSetSumAggregateInputType = {
    order?: true
    reps?: true
    weight?: true
  }

  export type WorkoutSessionSetMinAggregateInputType = {
    id?: true
    workoutSessionExerciseId?: true
    order?: true
    reps?: true
    weight?: true
    createdAt?: true
  }

  export type WorkoutSessionSetMaxAggregateInputType = {
    id?: true
    workoutSessionExerciseId?: true
    order?: true
    reps?: true
    weight?: true
    createdAt?: true
  }

  export type WorkoutSessionSetCountAggregateInputType = {
    id?: true
    workoutSessionExerciseId?: true
    order?: true
    reps?: true
    weight?: true
    createdAt?: true
    _all?: true
  }

  export type WorkoutSessionSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutSessionSet to aggregate.
     */
    where?: WorkoutSessionSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutSessionSets to fetch.
     */
    orderBy?: WorkoutSessionSetOrderByWithRelationInput | WorkoutSessionSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutSessionSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutSessionSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutSessionSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkoutSessionSets
    **/
    _count?: true | WorkoutSessionSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutSessionSetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutSessionSetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutSessionSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutSessionSetMaxAggregateInputType
  }

  export type GetWorkoutSessionSetAggregateType<T extends WorkoutSessionSetAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutSessionSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutSessionSet[P]>
      : GetScalarType<T[P], AggregateWorkoutSessionSet[P]>
  }




  export type WorkoutSessionSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutSessionSetWhereInput
    orderBy?: WorkoutSessionSetOrderByWithAggregationInput | WorkoutSessionSetOrderByWithAggregationInput[]
    by: WorkoutSessionSetScalarFieldEnum[] | WorkoutSessionSetScalarFieldEnum
    having?: WorkoutSessionSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutSessionSetCountAggregateInputType | true
    _avg?: WorkoutSessionSetAvgAggregateInputType
    _sum?: WorkoutSessionSetSumAggregateInputType
    _min?: WorkoutSessionSetMinAggregateInputType
    _max?: WorkoutSessionSetMaxAggregateInputType
  }

  export type WorkoutSessionSetGroupByOutputType = {
    id: string
    workoutSessionExerciseId: string
    order: number
    reps: number
    weight: number
    createdAt: Date
    _count: WorkoutSessionSetCountAggregateOutputType | null
    _avg: WorkoutSessionSetAvgAggregateOutputType | null
    _sum: WorkoutSessionSetSumAggregateOutputType | null
    _min: WorkoutSessionSetMinAggregateOutputType | null
    _max: WorkoutSessionSetMaxAggregateOutputType | null
  }

  type GetWorkoutSessionSetGroupByPayload<T extends WorkoutSessionSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutSessionSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutSessionSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutSessionSetGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutSessionSetGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutSessionSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutSessionExerciseId?: boolean
    order?: boolean
    reps?: boolean
    weight?: boolean
    createdAt?: boolean
    workoutSessionExercise?: boolean | WorkoutSessionExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutSessionSet"]>

  export type WorkoutSessionSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutSessionExerciseId?: boolean
    order?: boolean
    reps?: boolean
    weight?: boolean
    createdAt?: boolean
    workoutSessionExercise?: boolean | WorkoutSessionExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutSessionSet"]>

  export type WorkoutSessionSetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutSessionExerciseId?: boolean
    order?: boolean
    reps?: boolean
    weight?: boolean
    createdAt?: boolean
    workoutSessionExercise?: boolean | WorkoutSessionExerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutSessionSet"]>

  export type WorkoutSessionSetSelectScalar = {
    id?: boolean
    workoutSessionExerciseId?: boolean
    order?: boolean
    reps?: boolean
    weight?: boolean
    createdAt?: boolean
  }

  export type WorkoutSessionSetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workoutSessionExerciseId" | "order" | "reps" | "weight" | "createdAt", ExtArgs["result"]["workoutSessionSet"]>
  export type WorkoutSessionSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutSessionExercise?: boolean | WorkoutSessionExerciseDefaultArgs<ExtArgs>
  }
  export type WorkoutSessionSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutSessionExercise?: boolean | WorkoutSessionExerciseDefaultArgs<ExtArgs>
  }
  export type WorkoutSessionSetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workoutSessionExercise?: boolean | WorkoutSessionExerciseDefaultArgs<ExtArgs>
  }

  export type $WorkoutSessionSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkoutSessionSet"
    objects: {
      workoutSessionExercise: Prisma.$WorkoutSessionExercisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workoutSessionExerciseId: string
      order: number
      reps: number
      weight: number
      createdAt: Date
    }, ExtArgs["result"]["workoutSessionSet"]>
    composites: {}
  }

  type WorkoutSessionSetGetPayload<S extends boolean | null | undefined | WorkoutSessionSetDefaultArgs> = $Result.GetResult<Prisma.$WorkoutSessionSetPayload, S>

  type WorkoutSessionSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkoutSessionSetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkoutSessionSetCountAggregateInputType | true
    }

  export interface WorkoutSessionSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkoutSessionSet'], meta: { name: 'WorkoutSessionSet' } }
    /**
     * Find zero or one WorkoutSessionSet that matches the filter.
     * @param {WorkoutSessionSetFindUniqueArgs} args - Arguments to find a WorkoutSessionSet
     * @example
     * // Get one WorkoutSessionSet
     * const workoutSessionSet = await prisma.workoutSessionSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkoutSessionSetFindUniqueArgs>(args: SelectSubset<T, WorkoutSessionSetFindUniqueArgs<ExtArgs>>): Prisma__WorkoutSessionSetClient<$Result.GetResult<Prisma.$WorkoutSessionSetPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one WorkoutSessionSet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkoutSessionSetFindUniqueOrThrowArgs} args - Arguments to find a WorkoutSessionSet
     * @example
     * // Get one WorkoutSessionSet
     * const workoutSessionSet = await prisma.workoutSessionSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkoutSessionSetFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkoutSessionSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkoutSessionSetClient<$Result.GetResult<Prisma.$WorkoutSessionSetPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first WorkoutSessionSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionSetFindFirstArgs} args - Arguments to find a WorkoutSessionSet
     * @example
     * // Get one WorkoutSessionSet
     * const workoutSessionSet = await prisma.workoutSessionSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkoutSessionSetFindFirstArgs>(args?: SelectSubset<T, WorkoutSessionSetFindFirstArgs<ExtArgs>>): Prisma__WorkoutSessionSetClient<$Result.GetResult<Prisma.$WorkoutSessionSetPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first WorkoutSessionSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionSetFindFirstOrThrowArgs} args - Arguments to find a WorkoutSessionSet
     * @example
     * // Get one WorkoutSessionSet
     * const workoutSessionSet = await prisma.workoutSessionSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkoutSessionSetFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkoutSessionSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkoutSessionSetClient<$Result.GetResult<Prisma.$WorkoutSessionSetPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more WorkoutSessionSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkoutSessionSets
     * const workoutSessionSets = await prisma.workoutSessionSet.findMany()
     * 
     * // Get first 10 WorkoutSessionSets
     * const workoutSessionSets = await prisma.workoutSessionSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutSessionSetWithIdOnly = await prisma.workoutSessionSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkoutSessionSetFindManyArgs>(args?: SelectSubset<T, WorkoutSessionSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSessionSetPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a WorkoutSessionSet.
     * @param {WorkoutSessionSetCreateArgs} args - Arguments to create a WorkoutSessionSet.
     * @example
     * // Create one WorkoutSessionSet
     * const WorkoutSessionSet = await prisma.workoutSessionSet.create({
     *   data: {
     *     // ... data to create a WorkoutSessionSet
     *   }
     * })
     * 
     */
    create<T extends WorkoutSessionSetCreateArgs>(args: SelectSubset<T, WorkoutSessionSetCreateArgs<ExtArgs>>): Prisma__WorkoutSessionSetClient<$Result.GetResult<Prisma.$WorkoutSessionSetPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many WorkoutSessionSets.
     * @param {WorkoutSessionSetCreateManyArgs} args - Arguments to create many WorkoutSessionSets.
     * @example
     * // Create many WorkoutSessionSets
     * const workoutSessionSet = await prisma.workoutSessionSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkoutSessionSetCreateManyArgs>(args?: SelectSubset<T, WorkoutSessionSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkoutSessionSets and returns the data saved in the database.
     * @param {WorkoutSessionSetCreateManyAndReturnArgs} args - Arguments to create many WorkoutSessionSets.
     * @example
     * // Create many WorkoutSessionSets
     * const workoutSessionSet = await prisma.workoutSessionSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkoutSessionSets and only return the `id`
     * const workoutSessionSetWithIdOnly = await prisma.workoutSessionSet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkoutSessionSetCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkoutSessionSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSessionSetPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a WorkoutSessionSet.
     * @param {WorkoutSessionSetDeleteArgs} args - Arguments to delete one WorkoutSessionSet.
     * @example
     * // Delete one WorkoutSessionSet
     * const WorkoutSessionSet = await prisma.workoutSessionSet.delete({
     *   where: {
     *     // ... filter to delete one WorkoutSessionSet
     *   }
     * })
     * 
     */
    delete<T extends WorkoutSessionSetDeleteArgs>(args: SelectSubset<T, WorkoutSessionSetDeleteArgs<ExtArgs>>): Prisma__WorkoutSessionSetClient<$Result.GetResult<Prisma.$WorkoutSessionSetPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one WorkoutSessionSet.
     * @param {WorkoutSessionSetUpdateArgs} args - Arguments to update one WorkoutSessionSet.
     * @example
     * // Update one WorkoutSessionSet
     * const workoutSessionSet = await prisma.workoutSessionSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkoutSessionSetUpdateArgs>(args: SelectSubset<T, WorkoutSessionSetUpdateArgs<ExtArgs>>): Prisma__WorkoutSessionSetClient<$Result.GetResult<Prisma.$WorkoutSessionSetPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more WorkoutSessionSets.
     * @param {WorkoutSessionSetDeleteManyArgs} args - Arguments to filter WorkoutSessionSets to delete.
     * @example
     * // Delete a few WorkoutSessionSets
     * const { count } = await prisma.workoutSessionSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkoutSessionSetDeleteManyArgs>(args?: SelectSubset<T, WorkoutSessionSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutSessionSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkoutSessionSets
     * const workoutSessionSet = await prisma.workoutSessionSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkoutSessionSetUpdateManyArgs>(args: SelectSubset<T, WorkoutSessionSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkoutSessionSets and returns the data updated in the database.
     * @param {WorkoutSessionSetUpdateManyAndReturnArgs} args - Arguments to update many WorkoutSessionSets.
     * @example
     * // Update many WorkoutSessionSets
     * const workoutSessionSet = await prisma.workoutSessionSet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkoutSessionSets and only return the `id`
     * const workoutSessionSetWithIdOnly = await prisma.workoutSessionSet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkoutSessionSetUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkoutSessionSetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutSessionSetPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one WorkoutSessionSet.
     * @param {WorkoutSessionSetUpsertArgs} args - Arguments to update or create a WorkoutSessionSet.
     * @example
     * // Update or create a WorkoutSessionSet
     * const workoutSessionSet = await prisma.workoutSessionSet.upsert({
     *   create: {
     *     // ... data to create a WorkoutSessionSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkoutSessionSet we want to update
     *   }
     * })
     */
    upsert<T extends WorkoutSessionSetUpsertArgs>(args: SelectSubset<T, WorkoutSessionSetUpsertArgs<ExtArgs>>): Prisma__WorkoutSessionSetClient<$Result.GetResult<Prisma.$WorkoutSessionSetPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of WorkoutSessionSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionSetCountArgs} args - Arguments to filter WorkoutSessionSets to count.
     * @example
     * // Count the number of WorkoutSessionSets
     * const count = await prisma.workoutSessionSet.count({
     *   where: {
     *     // ... the filter for the WorkoutSessionSets we want to count
     *   }
     * })
    **/
    count<T extends WorkoutSessionSetCountArgs>(
      args?: Subset<T, WorkoutSessionSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutSessionSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkoutSessionSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutSessionSetAggregateArgs>(args: Subset<T, WorkoutSessionSetAggregateArgs>): Prisma.PrismaPromise<GetWorkoutSessionSetAggregateType<T>>

    /**
     * Group by WorkoutSessionSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutSessionSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutSessionSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutSessionSetGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutSessionSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutSessionSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutSessionSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkoutSessionSet model
   */
  readonly fields: WorkoutSessionSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkoutSessionSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutSessionSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workoutSessionExercise<T extends WorkoutSessionExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutSessionExerciseDefaultArgs<ExtArgs>>): Prisma__WorkoutSessionExerciseClient<$Result.GetResult<Prisma.$WorkoutSessionExercisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkoutSessionSet model
   */ 
  interface WorkoutSessionSetFieldRefs {
    readonly id: FieldRef<"WorkoutSessionSet", 'String'>
    readonly workoutSessionExerciseId: FieldRef<"WorkoutSessionSet", 'String'>
    readonly order: FieldRef<"WorkoutSessionSet", 'Int'>
    readonly reps: FieldRef<"WorkoutSessionSet", 'Int'>
    readonly weight: FieldRef<"WorkoutSessionSet", 'Float'>
    readonly createdAt: FieldRef<"WorkoutSessionSet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkoutSessionSet findUnique
   */
  export type WorkoutSessionSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionSet
     */
    select?: WorkoutSessionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionSet
     */
    omit?: WorkoutSessionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionSetInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSessionSet to fetch.
     */
    where: WorkoutSessionSetWhereUniqueInput
  }

  /**
   * WorkoutSessionSet findUniqueOrThrow
   */
  export type WorkoutSessionSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionSet
     */
    select?: WorkoutSessionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionSet
     */
    omit?: WorkoutSessionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionSetInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSessionSet to fetch.
     */
    where: WorkoutSessionSetWhereUniqueInput
  }

  /**
   * WorkoutSessionSet findFirst
   */
  export type WorkoutSessionSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionSet
     */
    select?: WorkoutSessionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionSet
     */
    omit?: WorkoutSessionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionSetInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSessionSet to fetch.
     */
    where?: WorkoutSessionSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutSessionSets to fetch.
     */
    orderBy?: WorkoutSessionSetOrderByWithRelationInput | WorkoutSessionSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutSessionSets.
     */
    cursor?: WorkoutSessionSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutSessionSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutSessionSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutSessionSets.
     */
    distinct?: WorkoutSessionSetScalarFieldEnum | WorkoutSessionSetScalarFieldEnum[]
  }

  /**
   * WorkoutSessionSet findFirstOrThrow
   */
  export type WorkoutSessionSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionSet
     */
    select?: WorkoutSessionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionSet
     */
    omit?: WorkoutSessionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionSetInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSessionSet to fetch.
     */
    where?: WorkoutSessionSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutSessionSets to fetch.
     */
    orderBy?: WorkoutSessionSetOrderByWithRelationInput | WorkoutSessionSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkoutSessionSets.
     */
    cursor?: WorkoutSessionSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutSessionSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutSessionSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkoutSessionSets.
     */
    distinct?: WorkoutSessionSetScalarFieldEnum | WorkoutSessionSetScalarFieldEnum[]
  }

  /**
   * WorkoutSessionSet findMany
   */
  export type WorkoutSessionSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionSet
     */
    select?: WorkoutSessionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionSet
     */
    omit?: WorkoutSessionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionSetInclude<ExtArgs> | null
    /**
     * Filter, which WorkoutSessionSets to fetch.
     */
    where?: WorkoutSessionSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkoutSessionSets to fetch.
     */
    orderBy?: WorkoutSessionSetOrderByWithRelationInput | WorkoutSessionSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkoutSessionSets.
     */
    cursor?: WorkoutSessionSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkoutSessionSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkoutSessionSets.
     */
    skip?: number
    distinct?: WorkoutSessionSetScalarFieldEnum | WorkoutSessionSetScalarFieldEnum[]
  }

  /**
   * WorkoutSessionSet create
   */
  export type WorkoutSessionSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionSet
     */
    select?: WorkoutSessionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionSet
     */
    omit?: WorkoutSessionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionSetInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkoutSessionSet.
     */
    data: XOR<WorkoutSessionSetCreateInput, WorkoutSessionSetUncheckedCreateInput>
  }

  /**
   * WorkoutSessionSet createMany
   */
  export type WorkoutSessionSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkoutSessionSets.
     */
    data: WorkoutSessionSetCreateManyInput | WorkoutSessionSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkoutSessionSet createManyAndReturn
   */
  export type WorkoutSessionSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionSet
     */
    select?: WorkoutSessionSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionSet
     */
    omit?: WorkoutSessionSetOmit<ExtArgs> | null
    /**
     * The data used to create many WorkoutSessionSets.
     */
    data: WorkoutSessionSetCreateManyInput | WorkoutSessionSetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionSetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutSessionSet update
   */
  export type WorkoutSessionSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionSet
     */
    select?: WorkoutSessionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionSet
     */
    omit?: WorkoutSessionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionSetInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkoutSessionSet.
     */
    data: XOR<WorkoutSessionSetUpdateInput, WorkoutSessionSetUncheckedUpdateInput>
    /**
     * Choose, which WorkoutSessionSet to update.
     */
    where: WorkoutSessionSetWhereUniqueInput
  }

  /**
   * WorkoutSessionSet updateMany
   */
  export type WorkoutSessionSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkoutSessionSets.
     */
    data: XOR<WorkoutSessionSetUpdateManyMutationInput, WorkoutSessionSetUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutSessionSets to update
     */
    where?: WorkoutSessionSetWhereInput
    /**
     * Limit how many WorkoutSessionSets to update.
     */
    limit?: number
  }

  /**
   * WorkoutSessionSet updateManyAndReturn
   */
  export type WorkoutSessionSetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionSet
     */
    select?: WorkoutSessionSetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionSet
     */
    omit?: WorkoutSessionSetOmit<ExtArgs> | null
    /**
     * The data used to update WorkoutSessionSets.
     */
    data: XOR<WorkoutSessionSetUpdateManyMutationInput, WorkoutSessionSetUncheckedUpdateManyInput>
    /**
     * Filter which WorkoutSessionSets to update
     */
    where?: WorkoutSessionSetWhereInput
    /**
     * Limit how many WorkoutSessionSets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionSetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkoutSessionSet upsert
   */
  export type WorkoutSessionSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionSet
     */
    select?: WorkoutSessionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionSet
     */
    omit?: WorkoutSessionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionSetInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkoutSessionSet to update in case it exists.
     */
    where: WorkoutSessionSetWhereUniqueInput
    /**
     * In case the WorkoutSessionSet found by the `where` argument doesn't exist, create a new WorkoutSessionSet with this data.
     */
    create: XOR<WorkoutSessionSetCreateInput, WorkoutSessionSetUncheckedCreateInput>
    /**
     * In case the WorkoutSessionSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutSessionSetUpdateInput, WorkoutSessionSetUncheckedUpdateInput>
  }

  /**
   * WorkoutSessionSet delete
   */
  export type WorkoutSessionSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionSet
     */
    select?: WorkoutSessionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionSet
     */
    omit?: WorkoutSessionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionSetInclude<ExtArgs> | null
    /**
     * Filter which WorkoutSessionSet to delete.
     */
    where: WorkoutSessionSetWhereUniqueInput
  }

  /**
   * WorkoutSessionSet deleteMany
   */
  export type WorkoutSessionSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkoutSessionSets to delete
     */
    where?: WorkoutSessionSetWhereInput
    /**
     * Limit how many WorkoutSessionSets to delete.
     */
    limit?: number
  }

  /**
   * WorkoutSessionSet without action
   */
  export type WorkoutSessionSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutSessionSet
     */
    select?: WorkoutSessionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkoutSessionSet
     */
    omit?: WorkoutSessionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutSessionSetInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ExerciseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category: 'category',
    force: 'force',
    level: 'level',
    mechanic: 'mechanic',
    equipment: 'equipment',
    primaryMuscles: 'primaryMuscles',
    secondaryMuscles: 'secondaryMuscles',
    instructions: 'instructions',
    image: 'image'
  };

  export type ExerciseScalarFieldEnum = (typeof ExerciseScalarFieldEnum)[keyof typeof ExerciseScalarFieldEnum]


  export const WorkoutTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type WorkoutTemplateScalarFieldEnum = (typeof WorkoutTemplateScalarFieldEnum)[keyof typeof WorkoutTemplateScalarFieldEnum]


  export const WorkoutTemplateExerciseScalarFieldEnum: {
    id: 'id',
    workoutTemplateId: 'workoutTemplateId',
    exerciseId: 'exerciseId',
    createdAt: 'createdAt'
  };

  export type WorkoutTemplateExerciseScalarFieldEnum = (typeof WorkoutTemplateExerciseScalarFieldEnum)[keyof typeof WorkoutTemplateExerciseScalarFieldEnum]


  export const WorkoutTemplateSetScalarFieldEnum: {
    id: 'id',
    workoutTemplateExerciseId: 'workoutTemplateExerciseId',
    order: 'order',
    reps: 'reps',
    weight: 'weight',
    createdAt: 'createdAt'
  };

  export type WorkoutTemplateSetScalarFieldEnum = (typeof WorkoutTemplateSetScalarFieldEnum)[keyof typeof WorkoutTemplateSetScalarFieldEnum]


  export const WorkoutSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    workoutTemplateId: 'workoutTemplateId',
    startTime: 'startTime',
    endTime: 'endTime',
    createdAt: 'createdAt'
  };

  export type WorkoutSessionScalarFieldEnum = (typeof WorkoutSessionScalarFieldEnum)[keyof typeof WorkoutSessionScalarFieldEnum]


  export const WorkoutSessionExerciseScalarFieldEnum: {
    id: 'id',
    workoutSessionId: 'workoutSessionId',
    exerciseId: 'exerciseId',
    createdAt: 'createdAt'
  };

  export type WorkoutSessionExerciseScalarFieldEnum = (typeof WorkoutSessionExerciseScalarFieldEnum)[keyof typeof WorkoutSessionExerciseScalarFieldEnum]


  export const WorkoutSessionSetScalarFieldEnum: {
    id: 'id',
    workoutSessionExerciseId: 'workoutSessionExerciseId',
    order: 'order',
    reps: 'reps',
    weight: 'weight',
    createdAt: 'createdAt'
  };

  export type WorkoutSessionSetScalarFieldEnum = (typeof WorkoutSessionSetScalarFieldEnum)[keyof typeof WorkoutSessionSetScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    workoutTemplates?: WorkoutTemplateListRelationFilter
    workoutSessions?: WorkoutSessionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    workoutTemplates?: WorkoutTemplateOrderByRelationAggregateInput
    workoutSessions?: WorkoutSessionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    workoutTemplates?: WorkoutTemplateListRelationFilter
    workoutSessions?: WorkoutSessionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ExerciseWhereInput = {
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    id?: StringFilter<"Exercise"> | string
    name?: StringFilter<"Exercise"> | string
    category?: StringFilter<"Exercise"> | string
    force?: StringNullableFilter<"Exercise"> | string | null
    level?: StringNullableFilter<"Exercise"> | string | null
    mechanic?: StringNullableFilter<"Exercise"> | string | null
    equipment?: StringNullableFilter<"Exercise"> | string | null
    primaryMuscles?: StringNullableListFilter<"Exercise">
    secondaryMuscles?: StringNullableListFilter<"Exercise">
    instructions?: StringNullableListFilter<"Exercise">
    image?: StringNullableFilter<"Exercise"> | string | null
    workoutTemplateExercises?: WorkoutTemplateExerciseListRelationFilter
    workoutSessionExercises?: WorkoutSessionExerciseListRelationFilter
  }

  export type ExerciseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    force?: SortOrderInput | SortOrder
    level?: SortOrderInput | SortOrder
    mechanic?: SortOrderInput | SortOrder
    equipment?: SortOrderInput | SortOrder
    primaryMuscles?: SortOrder
    secondaryMuscles?: SortOrder
    instructions?: SortOrder
    image?: SortOrderInput | SortOrder
    workoutTemplateExercises?: WorkoutTemplateExerciseOrderByRelationAggregateInput
    workoutSessionExercises?: WorkoutSessionExerciseOrderByRelationAggregateInput
  }

  export type ExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    name?: StringFilter<"Exercise"> | string
    category?: StringFilter<"Exercise"> | string
    force?: StringNullableFilter<"Exercise"> | string | null
    level?: StringNullableFilter<"Exercise"> | string | null
    mechanic?: StringNullableFilter<"Exercise"> | string | null
    equipment?: StringNullableFilter<"Exercise"> | string | null
    primaryMuscles?: StringNullableListFilter<"Exercise">
    secondaryMuscles?: StringNullableListFilter<"Exercise">
    instructions?: StringNullableListFilter<"Exercise">
    image?: StringNullableFilter<"Exercise"> | string | null
    workoutTemplateExercises?: WorkoutTemplateExerciseListRelationFilter
    workoutSessionExercises?: WorkoutSessionExerciseListRelationFilter
  }, "id">

  export type ExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    force?: SortOrderInput | SortOrder
    level?: SortOrderInput | SortOrder
    mechanic?: SortOrderInput | SortOrder
    equipment?: SortOrderInput | SortOrder
    primaryMuscles?: SortOrder
    secondaryMuscles?: SortOrder
    instructions?: SortOrder
    image?: SortOrderInput | SortOrder
    _count?: ExerciseCountOrderByAggregateInput
    _max?: ExerciseMaxOrderByAggregateInput
    _min?: ExerciseMinOrderByAggregateInput
  }

  export type ExerciseScalarWhereWithAggregatesInput = {
    AND?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    OR?: ExerciseScalarWhereWithAggregatesInput[]
    NOT?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Exercise"> | string
    name?: StringWithAggregatesFilter<"Exercise"> | string
    category?: StringWithAggregatesFilter<"Exercise"> | string
    force?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
    level?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
    mechanic?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
    equipment?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
    primaryMuscles?: StringNullableListFilter<"Exercise">
    secondaryMuscles?: StringNullableListFilter<"Exercise">
    instructions?: StringNullableListFilter<"Exercise">
    image?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
  }

  export type WorkoutTemplateWhereInput = {
    AND?: WorkoutTemplateWhereInput | WorkoutTemplateWhereInput[]
    OR?: WorkoutTemplateWhereInput[]
    NOT?: WorkoutTemplateWhereInput | WorkoutTemplateWhereInput[]
    id?: StringFilter<"WorkoutTemplate"> | string
    name?: StringFilter<"WorkoutTemplate"> | string
    userId?: StringFilter<"WorkoutTemplate"> | string
    createdAt?: DateTimeFilter<"WorkoutTemplate"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    exercises?: WorkoutTemplateExerciseListRelationFilter
    workoutSessions?: WorkoutSessionListRelationFilter
  }

  export type WorkoutTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    exercises?: WorkoutTemplateExerciseOrderByRelationAggregateInput
    workoutSessions?: WorkoutSessionOrderByRelationAggregateInput
  }

  export type WorkoutTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkoutTemplateWhereInput | WorkoutTemplateWhereInput[]
    OR?: WorkoutTemplateWhereInput[]
    NOT?: WorkoutTemplateWhereInput | WorkoutTemplateWhereInput[]
    name?: StringFilter<"WorkoutTemplate"> | string
    userId?: StringFilter<"WorkoutTemplate"> | string
    createdAt?: DateTimeFilter<"WorkoutTemplate"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    exercises?: WorkoutTemplateExerciseListRelationFilter
    workoutSessions?: WorkoutSessionListRelationFilter
  }, "id">

  export type WorkoutTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: WorkoutTemplateCountOrderByAggregateInput
    _max?: WorkoutTemplateMaxOrderByAggregateInput
    _min?: WorkoutTemplateMinOrderByAggregateInput
  }

  export type WorkoutTemplateScalarWhereWithAggregatesInput = {
    AND?: WorkoutTemplateScalarWhereWithAggregatesInput | WorkoutTemplateScalarWhereWithAggregatesInput[]
    OR?: WorkoutTemplateScalarWhereWithAggregatesInput[]
    NOT?: WorkoutTemplateScalarWhereWithAggregatesInput | WorkoutTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkoutTemplate"> | string
    name?: StringWithAggregatesFilter<"WorkoutTemplate"> | string
    userId?: StringWithAggregatesFilter<"WorkoutTemplate"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WorkoutTemplate"> | Date | string
  }

  export type WorkoutTemplateExerciseWhereInput = {
    AND?: WorkoutTemplateExerciseWhereInput | WorkoutTemplateExerciseWhereInput[]
    OR?: WorkoutTemplateExerciseWhereInput[]
    NOT?: WorkoutTemplateExerciseWhereInput | WorkoutTemplateExerciseWhereInput[]
    id?: StringFilter<"WorkoutTemplateExercise"> | string
    workoutTemplateId?: StringFilter<"WorkoutTemplateExercise"> | string
    exerciseId?: StringFilter<"WorkoutTemplateExercise"> | string
    createdAt?: DateTimeFilter<"WorkoutTemplateExercise"> | Date | string
    workoutTemplate?: XOR<WorkoutTemplateScalarRelationFilter, WorkoutTemplateWhereInput>
    exercise?: XOR<ExerciseScalarRelationFilter, ExerciseWhereInput>
    sets?: WorkoutTemplateSetListRelationFilter
  }

  export type WorkoutTemplateExerciseOrderByWithRelationInput = {
    id?: SortOrder
    workoutTemplateId?: SortOrder
    exerciseId?: SortOrder
    createdAt?: SortOrder
    workoutTemplate?: WorkoutTemplateOrderByWithRelationInput
    exercise?: ExerciseOrderByWithRelationInput
    sets?: WorkoutTemplateSetOrderByRelationAggregateInput
  }

  export type WorkoutTemplateExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkoutTemplateExerciseWhereInput | WorkoutTemplateExerciseWhereInput[]
    OR?: WorkoutTemplateExerciseWhereInput[]
    NOT?: WorkoutTemplateExerciseWhereInput | WorkoutTemplateExerciseWhereInput[]
    workoutTemplateId?: StringFilter<"WorkoutTemplateExercise"> | string
    exerciseId?: StringFilter<"WorkoutTemplateExercise"> | string
    createdAt?: DateTimeFilter<"WorkoutTemplateExercise"> | Date | string
    workoutTemplate?: XOR<WorkoutTemplateScalarRelationFilter, WorkoutTemplateWhereInput>
    exercise?: XOR<ExerciseScalarRelationFilter, ExerciseWhereInput>
    sets?: WorkoutTemplateSetListRelationFilter
  }, "id">

  export type WorkoutTemplateExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    workoutTemplateId?: SortOrder
    exerciseId?: SortOrder
    createdAt?: SortOrder
    _count?: WorkoutTemplateExerciseCountOrderByAggregateInput
    _max?: WorkoutTemplateExerciseMaxOrderByAggregateInput
    _min?: WorkoutTemplateExerciseMinOrderByAggregateInput
  }

  export type WorkoutTemplateExerciseScalarWhereWithAggregatesInput = {
    AND?: WorkoutTemplateExerciseScalarWhereWithAggregatesInput | WorkoutTemplateExerciseScalarWhereWithAggregatesInput[]
    OR?: WorkoutTemplateExerciseScalarWhereWithAggregatesInput[]
    NOT?: WorkoutTemplateExerciseScalarWhereWithAggregatesInput | WorkoutTemplateExerciseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkoutTemplateExercise"> | string
    workoutTemplateId?: StringWithAggregatesFilter<"WorkoutTemplateExercise"> | string
    exerciseId?: StringWithAggregatesFilter<"WorkoutTemplateExercise"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WorkoutTemplateExercise"> | Date | string
  }

  export type WorkoutTemplateSetWhereInput = {
    AND?: WorkoutTemplateSetWhereInput | WorkoutTemplateSetWhereInput[]
    OR?: WorkoutTemplateSetWhereInput[]
    NOT?: WorkoutTemplateSetWhereInput | WorkoutTemplateSetWhereInput[]
    id?: StringFilter<"WorkoutTemplateSet"> | string
    workoutTemplateExerciseId?: StringFilter<"WorkoutTemplateSet"> | string
    order?: IntFilter<"WorkoutTemplateSet"> | number
    reps?: IntFilter<"WorkoutTemplateSet"> | number
    weight?: FloatFilter<"WorkoutTemplateSet"> | number
    createdAt?: DateTimeFilter<"WorkoutTemplateSet"> | Date | string
    workoutTemplateExercise?: XOR<WorkoutTemplateExerciseScalarRelationFilter, WorkoutTemplateExerciseWhereInput>
  }

  export type WorkoutTemplateSetOrderByWithRelationInput = {
    id?: SortOrder
    workoutTemplateExerciseId?: SortOrder
    order?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    workoutTemplateExercise?: WorkoutTemplateExerciseOrderByWithRelationInput
  }

  export type WorkoutTemplateSetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkoutTemplateSetWhereInput | WorkoutTemplateSetWhereInput[]
    OR?: WorkoutTemplateSetWhereInput[]
    NOT?: WorkoutTemplateSetWhereInput | WorkoutTemplateSetWhereInput[]
    workoutTemplateExerciseId?: StringFilter<"WorkoutTemplateSet"> | string
    order?: IntFilter<"WorkoutTemplateSet"> | number
    reps?: IntFilter<"WorkoutTemplateSet"> | number
    weight?: FloatFilter<"WorkoutTemplateSet"> | number
    createdAt?: DateTimeFilter<"WorkoutTemplateSet"> | Date | string
    workoutTemplateExercise?: XOR<WorkoutTemplateExerciseScalarRelationFilter, WorkoutTemplateExerciseWhereInput>
  }, "id">

  export type WorkoutTemplateSetOrderByWithAggregationInput = {
    id?: SortOrder
    workoutTemplateExerciseId?: SortOrder
    order?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    _count?: WorkoutTemplateSetCountOrderByAggregateInput
    _avg?: WorkoutTemplateSetAvgOrderByAggregateInput
    _max?: WorkoutTemplateSetMaxOrderByAggregateInput
    _min?: WorkoutTemplateSetMinOrderByAggregateInput
    _sum?: WorkoutTemplateSetSumOrderByAggregateInput
  }

  export type WorkoutTemplateSetScalarWhereWithAggregatesInput = {
    AND?: WorkoutTemplateSetScalarWhereWithAggregatesInput | WorkoutTemplateSetScalarWhereWithAggregatesInput[]
    OR?: WorkoutTemplateSetScalarWhereWithAggregatesInput[]
    NOT?: WorkoutTemplateSetScalarWhereWithAggregatesInput | WorkoutTemplateSetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkoutTemplateSet"> | string
    workoutTemplateExerciseId?: StringWithAggregatesFilter<"WorkoutTemplateSet"> | string
    order?: IntWithAggregatesFilter<"WorkoutTemplateSet"> | number
    reps?: IntWithAggregatesFilter<"WorkoutTemplateSet"> | number
    weight?: FloatWithAggregatesFilter<"WorkoutTemplateSet"> | number
    createdAt?: DateTimeWithAggregatesFilter<"WorkoutTemplateSet"> | Date | string
  }

  export type WorkoutSessionWhereInput = {
    AND?: WorkoutSessionWhereInput | WorkoutSessionWhereInput[]
    OR?: WorkoutSessionWhereInput[]
    NOT?: WorkoutSessionWhereInput | WorkoutSessionWhereInput[]
    id?: StringFilter<"WorkoutSession"> | string
    userId?: StringFilter<"WorkoutSession"> | string
    workoutTemplateId?: StringNullableFilter<"WorkoutSession"> | string | null
    startTime?: DateTimeFilter<"WorkoutSession"> | Date | string
    endTime?: DateTimeNullableFilter<"WorkoutSession"> | Date | string | null
    createdAt?: DateTimeFilter<"WorkoutSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    workoutTemplate?: XOR<WorkoutTemplateNullableScalarRelationFilter, WorkoutTemplateWhereInput> | null
    exercises?: WorkoutSessionExerciseListRelationFilter
  }

  export type WorkoutSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutTemplateId?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    workoutTemplate?: WorkoutTemplateOrderByWithRelationInput
    exercises?: WorkoutSessionExerciseOrderByRelationAggregateInput
  }

  export type WorkoutSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkoutSessionWhereInput | WorkoutSessionWhereInput[]
    OR?: WorkoutSessionWhereInput[]
    NOT?: WorkoutSessionWhereInput | WorkoutSessionWhereInput[]
    userId?: StringFilter<"WorkoutSession"> | string
    workoutTemplateId?: StringNullableFilter<"WorkoutSession"> | string | null
    startTime?: DateTimeFilter<"WorkoutSession"> | Date | string
    endTime?: DateTimeNullableFilter<"WorkoutSession"> | Date | string | null
    createdAt?: DateTimeFilter<"WorkoutSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    workoutTemplate?: XOR<WorkoutTemplateNullableScalarRelationFilter, WorkoutTemplateWhereInput> | null
    exercises?: WorkoutSessionExerciseListRelationFilter
  }, "id">

  export type WorkoutSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutTemplateId?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: WorkoutSessionCountOrderByAggregateInput
    _max?: WorkoutSessionMaxOrderByAggregateInput
    _min?: WorkoutSessionMinOrderByAggregateInput
  }

  export type WorkoutSessionScalarWhereWithAggregatesInput = {
    AND?: WorkoutSessionScalarWhereWithAggregatesInput | WorkoutSessionScalarWhereWithAggregatesInput[]
    OR?: WorkoutSessionScalarWhereWithAggregatesInput[]
    NOT?: WorkoutSessionScalarWhereWithAggregatesInput | WorkoutSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkoutSession"> | string
    userId?: StringWithAggregatesFilter<"WorkoutSession"> | string
    workoutTemplateId?: StringNullableWithAggregatesFilter<"WorkoutSession"> | string | null
    startTime?: DateTimeWithAggregatesFilter<"WorkoutSession"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"WorkoutSession"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WorkoutSession"> | Date | string
  }

  export type WorkoutSessionExerciseWhereInput = {
    AND?: WorkoutSessionExerciseWhereInput | WorkoutSessionExerciseWhereInput[]
    OR?: WorkoutSessionExerciseWhereInput[]
    NOT?: WorkoutSessionExerciseWhereInput | WorkoutSessionExerciseWhereInput[]
    id?: StringFilter<"WorkoutSessionExercise"> | string
    workoutSessionId?: StringFilter<"WorkoutSessionExercise"> | string
    exerciseId?: StringFilter<"WorkoutSessionExercise"> | string
    createdAt?: DateTimeFilter<"WorkoutSessionExercise"> | Date | string
    workoutSession?: XOR<WorkoutSessionScalarRelationFilter, WorkoutSessionWhereInput>
    exercise?: XOR<ExerciseScalarRelationFilter, ExerciseWhereInput>
    sets?: WorkoutSessionSetListRelationFilter
  }

  export type WorkoutSessionExerciseOrderByWithRelationInput = {
    id?: SortOrder
    workoutSessionId?: SortOrder
    exerciseId?: SortOrder
    createdAt?: SortOrder
    workoutSession?: WorkoutSessionOrderByWithRelationInput
    exercise?: ExerciseOrderByWithRelationInput
    sets?: WorkoutSessionSetOrderByRelationAggregateInput
  }

  export type WorkoutSessionExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkoutSessionExerciseWhereInput | WorkoutSessionExerciseWhereInput[]
    OR?: WorkoutSessionExerciseWhereInput[]
    NOT?: WorkoutSessionExerciseWhereInput | WorkoutSessionExerciseWhereInput[]
    workoutSessionId?: StringFilter<"WorkoutSessionExercise"> | string
    exerciseId?: StringFilter<"WorkoutSessionExercise"> | string
    createdAt?: DateTimeFilter<"WorkoutSessionExercise"> | Date | string
    workoutSession?: XOR<WorkoutSessionScalarRelationFilter, WorkoutSessionWhereInput>
    exercise?: XOR<ExerciseScalarRelationFilter, ExerciseWhereInput>
    sets?: WorkoutSessionSetListRelationFilter
  }, "id">

  export type WorkoutSessionExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    workoutSessionId?: SortOrder
    exerciseId?: SortOrder
    createdAt?: SortOrder
    _count?: WorkoutSessionExerciseCountOrderByAggregateInput
    _max?: WorkoutSessionExerciseMaxOrderByAggregateInput
    _min?: WorkoutSessionExerciseMinOrderByAggregateInput
  }

  export type WorkoutSessionExerciseScalarWhereWithAggregatesInput = {
    AND?: WorkoutSessionExerciseScalarWhereWithAggregatesInput | WorkoutSessionExerciseScalarWhereWithAggregatesInput[]
    OR?: WorkoutSessionExerciseScalarWhereWithAggregatesInput[]
    NOT?: WorkoutSessionExerciseScalarWhereWithAggregatesInput | WorkoutSessionExerciseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkoutSessionExercise"> | string
    workoutSessionId?: StringWithAggregatesFilter<"WorkoutSessionExercise"> | string
    exerciseId?: StringWithAggregatesFilter<"WorkoutSessionExercise"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WorkoutSessionExercise"> | Date | string
  }

  export type WorkoutSessionSetWhereInput = {
    AND?: WorkoutSessionSetWhereInput | WorkoutSessionSetWhereInput[]
    OR?: WorkoutSessionSetWhereInput[]
    NOT?: WorkoutSessionSetWhereInput | WorkoutSessionSetWhereInput[]
    id?: StringFilter<"WorkoutSessionSet"> | string
    workoutSessionExerciseId?: StringFilter<"WorkoutSessionSet"> | string
    order?: IntFilter<"WorkoutSessionSet"> | number
    reps?: IntFilter<"WorkoutSessionSet"> | number
    weight?: FloatFilter<"WorkoutSessionSet"> | number
    createdAt?: DateTimeFilter<"WorkoutSessionSet"> | Date | string
    workoutSessionExercise?: XOR<WorkoutSessionExerciseScalarRelationFilter, WorkoutSessionExerciseWhereInput>
  }

  export type WorkoutSessionSetOrderByWithRelationInput = {
    id?: SortOrder
    workoutSessionExerciseId?: SortOrder
    order?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    workoutSessionExercise?: WorkoutSessionExerciseOrderByWithRelationInput
  }

  export type WorkoutSessionSetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkoutSessionSetWhereInput | WorkoutSessionSetWhereInput[]
    OR?: WorkoutSessionSetWhereInput[]
    NOT?: WorkoutSessionSetWhereInput | WorkoutSessionSetWhereInput[]
    workoutSessionExerciseId?: StringFilter<"WorkoutSessionSet"> | string
    order?: IntFilter<"WorkoutSessionSet"> | number
    reps?: IntFilter<"WorkoutSessionSet"> | number
    weight?: FloatFilter<"WorkoutSessionSet"> | number
    createdAt?: DateTimeFilter<"WorkoutSessionSet"> | Date | string
    workoutSessionExercise?: XOR<WorkoutSessionExerciseScalarRelationFilter, WorkoutSessionExerciseWhereInput>
  }, "id">

  export type WorkoutSessionSetOrderByWithAggregationInput = {
    id?: SortOrder
    workoutSessionExerciseId?: SortOrder
    order?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    _count?: WorkoutSessionSetCountOrderByAggregateInput
    _avg?: WorkoutSessionSetAvgOrderByAggregateInput
    _max?: WorkoutSessionSetMaxOrderByAggregateInput
    _min?: WorkoutSessionSetMinOrderByAggregateInput
    _sum?: WorkoutSessionSetSumOrderByAggregateInput
  }

  export type WorkoutSessionSetScalarWhereWithAggregatesInput = {
    AND?: WorkoutSessionSetScalarWhereWithAggregatesInput | WorkoutSessionSetScalarWhereWithAggregatesInput[]
    OR?: WorkoutSessionSetScalarWhereWithAggregatesInput[]
    NOT?: WorkoutSessionSetScalarWhereWithAggregatesInput | WorkoutSessionSetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkoutSessionSet"> | string
    workoutSessionExerciseId?: StringWithAggregatesFilter<"WorkoutSessionSet"> | string
    order?: IntWithAggregatesFilter<"WorkoutSessionSet"> | number
    reps?: IntWithAggregatesFilter<"WorkoutSessionSet"> | number
    weight?: FloatWithAggregatesFilter<"WorkoutSessionSet"> | number
    createdAt?: DateTimeWithAggregatesFilter<"WorkoutSessionSet"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    workoutTemplates?: WorkoutTemplateCreateNestedManyWithoutUserInput
    workoutSessions?: WorkoutSessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    workoutTemplates?: WorkoutTemplateUncheckedCreateNestedManyWithoutUserInput
    workoutSessions?: WorkoutSessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutTemplates?: WorkoutTemplateUpdateManyWithoutUserNestedInput
    workoutSessions?: WorkoutSessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutTemplates?: WorkoutTemplateUncheckedUpdateManyWithoutUserNestedInput
    workoutSessions?: WorkoutSessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseCreateInput = {
    id?: string
    name: string
    category: string
    force?: string | null
    level?: string | null
    mechanic?: string | null
    equipment?: string | null
    primaryMuscles?: ExerciseCreateprimaryMusclesInput | string[]
    secondaryMuscles?: ExerciseCreatesecondaryMusclesInput | string[]
    instructions?: ExerciseCreateinstructionsInput | string[]
    image?: string | null
    workoutTemplateExercises?: WorkoutTemplateExerciseCreateNestedManyWithoutExerciseInput
    workoutSessionExercises?: WorkoutSessionExerciseCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateInput = {
    id?: string
    name: string
    category: string
    force?: string | null
    level?: string | null
    mechanic?: string | null
    equipment?: string | null
    primaryMuscles?: ExerciseCreateprimaryMusclesInput | string[]
    secondaryMuscles?: ExerciseCreatesecondaryMusclesInput | string[]
    instructions?: ExerciseCreateinstructionsInput | string[]
    image?: string | null
    workoutTemplateExercises?: WorkoutTemplateExerciseUncheckedCreateNestedManyWithoutExerciseInput
    workoutSessionExercises?: WorkoutSessionExerciseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    force?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    mechanic?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    primaryMuscles?: ExerciseUpdateprimaryMusclesInput | string[]
    secondaryMuscles?: ExerciseUpdatesecondaryMusclesInput | string[]
    instructions?: ExerciseUpdateinstructionsInput | string[]
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workoutTemplateExercises?: WorkoutTemplateExerciseUpdateManyWithoutExerciseNestedInput
    workoutSessionExercises?: WorkoutSessionExerciseUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    force?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    mechanic?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    primaryMuscles?: ExerciseUpdateprimaryMusclesInput | string[]
    secondaryMuscles?: ExerciseUpdatesecondaryMusclesInput | string[]
    instructions?: ExerciseUpdateinstructionsInput | string[]
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workoutTemplateExercises?: WorkoutTemplateExerciseUncheckedUpdateManyWithoutExerciseNestedInput
    workoutSessionExercises?: WorkoutSessionExerciseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseCreateManyInput = {
    id?: string
    name: string
    category: string
    force?: string | null
    level?: string | null
    mechanic?: string | null
    equipment?: string | null
    primaryMuscles?: ExerciseCreateprimaryMusclesInput | string[]
    secondaryMuscles?: ExerciseCreatesecondaryMusclesInput | string[]
    instructions?: ExerciseCreateinstructionsInput | string[]
    image?: string | null
  }

  export type ExerciseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    force?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    mechanic?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    primaryMuscles?: ExerciseUpdateprimaryMusclesInput | string[]
    secondaryMuscles?: ExerciseUpdatesecondaryMusclesInput | string[]
    instructions?: ExerciseUpdateinstructionsInput | string[]
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExerciseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    force?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    mechanic?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    primaryMuscles?: ExerciseUpdateprimaryMusclesInput | string[]
    secondaryMuscles?: ExerciseUpdatesecondaryMusclesInput | string[]
    instructions?: ExerciseUpdateinstructionsInput | string[]
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkoutTemplateCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutWorkoutTemplatesInput
    exercises?: WorkoutTemplateExerciseCreateNestedManyWithoutWorkoutTemplateInput
    workoutSessions?: WorkoutSessionCreateNestedManyWithoutWorkoutTemplateInput
  }

  export type WorkoutTemplateUncheckedCreateInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    exercises?: WorkoutTemplateExerciseUncheckedCreateNestedManyWithoutWorkoutTemplateInput
    workoutSessions?: WorkoutSessionUncheckedCreateNestedManyWithoutWorkoutTemplateInput
  }

  export type WorkoutTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWorkoutTemplatesNestedInput
    exercises?: WorkoutTemplateExerciseUpdateManyWithoutWorkoutTemplateNestedInput
    workoutSessions?: WorkoutSessionUpdateManyWithoutWorkoutTemplateNestedInput
  }

  export type WorkoutTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: WorkoutTemplateExerciseUncheckedUpdateManyWithoutWorkoutTemplateNestedInput
    workoutSessions?: WorkoutSessionUncheckedUpdateManyWithoutWorkoutTemplateNestedInput
  }

  export type WorkoutTemplateCreateManyInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
  }

  export type WorkoutTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutTemplateExerciseCreateInput = {
    id?: string
    createdAt?: Date | string
    workoutTemplate: WorkoutTemplateCreateNestedOneWithoutExercisesInput
    exercise: ExerciseCreateNestedOneWithoutWorkoutTemplateExercisesInput
    sets?: WorkoutTemplateSetCreateNestedManyWithoutWorkoutTemplateExerciseInput
  }

  export type WorkoutTemplateExerciseUncheckedCreateInput = {
    id?: string
    workoutTemplateId: string
    exerciseId: string
    createdAt?: Date | string
    sets?: WorkoutTemplateSetUncheckedCreateNestedManyWithoutWorkoutTemplateExerciseInput
  }

  export type WorkoutTemplateExerciseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutTemplate?: WorkoutTemplateUpdateOneRequiredWithoutExercisesNestedInput
    exercise?: ExerciseUpdateOneRequiredWithoutWorkoutTemplateExercisesNestedInput
    sets?: WorkoutTemplateSetUpdateManyWithoutWorkoutTemplateExerciseNestedInput
  }

  export type WorkoutTemplateExerciseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutTemplateId?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sets?: WorkoutTemplateSetUncheckedUpdateManyWithoutWorkoutTemplateExerciseNestedInput
  }

  export type WorkoutTemplateExerciseCreateManyInput = {
    id?: string
    workoutTemplateId: string
    exerciseId: string
    createdAt?: Date | string
  }

  export type WorkoutTemplateExerciseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutTemplateExerciseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutTemplateId?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutTemplateSetCreateInput = {
    id?: string
    order: number
    reps: number
    weight: number
    createdAt?: Date | string
    workoutTemplateExercise: WorkoutTemplateExerciseCreateNestedOneWithoutSetsInput
  }

  export type WorkoutTemplateSetUncheckedCreateInput = {
    id?: string
    workoutTemplateExerciseId: string
    order: number
    reps: number
    weight: number
    createdAt?: Date | string
  }

  export type WorkoutTemplateSetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutTemplateExercise?: WorkoutTemplateExerciseUpdateOneRequiredWithoutSetsNestedInput
  }

  export type WorkoutTemplateSetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutTemplateExerciseId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutTemplateSetCreateManyInput = {
    id?: string
    workoutTemplateExerciseId: string
    order: number
    reps: number
    weight: number
    createdAt?: Date | string
  }

  export type WorkoutTemplateSetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutTemplateSetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutTemplateExerciseId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutSessionCreateInput = {
    id?: string
    startTime: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutWorkoutSessionsInput
    workoutTemplate?: WorkoutTemplateCreateNestedOneWithoutWorkoutSessionsInput
    exercises?: WorkoutSessionExerciseCreateNestedManyWithoutWorkoutSessionInput
  }

  export type WorkoutSessionUncheckedCreateInput = {
    id?: string
    userId: string
    workoutTemplateId?: string | null
    startTime: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
    exercises?: WorkoutSessionExerciseUncheckedCreateNestedManyWithoutWorkoutSessionInput
  }

  export type WorkoutSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWorkoutSessionsNestedInput
    workoutTemplate?: WorkoutTemplateUpdateOneWithoutWorkoutSessionsNestedInput
    exercises?: WorkoutSessionExerciseUpdateManyWithoutWorkoutSessionNestedInput
  }

  export type WorkoutSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    workoutTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: WorkoutSessionExerciseUncheckedUpdateManyWithoutWorkoutSessionNestedInput
  }

  export type WorkoutSessionCreateManyInput = {
    id?: string
    userId: string
    workoutTemplateId?: string | null
    startTime: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type WorkoutSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    workoutTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutSessionExerciseCreateInput = {
    id?: string
    createdAt?: Date | string
    workoutSession: WorkoutSessionCreateNestedOneWithoutExercisesInput
    exercise: ExerciseCreateNestedOneWithoutWorkoutSessionExercisesInput
    sets?: WorkoutSessionSetCreateNestedManyWithoutWorkoutSessionExerciseInput
  }

  export type WorkoutSessionExerciseUncheckedCreateInput = {
    id?: string
    workoutSessionId: string
    exerciseId: string
    createdAt?: Date | string
    sets?: WorkoutSessionSetUncheckedCreateNestedManyWithoutWorkoutSessionExerciseInput
  }

  export type WorkoutSessionExerciseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutSession?: WorkoutSessionUpdateOneRequiredWithoutExercisesNestedInput
    exercise?: ExerciseUpdateOneRequiredWithoutWorkoutSessionExercisesNestedInput
    sets?: WorkoutSessionSetUpdateManyWithoutWorkoutSessionExerciseNestedInput
  }

  export type WorkoutSessionExerciseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutSessionId?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sets?: WorkoutSessionSetUncheckedUpdateManyWithoutWorkoutSessionExerciseNestedInput
  }

  export type WorkoutSessionExerciseCreateManyInput = {
    id?: string
    workoutSessionId: string
    exerciseId: string
    createdAt?: Date | string
  }

  export type WorkoutSessionExerciseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutSessionExerciseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutSessionId?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutSessionSetCreateInput = {
    id?: string
    order: number
    reps: number
    weight: number
    createdAt?: Date | string
    workoutSessionExercise: WorkoutSessionExerciseCreateNestedOneWithoutSetsInput
  }

  export type WorkoutSessionSetUncheckedCreateInput = {
    id?: string
    workoutSessionExerciseId: string
    order: number
    reps: number
    weight: number
    createdAt?: Date | string
  }

  export type WorkoutSessionSetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutSessionExercise?: WorkoutSessionExerciseUpdateOneRequiredWithoutSetsNestedInput
  }

  export type WorkoutSessionSetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutSessionExerciseId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutSessionSetCreateManyInput = {
    id?: string
    workoutSessionExerciseId: string
    order: number
    reps: number
    weight: number
    createdAt?: Date | string
  }

  export type WorkoutSessionSetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutSessionSetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutSessionExerciseId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type WorkoutTemplateListRelationFilter = {
    every?: WorkoutTemplateWhereInput
    some?: WorkoutTemplateWhereInput
    none?: WorkoutTemplateWhereInput
  }

  export type WorkoutSessionListRelationFilter = {
    every?: WorkoutSessionWhereInput
    some?: WorkoutSessionWhereInput
    none?: WorkoutSessionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type WorkoutTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type WorkoutTemplateExerciseListRelationFilter = {
    every?: WorkoutTemplateExerciseWhereInput
    some?: WorkoutTemplateExerciseWhereInput
    none?: WorkoutTemplateExerciseWhereInput
  }

  export type WorkoutSessionExerciseListRelationFilter = {
    every?: WorkoutSessionExerciseWhereInput
    some?: WorkoutSessionExerciseWhereInput
    none?: WorkoutSessionExerciseWhereInput
  }

  export type WorkoutTemplateExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutSessionExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    force?: SortOrder
    level?: SortOrder
    mechanic?: SortOrder
    equipment?: SortOrder
    primaryMuscles?: SortOrder
    secondaryMuscles?: SortOrder
    instructions?: SortOrder
    image?: SortOrder
  }

  export type ExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    force?: SortOrder
    level?: SortOrder
    mechanic?: SortOrder
    equipment?: SortOrder
    image?: SortOrder
  }

  export type ExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    force?: SortOrder
    level?: SortOrder
    mechanic?: SortOrder
    equipment?: SortOrder
    image?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type WorkoutTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkoutTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkoutTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkoutTemplateScalarRelationFilter = {
    is?: WorkoutTemplateWhereInput
    isNot?: WorkoutTemplateWhereInput
  }

  export type ExerciseScalarRelationFilter = {
    is?: ExerciseWhereInput
    isNot?: ExerciseWhereInput
  }

  export type WorkoutTemplateSetListRelationFilter = {
    every?: WorkoutTemplateSetWhereInput
    some?: WorkoutTemplateSetWhereInput
    none?: WorkoutTemplateSetWhereInput
  }

  export type WorkoutTemplateSetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutTemplateExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    workoutTemplateId?: SortOrder
    exerciseId?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkoutTemplateExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    workoutTemplateId?: SortOrder
    exerciseId?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkoutTemplateExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    workoutTemplateId?: SortOrder
    exerciseId?: SortOrder
    createdAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type WorkoutTemplateExerciseScalarRelationFilter = {
    is?: WorkoutTemplateExerciseWhereInput
    isNot?: WorkoutTemplateExerciseWhereInput
  }

  export type WorkoutTemplateSetCountOrderByAggregateInput = {
    id?: SortOrder
    workoutTemplateExerciseId?: SortOrder
    order?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkoutTemplateSetAvgOrderByAggregateInput = {
    order?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
  }

  export type WorkoutTemplateSetMaxOrderByAggregateInput = {
    id?: SortOrder
    workoutTemplateExerciseId?: SortOrder
    order?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkoutTemplateSetMinOrderByAggregateInput = {
    id?: SortOrder
    workoutTemplateExerciseId?: SortOrder
    order?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkoutTemplateSetSumOrderByAggregateInput = {
    order?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type WorkoutTemplateNullableScalarRelationFilter = {
    is?: WorkoutTemplateWhereInput | null
    isNot?: WorkoutTemplateWhereInput | null
  }

  export type WorkoutSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutTemplateId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkoutSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutTemplateId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkoutSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    workoutTemplateId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type WorkoutSessionScalarRelationFilter = {
    is?: WorkoutSessionWhereInput
    isNot?: WorkoutSessionWhereInput
  }

  export type WorkoutSessionSetListRelationFilter = {
    every?: WorkoutSessionSetWhereInput
    some?: WorkoutSessionSetWhereInput
    none?: WorkoutSessionSetWhereInput
  }

  export type WorkoutSessionSetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutSessionExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    workoutSessionId?: SortOrder
    exerciseId?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkoutSessionExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    workoutSessionId?: SortOrder
    exerciseId?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkoutSessionExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    workoutSessionId?: SortOrder
    exerciseId?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkoutSessionExerciseScalarRelationFilter = {
    is?: WorkoutSessionExerciseWhereInput
    isNot?: WorkoutSessionExerciseWhereInput
  }

  export type WorkoutSessionSetCountOrderByAggregateInput = {
    id?: SortOrder
    workoutSessionExerciseId?: SortOrder
    order?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkoutSessionSetAvgOrderByAggregateInput = {
    order?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
  }

  export type WorkoutSessionSetMaxOrderByAggregateInput = {
    id?: SortOrder
    workoutSessionExerciseId?: SortOrder
    order?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkoutSessionSetMinOrderByAggregateInput = {
    id?: SortOrder
    workoutSessionExerciseId?: SortOrder
    order?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkoutSessionSetSumOrderByAggregateInput = {
    order?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
  }

  export type WorkoutTemplateCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkoutTemplateCreateWithoutUserInput, WorkoutTemplateUncheckedCreateWithoutUserInput> | WorkoutTemplateCreateWithoutUserInput[] | WorkoutTemplateUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutTemplateCreateOrConnectWithoutUserInput | WorkoutTemplateCreateOrConnectWithoutUserInput[]
    createMany?: WorkoutTemplateCreateManyUserInputEnvelope
    connect?: WorkoutTemplateWhereUniqueInput | WorkoutTemplateWhereUniqueInput[]
  }

  export type WorkoutSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkoutSessionCreateWithoutUserInput, WorkoutSessionUncheckedCreateWithoutUserInput> | WorkoutSessionCreateWithoutUserInput[] | WorkoutSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutSessionCreateOrConnectWithoutUserInput | WorkoutSessionCreateOrConnectWithoutUserInput[]
    createMany?: WorkoutSessionCreateManyUserInputEnvelope
    connect?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
  }

  export type WorkoutTemplateUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkoutTemplateCreateWithoutUserInput, WorkoutTemplateUncheckedCreateWithoutUserInput> | WorkoutTemplateCreateWithoutUserInput[] | WorkoutTemplateUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutTemplateCreateOrConnectWithoutUserInput | WorkoutTemplateCreateOrConnectWithoutUserInput[]
    createMany?: WorkoutTemplateCreateManyUserInputEnvelope
    connect?: WorkoutTemplateWhereUniqueInput | WorkoutTemplateWhereUniqueInput[]
  }

  export type WorkoutSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkoutSessionCreateWithoutUserInput, WorkoutSessionUncheckedCreateWithoutUserInput> | WorkoutSessionCreateWithoutUserInput[] | WorkoutSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutSessionCreateOrConnectWithoutUserInput | WorkoutSessionCreateOrConnectWithoutUserInput[]
    createMany?: WorkoutSessionCreateManyUserInputEnvelope
    connect?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type WorkoutTemplateUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkoutTemplateCreateWithoutUserInput, WorkoutTemplateUncheckedCreateWithoutUserInput> | WorkoutTemplateCreateWithoutUserInput[] | WorkoutTemplateUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutTemplateCreateOrConnectWithoutUserInput | WorkoutTemplateCreateOrConnectWithoutUserInput[]
    upsert?: WorkoutTemplateUpsertWithWhereUniqueWithoutUserInput | WorkoutTemplateUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkoutTemplateCreateManyUserInputEnvelope
    set?: WorkoutTemplateWhereUniqueInput | WorkoutTemplateWhereUniqueInput[]
    disconnect?: WorkoutTemplateWhereUniqueInput | WorkoutTemplateWhereUniqueInput[]
    delete?: WorkoutTemplateWhereUniqueInput | WorkoutTemplateWhereUniqueInput[]
    connect?: WorkoutTemplateWhereUniqueInput | WorkoutTemplateWhereUniqueInput[]
    update?: WorkoutTemplateUpdateWithWhereUniqueWithoutUserInput | WorkoutTemplateUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkoutTemplateUpdateManyWithWhereWithoutUserInput | WorkoutTemplateUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkoutTemplateScalarWhereInput | WorkoutTemplateScalarWhereInput[]
  }

  export type WorkoutSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkoutSessionCreateWithoutUserInput, WorkoutSessionUncheckedCreateWithoutUserInput> | WorkoutSessionCreateWithoutUserInput[] | WorkoutSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutSessionCreateOrConnectWithoutUserInput | WorkoutSessionCreateOrConnectWithoutUserInput[]
    upsert?: WorkoutSessionUpsertWithWhereUniqueWithoutUserInput | WorkoutSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkoutSessionCreateManyUserInputEnvelope
    set?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
    disconnect?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
    delete?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
    connect?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
    update?: WorkoutSessionUpdateWithWhereUniqueWithoutUserInput | WorkoutSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkoutSessionUpdateManyWithWhereWithoutUserInput | WorkoutSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkoutSessionScalarWhereInput | WorkoutSessionScalarWhereInput[]
  }

  export type WorkoutTemplateUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkoutTemplateCreateWithoutUserInput, WorkoutTemplateUncheckedCreateWithoutUserInput> | WorkoutTemplateCreateWithoutUserInput[] | WorkoutTemplateUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutTemplateCreateOrConnectWithoutUserInput | WorkoutTemplateCreateOrConnectWithoutUserInput[]
    upsert?: WorkoutTemplateUpsertWithWhereUniqueWithoutUserInput | WorkoutTemplateUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkoutTemplateCreateManyUserInputEnvelope
    set?: WorkoutTemplateWhereUniqueInput | WorkoutTemplateWhereUniqueInput[]
    disconnect?: WorkoutTemplateWhereUniqueInput | WorkoutTemplateWhereUniqueInput[]
    delete?: WorkoutTemplateWhereUniqueInput | WorkoutTemplateWhereUniqueInput[]
    connect?: WorkoutTemplateWhereUniqueInput | WorkoutTemplateWhereUniqueInput[]
    update?: WorkoutTemplateUpdateWithWhereUniqueWithoutUserInput | WorkoutTemplateUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkoutTemplateUpdateManyWithWhereWithoutUserInput | WorkoutTemplateUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkoutTemplateScalarWhereInput | WorkoutTemplateScalarWhereInput[]
  }

  export type WorkoutSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkoutSessionCreateWithoutUserInput, WorkoutSessionUncheckedCreateWithoutUserInput> | WorkoutSessionCreateWithoutUserInput[] | WorkoutSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutSessionCreateOrConnectWithoutUserInput | WorkoutSessionCreateOrConnectWithoutUserInput[]
    upsert?: WorkoutSessionUpsertWithWhereUniqueWithoutUserInput | WorkoutSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkoutSessionCreateManyUserInputEnvelope
    set?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
    disconnect?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
    delete?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
    connect?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
    update?: WorkoutSessionUpdateWithWhereUniqueWithoutUserInput | WorkoutSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkoutSessionUpdateManyWithWhereWithoutUserInput | WorkoutSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkoutSessionScalarWhereInput | WorkoutSessionScalarWhereInput[]
  }

  export type ExerciseCreateprimaryMusclesInput = {
    set: string[]
  }

  export type ExerciseCreatesecondaryMusclesInput = {
    set: string[]
  }

  export type ExerciseCreateinstructionsInput = {
    set: string[]
  }

  export type WorkoutTemplateExerciseCreateNestedManyWithoutExerciseInput = {
    create?: XOR<WorkoutTemplateExerciseCreateWithoutExerciseInput, WorkoutTemplateExerciseUncheckedCreateWithoutExerciseInput> | WorkoutTemplateExerciseCreateWithoutExerciseInput[] | WorkoutTemplateExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutTemplateExerciseCreateOrConnectWithoutExerciseInput | WorkoutTemplateExerciseCreateOrConnectWithoutExerciseInput[]
    createMany?: WorkoutTemplateExerciseCreateManyExerciseInputEnvelope
    connect?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
  }

  export type WorkoutSessionExerciseCreateNestedManyWithoutExerciseInput = {
    create?: XOR<WorkoutSessionExerciseCreateWithoutExerciseInput, WorkoutSessionExerciseUncheckedCreateWithoutExerciseInput> | WorkoutSessionExerciseCreateWithoutExerciseInput[] | WorkoutSessionExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutSessionExerciseCreateOrConnectWithoutExerciseInput | WorkoutSessionExerciseCreateOrConnectWithoutExerciseInput[]
    createMany?: WorkoutSessionExerciseCreateManyExerciseInputEnvelope
    connect?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
  }

  export type WorkoutTemplateExerciseUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<WorkoutTemplateExerciseCreateWithoutExerciseInput, WorkoutTemplateExerciseUncheckedCreateWithoutExerciseInput> | WorkoutTemplateExerciseCreateWithoutExerciseInput[] | WorkoutTemplateExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutTemplateExerciseCreateOrConnectWithoutExerciseInput | WorkoutTemplateExerciseCreateOrConnectWithoutExerciseInput[]
    createMany?: WorkoutTemplateExerciseCreateManyExerciseInputEnvelope
    connect?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
  }

  export type WorkoutSessionExerciseUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<WorkoutSessionExerciseCreateWithoutExerciseInput, WorkoutSessionExerciseUncheckedCreateWithoutExerciseInput> | WorkoutSessionExerciseCreateWithoutExerciseInput[] | WorkoutSessionExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutSessionExerciseCreateOrConnectWithoutExerciseInput | WorkoutSessionExerciseCreateOrConnectWithoutExerciseInput[]
    createMany?: WorkoutSessionExerciseCreateManyExerciseInputEnvelope
    connect?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
  }

  export type ExerciseUpdateprimaryMusclesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ExerciseUpdatesecondaryMusclesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ExerciseUpdateinstructionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type WorkoutTemplateExerciseUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<WorkoutTemplateExerciseCreateWithoutExerciseInput, WorkoutTemplateExerciseUncheckedCreateWithoutExerciseInput> | WorkoutTemplateExerciseCreateWithoutExerciseInput[] | WorkoutTemplateExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutTemplateExerciseCreateOrConnectWithoutExerciseInput | WorkoutTemplateExerciseCreateOrConnectWithoutExerciseInput[]
    upsert?: WorkoutTemplateExerciseUpsertWithWhereUniqueWithoutExerciseInput | WorkoutTemplateExerciseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: WorkoutTemplateExerciseCreateManyExerciseInputEnvelope
    set?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
    disconnect?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
    delete?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
    connect?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
    update?: WorkoutTemplateExerciseUpdateWithWhereUniqueWithoutExerciseInput | WorkoutTemplateExerciseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: WorkoutTemplateExerciseUpdateManyWithWhereWithoutExerciseInput | WorkoutTemplateExerciseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: WorkoutTemplateExerciseScalarWhereInput | WorkoutTemplateExerciseScalarWhereInput[]
  }

  export type WorkoutSessionExerciseUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<WorkoutSessionExerciseCreateWithoutExerciseInput, WorkoutSessionExerciseUncheckedCreateWithoutExerciseInput> | WorkoutSessionExerciseCreateWithoutExerciseInput[] | WorkoutSessionExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutSessionExerciseCreateOrConnectWithoutExerciseInput | WorkoutSessionExerciseCreateOrConnectWithoutExerciseInput[]
    upsert?: WorkoutSessionExerciseUpsertWithWhereUniqueWithoutExerciseInput | WorkoutSessionExerciseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: WorkoutSessionExerciseCreateManyExerciseInputEnvelope
    set?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
    disconnect?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
    delete?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
    connect?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
    update?: WorkoutSessionExerciseUpdateWithWhereUniqueWithoutExerciseInput | WorkoutSessionExerciseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: WorkoutSessionExerciseUpdateManyWithWhereWithoutExerciseInput | WorkoutSessionExerciseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: WorkoutSessionExerciseScalarWhereInput | WorkoutSessionExerciseScalarWhereInput[]
  }

  export type WorkoutTemplateExerciseUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<WorkoutTemplateExerciseCreateWithoutExerciseInput, WorkoutTemplateExerciseUncheckedCreateWithoutExerciseInput> | WorkoutTemplateExerciseCreateWithoutExerciseInput[] | WorkoutTemplateExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutTemplateExerciseCreateOrConnectWithoutExerciseInput | WorkoutTemplateExerciseCreateOrConnectWithoutExerciseInput[]
    upsert?: WorkoutTemplateExerciseUpsertWithWhereUniqueWithoutExerciseInput | WorkoutTemplateExerciseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: WorkoutTemplateExerciseCreateManyExerciseInputEnvelope
    set?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
    disconnect?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
    delete?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
    connect?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
    update?: WorkoutTemplateExerciseUpdateWithWhereUniqueWithoutExerciseInput | WorkoutTemplateExerciseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: WorkoutTemplateExerciseUpdateManyWithWhereWithoutExerciseInput | WorkoutTemplateExerciseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: WorkoutTemplateExerciseScalarWhereInput | WorkoutTemplateExerciseScalarWhereInput[]
  }

  export type WorkoutSessionExerciseUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<WorkoutSessionExerciseCreateWithoutExerciseInput, WorkoutSessionExerciseUncheckedCreateWithoutExerciseInput> | WorkoutSessionExerciseCreateWithoutExerciseInput[] | WorkoutSessionExerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: WorkoutSessionExerciseCreateOrConnectWithoutExerciseInput | WorkoutSessionExerciseCreateOrConnectWithoutExerciseInput[]
    upsert?: WorkoutSessionExerciseUpsertWithWhereUniqueWithoutExerciseInput | WorkoutSessionExerciseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: WorkoutSessionExerciseCreateManyExerciseInputEnvelope
    set?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
    disconnect?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
    delete?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
    connect?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
    update?: WorkoutSessionExerciseUpdateWithWhereUniqueWithoutExerciseInput | WorkoutSessionExerciseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: WorkoutSessionExerciseUpdateManyWithWhereWithoutExerciseInput | WorkoutSessionExerciseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: WorkoutSessionExerciseScalarWhereInput | WorkoutSessionExerciseScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutWorkoutTemplatesInput = {
    create?: XOR<UserCreateWithoutWorkoutTemplatesInput, UserUncheckedCreateWithoutWorkoutTemplatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutTemplatesInput
    connect?: UserWhereUniqueInput
  }

  export type WorkoutTemplateExerciseCreateNestedManyWithoutWorkoutTemplateInput = {
    create?: XOR<WorkoutTemplateExerciseCreateWithoutWorkoutTemplateInput, WorkoutTemplateExerciseUncheckedCreateWithoutWorkoutTemplateInput> | WorkoutTemplateExerciseCreateWithoutWorkoutTemplateInput[] | WorkoutTemplateExerciseUncheckedCreateWithoutWorkoutTemplateInput[]
    connectOrCreate?: WorkoutTemplateExerciseCreateOrConnectWithoutWorkoutTemplateInput | WorkoutTemplateExerciseCreateOrConnectWithoutWorkoutTemplateInput[]
    createMany?: WorkoutTemplateExerciseCreateManyWorkoutTemplateInputEnvelope
    connect?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
  }

  export type WorkoutSessionCreateNestedManyWithoutWorkoutTemplateInput = {
    create?: XOR<WorkoutSessionCreateWithoutWorkoutTemplateInput, WorkoutSessionUncheckedCreateWithoutWorkoutTemplateInput> | WorkoutSessionCreateWithoutWorkoutTemplateInput[] | WorkoutSessionUncheckedCreateWithoutWorkoutTemplateInput[]
    connectOrCreate?: WorkoutSessionCreateOrConnectWithoutWorkoutTemplateInput | WorkoutSessionCreateOrConnectWithoutWorkoutTemplateInput[]
    createMany?: WorkoutSessionCreateManyWorkoutTemplateInputEnvelope
    connect?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
  }

  export type WorkoutTemplateExerciseUncheckedCreateNestedManyWithoutWorkoutTemplateInput = {
    create?: XOR<WorkoutTemplateExerciseCreateWithoutWorkoutTemplateInput, WorkoutTemplateExerciseUncheckedCreateWithoutWorkoutTemplateInput> | WorkoutTemplateExerciseCreateWithoutWorkoutTemplateInput[] | WorkoutTemplateExerciseUncheckedCreateWithoutWorkoutTemplateInput[]
    connectOrCreate?: WorkoutTemplateExerciseCreateOrConnectWithoutWorkoutTemplateInput | WorkoutTemplateExerciseCreateOrConnectWithoutWorkoutTemplateInput[]
    createMany?: WorkoutTemplateExerciseCreateManyWorkoutTemplateInputEnvelope
    connect?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
  }

  export type WorkoutSessionUncheckedCreateNestedManyWithoutWorkoutTemplateInput = {
    create?: XOR<WorkoutSessionCreateWithoutWorkoutTemplateInput, WorkoutSessionUncheckedCreateWithoutWorkoutTemplateInput> | WorkoutSessionCreateWithoutWorkoutTemplateInput[] | WorkoutSessionUncheckedCreateWithoutWorkoutTemplateInput[]
    connectOrCreate?: WorkoutSessionCreateOrConnectWithoutWorkoutTemplateInput | WorkoutSessionCreateOrConnectWithoutWorkoutTemplateInput[]
    createMany?: WorkoutSessionCreateManyWorkoutTemplateInputEnvelope
    connect?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutWorkoutTemplatesNestedInput = {
    create?: XOR<UserCreateWithoutWorkoutTemplatesInput, UserUncheckedCreateWithoutWorkoutTemplatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutTemplatesInput
    upsert?: UserUpsertWithoutWorkoutTemplatesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkoutTemplatesInput, UserUpdateWithoutWorkoutTemplatesInput>, UserUncheckedUpdateWithoutWorkoutTemplatesInput>
  }

  export type WorkoutTemplateExerciseUpdateManyWithoutWorkoutTemplateNestedInput = {
    create?: XOR<WorkoutTemplateExerciseCreateWithoutWorkoutTemplateInput, WorkoutTemplateExerciseUncheckedCreateWithoutWorkoutTemplateInput> | WorkoutTemplateExerciseCreateWithoutWorkoutTemplateInput[] | WorkoutTemplateExerciseUncheckedCreateWithoutWorkoutTemplateInput[]
    connectOrCreate?: WorkoutTemplateExerciseCreateOrConnectWithoutWorkoutTemplateInput | WorkoutTemplateExerciseCreateOrConnectWithoutWorkoutTemplateInput[]
    upsert?: WorkoutTemplateExerciseUpsertWithWhereUniqueWithoutWorkoutTemplateInput | WorkoutTemplateExerciseUpsertWithWhereUniqueWithoutWorkoutTemplateInput[]
    createMany?: WorkoutTemplateExerciseCreateManyWorkoutTemplateInputEnvelope
    set?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
    disconnect?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
    delete?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
    connect?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
    update?: WorkoutTemplateExerciseUpdateWithWhereUniqueWithoutWorkoutTemplateInput | WorkoutTemplateExerciseUpdateWithWhereUniqueWithoutWorkoutTemplateInput[]
    updateMany?: WorkoutTemplateExerciseUpdateManyWithWhereWithoutWorkoutTemplateInput | WorkoutTemplateExerciseUpdateManyWithWhereWithoutWorkoutTemplateInput[]
    deleteMany?: WorkoutTemplateExerciseScalarWhereInput | WorkoutTemplateExerciseScalarWhereInput[]
  }

  export type WorkoutSessionUpdateManyWithoutWorkoutTemplateNestedInput = {
    create?: XOR<WorkoutSessionCreateWithoutWorkoutTemplateInput, WorkoutSessionUncheckedCreateWithoutWorkoutTemplateInput> | WorkoutSessionCreateWithoutWorkoutTemplateInput[] | WorkoutSessionUncheckedCreateWithoutWorkoutTemplateInput[]
    connectOrCreate?: WorkoutSessionCreateOrConnectWithoutWorkoutTemplateInput | WorkoutSessionCreateOrConnectWithoutWorkoutTemplateInput[]
    upsert?: WorkoutSessionUpsertWithWhereUniqueWithoutWorkoutTemplateInput | WorkoutSessionUpsertWithWhereUniqueWithoutWorkoutTemplateInput[]
    createMany?: WorkoutSessionCreateManyWorkoutTemplateInputEnvelope
    set?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
    disconnect?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
    delete?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
    connect?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
    update?: WorkoutSessionUpdateWithWhereUniqueWithoutWorkoutTemplateInput | WorkoutSessionUpdateWithWhereUniqueWithoutWorkoutTemplateInput[]
    updateMany?: WorkoutSessionUpdateManyWithWhereWithoutWorkoutTemplateInput | WorkoutSessionUpdateManyWithWhereWithoutWorkoutTemplateInput[]
    deleteMany?: WorkoutSessionScalarWhereInput | WorkoutSessionScalarWhereInput[]
  }

  export type WorkoutTemplateExerciseUncheckedUpdateManyWithoutWorkoutTemplateNestedInput = {
    create?: XOR<WorkoutTemplateExerciseCreateWithoutWorkoutTemplateInput, WorkoutTemplateExerciseUncheckedCreateWithoutWorkoutTemplateInput> | WorkoutTemplateExerciseCreateWithoutWorkoutTemplateInput[] | WorkoutTemplateExerciseUncheckedCreateWithoutWorkoutTemplateInput[]
    connectOrCreate?: WorkoutTemplateExerciseCreateOrConnectWithoutWorkoutTemplateInput | WorkoutTemplateExerciseCreateOrConnectWithoutWorkoutTemplateInput[]
    upsert?: WorkoutTemplateExerciseUpsertWithWhereUniqueWithoutWorkoutTemplateInput | WorkoutTemplateExerciseUpsertWithWhereUniqueWithoutWorkoutTemplateInput[]
    createMany?: WorkoutTemplateExerciseCreateManyWorkoutTemplateInputEnvelope
    set?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
    disconnect?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
    delete?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
    connect?: WorkoutTemplateExerciseWhereUniqueInput | WorkoutTemplateExerciseWhereUniqueInput[]
    update?: WorkoutTemplateExerciseUpdateWithWhereUniqueWithoutWorkoutTemplateInput | WorkoutTemplateExerciseUpdateWithWhereUniqueWithoutWorkoutTemplateInput[]
    updateMany?: WorkoutTemplateExerciseUpdateManyWithWhereWithoutWorkoutTemplateInput | WorkoutTemplateExerciseUpdateManyWithWhereWithoutWorkoutTemplateInput[]
    deleteMany?: WorkoutTemplateExerciseScalarWhereInput | WorkoutTemplateExerciseScalarWhereInput[]
  }

  export type WorkoutSessionUncheckedUpdateManyWithoutWorkoutTemplateNestedInput = {
    create?: XOR<WorkoutSessionCreateWithoutWorkoutTemplateInput, WorkoutSessionUncheckedCreateWithoutWorkoutTemplateInput> | WorkoutSessionCreateWithoutWorkoutTemplateInput[] | WorkoutSessionUncheckedCreateWithoutWorkoutTemplateInput[]
    connectOrCreate?: WorkoutSessionCreateOrConnectWithoutWorkoutTemplateInput | WorkoutSessionCreateOrConnectWithoutWorkoutTemplateInput[]
    upsert?: WorkoutSessionUpsertWithWhereUniqueWithoutWorkoutTemplateInput | WorkoutSessionUpsertWithWhereUniqueWithoutWorkoutTemplateInput[]
    createMany?: WorkoutSessionCreateManyWorkoutTemplateInputEnvelope
    set?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
    disconnect?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
    delete?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
    connect?: WorkoutSessionWhereUniqueInput | WorkoutSessionWhereUniqueInput[]
    update?: WorkoutSessionUpdateWithWhereUniqueWithoutWorkoutTemplateInput | WorkoutSessionUpdateWithWhereUniqueWithoutWorkoutTemplateInput[]
    updateMany?: WorkoutSessionUpdateManyWithWhereWithoutWorkoutTemplateInput | WorkoutSessionUpdateManyWithWhereWithoutWorkoutTemplateInput[]
    deleteMany?: WorkoutSessionScalarWhereInput | WorkoutSessionScalarWhereInput[]
  }

  export type WorkoutTemplateCreateNestedOneWithoutExercisesInput = {
    create?: XOR<WorkoutTemplateCreateWithoutExercisesInput, WorkoutTemplateUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: WorkoutTemplateCreateOrConnectWithoutExercisesInput
    connect?: WorkoutTemplateWhereUniqueInput
  }

  export type ExerciseCreateNestedOneWithoutWorkoutTemplateExercisesInput = {
    create?: XOR<ExerciseCreateWithoutWorkoutTemplateExercisesInput, ExerciseUncheckedCreateWithoutWorkoutTemplateExercisesInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutWorkoutTemplateExercisesInput
    connect?: ExerciseWhereUniqueInput
  }

  export type WorkoutTemplateSetCreateNestedManyWithoutWorkoutTemplateExerciseInput = {
    create?: XOR<WorkoutTemplateSetCreateWithoutWorkoutTemplateExerciseInput, WorkoutTemplateSetUncheckedCreateWithoutWorkoutTemplateExerciseInput> | WorkoutTemplateSetCreateWithoutWorkoutTemplateExerciseInput[] | WorkoutTemplateSetUncheckedCreateWithoutWorkoutTemplateExerciseInput[]
    connectOrCreate?: WorkoutTemplateSetCreateOrConnectWithoutWorkoutTemplateExerciseInput | WorkoutTemplateSetCreateOrConnectWithoutWorkoutTemplateExerciseInput[]
    createMany?: WorkoutTemplateSetCreateManyWorkoutTemplateExerciseInputEnvelope
    connect?: WorkoutTemplateSetWhereUniqueInput | WorkoutTemplateSetWhereUniqueInput[]
  }

  export type WorkoutTemplateSetUncheckedCreateNestedManyWithoutWorkoutTemplateExerciseInput = {
    create?: XOR<WorkoutTemplateSetCreateWithoutWorkoutTemplateExerciseInput, WorkoutTemplateSetUncheckedCreateWithoutWorkoutTemplateExerciseInput> | WorkoutTemplateSetCreateWithoutWorkoutTemplateExerciseInput[] | WorkoutTemplateSetUncheckedCreateWithoutWorkoutTemplateExerciseInput[]
    connectOrCreate?: WorkoutTemplateSetCreateOrConnectWithoutWorkoutTemplateExerciseInput | WorkoutTemplateSetCreateOrConnectWithoutWorkoutTemplateExerciseInput[]
    createMany?: WorkoutTemplateSetCreateManyWorkoutTemplateExerciseInputEnvelope
    connect?: WorkoutTemplateSetWhereUniqueInput | WorkoutTemplateSetWhereUniqueInput[]
  }

  export type WorkoutTemplateUpdateOneRequiredWithoutExercisesNestedInput = {
    create?: XOR<WorkoutTemplateCreateWithoutExercisesInput, WorkoutTemplateUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: WorkoutTemplateCreateOrConnectWithoutExercisesInput
    upsert?: WorkoutTemplateUpsertWithoutExercisesInput
    connect?: WorkoutTemplateWhereUniqueInput
    update?: XOR<XOR<WorkoutTemplateUpdateToOneWithWhereWithoutExercisesInput, WorkoutTemplateUpdateWithoutExercisesInput>, WorkoutTemplateUncheckedUpdateWithoutExercisesInput>
  }

  export type ExerciseUpdateOneRequiredWithoutWorkoutTemplateExercisesNestedInput = {
    create?: XOR<ExerciseCreateWithoutWorkoutTemplateExercisesInput, ExerciseUncheckedCreateWithoutWorkoutTemplateExercisesInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutWorkoutTemplateExercisesInput
    upsert?: ExerciseUpsertWithoutWorkoutTemplateExercisesInput
    connect?: ExerciseWhereUniqueInput
    update?: XOR<XOR<ExerciseUpdateToOneWithWhereWithoutWorkoutTemplateExercisesInput, ExerciseUpdateWithoutWorkoutTemplateExercisesInput>, ExerciseUncheckedUpdateWithoutWorkoutTemplateExercisesInput>
  }

  export type WorkoutTemplateSetUpdateManyWithoutWorkoutTemplateExerciseNestedInput = {
    create?: XOR<WorkoutTemplateSetCreateWithoutWorkoutTemplateExerciseInput, WorkoutTemplateSetUncheckedCreateWithoutWorkoutTemplateExerciseInput> | WorkoutTemplateSetCreateWithoutWorkoutTemplateExerciseInput[] | WorkoutTemplateSetUncheckedCreateWithoutWorkoutTemplateExerciseInput[]
    connectOrCreate?: WorkoutTemplateSetCreateOrConnectWithoutWorkoutTemplateExerciseInput | WorkoutTemplateSetCreateOrConnectWithoutWorkoutTemplateExerciseInput[]
    upsert?: WorkoutTemplateSetUpsertWithWhereUniqueWithoutWorkoutTemplateExerciseInput | WorkoutTemplateSetUpsertWithWhereUniqueWithoutWorkoutTemplateExerciseInput[]
    createMany?: WorkoutTemplateSetCreateManyWorkoutTemplateExerciseInputEnvelope
    set?: WorkoutTemplateSetWhereUniqueInput | WorkoutTemplateSetWhereUniqueInput[]
    disconnect?: WorkoutTemplateSetWhereUniqueInput | WorkoutTemplateSetWhereUniqueInput[]
    delete?: WorkoutTemplateSetWhereUniqueInput | WorkoutTemplateSetWhereUniqueInput[]
    connect?: WorkoutTemplateSetWhereUniqueInput | WorkoutTemplateSetWhereUniqueInput[]
    update?: WorkoutTemplateSetUpdateWithWhereUniqueWithoutWorkoutTemplateExerciseInput | WorkoutTemplateSetUpdateWithWhereUniqueWithoutWorkoutTemplateExerciseInput[]
    updateMany?: WorkoutTemplateSetUpdateManyWithWhereWithoutWorkoutTemplateExerciseInput | WorkoutTemplateSetUpdateManyWithWhereWithoutWorkoutTemplateExerciseInput[]
    deleteMany?: WorkoutTemplateSetScalarWhereInput | WorkoutTemplateSetScalarWhereInput[]
  }

  export type WorkoutTemplateSetUncheckedUpdateManyWithoutWorkoutTemplateExerciseNestedInput = {
    create?: XOR<WorkoutTemplateSetCreateWithoutWorkoutTemplateExerciseInput, WorkoutTemplateSetUncheckedCreateWithoutWorkoutTemplateExerciseInput> | WorkoutTemplateSetCreateWithoutWorkoutTemplateExerciseInput[] | WorkoutTemplateSetUncheckedCreateWithoutWorkoutTemplateExerciseInput[]
    connectOrCreate?: WorkoutTemplateSetCreateOrConnectWithoutWorkoutTemplateExerciseInput | WorkoutTemplateSetCreateOrConnectWithoutWorkoutTemplateExerciseInput[]
    upsert?: WorkoutTemplateSetUpsertWithWhereUniqueWithoutWorkoutTemplateExerciseInput | WorkoutTemplateSetUpsertWithWhereUniqueWithoutWorkoutTemplateExerciseInput[]
    createMany?: WorkoutTemplateSetCreateManyWorkoutTemplateExerciseInputEnvelope
    set?: WorkoutTemplateSetWhereUniqueInput | WorkoutTemplateSetWhereUniqueInput[]
    disconnect?: WorkoutTemplateSetWhereUniqueInput | WorkoutTemplateSetWhereUniqueInput[]
    delete?: WorkoutTemplateSetWhereUniqueInput | WorkoutTemplateSetWhereUniqueInput[]
    connect?: WorkoutTemplateSetWhereUniqueInput | WorkoutTemplateSetWhereUniqueInput[]
    update?: WorkoutTemplateSetUpdateWithWhereUniqueWithoutWorkoutTemplateExerciseInput | WorkoutTemplateSetUpdateWithWhereUniqueWithoutWorkoutTemplateExerciseInput[]
    updateMany?: WorkoutTemplateSetUpdateManyWithWhereWithoutWorkoutTemplateExerciseInput | WorkoutTemplateSetUpdateManyWithWhereWithoutWorkoutTemplateExerciseInput[]
    deleteMany?: WorkoutTemplateSetScalarWhereInput | WorkoutTemplateSetScalarWhereInput[]
  }

  export type WorkoutTemplateExerciseCreateNestedOneWithoutSetsInput = {
    create?: XOR<WorkoutTemplateExerciseCreateWithoutSetsInput, WorkoutTemplateExerciseUncheckedCreateWithoutSetsInput>
    connectOrCreate?: WorkoutTemplateExerciseCreateOrConnectWithoutSetsInput
    connect?: WorkoutTemplateExerciseWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WorkoutTemplateExerciseUpdateOneRequiredWithoutSetsNestedInput = {
    create?: XOR<WorkoutTemplateExerciseCreateWithoutSetsInput, WorkoutTemplateExerciseUncheckedCreateWithoutSetsInput>
    connectOrCreate?: WorkoutTemplateExerciseCreateOrConnectWithoutSetsInput
    upsert?: WorkoutTemplateExerciseUpsertWithoutSetsInput
    connect?: WorkoutTemplateExerciseWhereUniqueInput
    update?: XOR<XOR<WorkoutTemplateExerciseUpdateToOneWithWhereWithoutSetsInput, WorkoutTemplateExerciseUpdateWithoutSetsInput>, WorkoutTemplateExerciseUncheckedUpdateWithoutSetsInput>
  }

  export type UserCreateNestedOneWithoutWorkoutSessionsInput = {
    create?: XOR<UserCreateWithoutWorkoutSessionsInput, UserUncheckedCreateWithoutWorkoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type WorkoutTemplateCreateNestedOneWithoutWorkoutSessionsInput = {
    create?: XOR<WorkoutTemplateCreateWithoutWorkoutSessionsInput, WorkoutTemplateUncheckedCreateWithoutWorkoutSessionsInput>
    connectOrCreate?: WorkoutTemplateCreateOrConnectWithoutWorkoutSessionsInput
    connect?: WorkoutTemplateWhereUniqueInput
  }

  export type WorkoutSessionExerciseCreateNestedManyWithoutWorkoutSessionInput = {
    create?: XOR<WorkoutSessionExerciseCreateWithoutWorkoutSessionInput, WorkoutSessionExerciseUncheckedCreateWithoutWorkoutSessionInput> | WorkoutSessionExerciseCreateWithoutWorkoutSessionInput[] | WorkoutSessionExerciseUncheckedCreateWithoutWorkoutSessionInput[]
    connectOrCreate?: WorkoutSessionExerciseCreateOrConnectWithoutWorkoutSessionInput | WorkoutSessionExerciseCreateOrConnectWithoutWorkoutSessionInput[]
    createMany?: WorkoutSessionExerciseCreateManyWorkoutSessionInputEnvelope
    connect?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
  }

  export type WorkoutSessionExerciseUncheckedCreateNestedManyWithoutWorkoutSessionInput = {
    create?: XOR<WorkoutSessionExerciseCreateWithoutWorkoutSessionInput, WorkoutSessionExerciseUncheckedCreateWithoutWorkoutSessionInput> | WorkoutSessionExerciseCreateWithoutWorkoutSessionInput[] | WorkoutSessionExerciseUncheckedCreateWithoutWorkoutSessionInput[]
    connectOrCreate?: WorkoutSessionExerciseCreateOrConnectWithoutWorkoutSessionInput | WorkoutSessionExerciseCreateOrConnectWithoutWorkoutSessionInput[]
    createMany?: WorkoutSessionExerciseCreateManyWorkoutSessionInputEnvelope
    connect?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutWorkoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutWorkoutSessionsInput, UserUncheckedCreateWithoutWorkoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutSessionsInput
    upsert?: UserUpsertWithoutWorkoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkoutSessionsInput, UserUpdateWithoutWorkoutSessionsInput>, UserUncheckedUpdateWithoutWorkoutSessionsInput>
  }

  export type WorkoutTemplateUpdateOneWithoutWorkoutSessionsNestedInput = {
    create?: XOR<WorkoutTemplateCreateWithoutWorkoutSessionsInput, WorkoutTemplateUncheckedCreateWithoutWorkoutSessionsInput>
    connectOrCreate?: WorkoutTemplateCreateOrConnectWithoutWorkoutSessionsInput
    upsert?: WorkoutTemplateUpsertWithoutWorkoutSessionsInput
    disconnect?: WorkoutTemplateWhereInput | boolean
    delete?: WorkoutTemplateWhereInput | boolean
    connect?: WorkoutTemplateWhereUniqueInput
    update?: XOR<XOR<WorkoutTemplateUpdateToOneWithWhereWithoutWorkoutSessionsInput, WorkoutTemplateUpdateWithoutWorkoutSessionsInput>, WorkoutTemplateUncheckedUpdateWithoutWorkoutSessionsInput>
  }

  export type WorkoutSessionExerciseUpdateManyWithoutWorkoutSessionNestedInput = {
    create?: XOR<WorkoutSessionExerciseCreateWithoutWorkoutSessionInput, WorkoutSessionExerciseUncheckedCreateWithoutWorkoutSessionInput> | WorkoutSessionExerciseCreateWithoutWorkoutSessionInput[] | WorkoutSessionExerciseUncheckedCreateWithoutWorkoutSessionInput[]
    connectOrCreate?: WorkoutSessionExerciseCreateOrConnectWithoutWorkoutSessionInput | WorkoutSessionExerciseCreateOrConnectWithoutWorkoutSessionInput[]
    upsert?: WorkoutSessionExerciseUpsertWithWhereUniqueWithoutWorkoutSessionInput | WorkoutSessionExerciseUpsertWithWhereUniqueWithoutWorkoutSessionInput[]
    createMany?: WorkoutSessionExerciseCreateManyWorkoutSessionInputEnvelope
    set?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
    disconnect?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
    delete?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
    connect?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
    update?: WorkoutSessionExerciseUpdateWithWhereUniqueWithoutWorkoutSessionInput | WorkoutSessionExerciseUpdateWithWhereUniqueWithoutWorkoutSessionInput[]
    updateMany?: WorkoutSessionExerciseUpdateManyWithWhereWithoutWorkoutSessionInput | WorkoutSessionExerciseUpdateManyWithWhereWithoutWorkoutSessionInput[]
    deleteMany?: WorkoutSessionExerciseScalarWhereInput | WorkoutSessionExerciseScalarWhereInput[]
  }

  export type WorkoutSessionExerciseUncheckedUpdateManyWithoutWorkoutSessionNestedInput = {
    create?: XOR<WorkoutSessionExerciseCreateWithoutWorkoutSessionInput, WorkoutSessionExerciseUncheckedCreateWithoutWorkoutSessionInput> | WorkoutSessionExerciseCreateWithoutWorkoutSessionInput[] | WorkoutSessionExerciseUncheckedCreateWithoutWorkoutSessionInput[]
    connectOrCreate?: WorkoutSessionExerciseCreateOrConnectWithoutWorkoutSessionInput | WorkoutSessionExerciseCreateOrConnectWithoutWorkoutSessionInput[]
    upsert?: WorkoutSessionExerciseUpsertWithWhereUniqueWithoutWorkoutSessionInput | WorkoutSessionExerciseUpsertWithWhereUniqueWithoutWorkoutSessionInput[]
    createMany?: WorkoutSessionExerciseCreateManyWorkoutSessionInputEnvelope
    set?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
    disconnect?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
    delete?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
    connect?: WorkoutSessionExerciseWhereUniqueInput | WorkoutSessionExerciseWhereUniqueInput[]
    update?: WorkoutSessionExerciseUpdateWithWhereUniqueWithoutWorkoutSessionInput | WorkoutSessionExerciseUpdateWithWhereUniqueWithoutWorkoutSessionInput[]
    updateMany?: WorkoutSessionExerciseUpdateManyWithWhereWithoutWorkoutSessionInput | WorkoutSessionExerciseUpdateManyWithWhereWithoutWorkoutSessionInput[]
    deleteMany?: WorkoutSessionExerciseScalarWhereInput | WorkoutSessionExerciseScalarWhereInput[]
  }

  export type WorkoutSessionCreateNestedOneWithoutExercisesInput = {
    create?: XOR<WorkoutSessionCreateWithoutExercisesInput, WorkoutSessionUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: WorkoutSessionCreateOrConnectWithoutExercisesInput
    connect?: WorkoutSessionWhereUniqueInput
  }

  export type ExerciseCreateNestedOneWithoutWorkoutSessionExercisesInput = {
    create?: XOR<ExerciseCreateWithoutWorkoutSessionExercisesInput, ExerciseUncheckedCreateWithoutWorkoutSessionExercisesInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutWorkoutSessionExercisesInput
    connect?: ExerciseWhereUniqueInput
  }

  export type WorkoutSessionSetCreateNestedManyWithoutWorkoutSessionExerciseInput = {
    create?: XOR<WorkoutSessionSetCreateWithoutWorkoutSessionExerciseInput, WorkoutSessionSetUncheckedCreateWithoutWorkoutSessionExerciseInput> | WorkoutSessionSetCreateWithoutWorkoutSessionExerciseInput[] | WorkoutSessionSetUncheckedCreateWithoutWorkoutSessionExerciseInput[]
    connectOrCreate?: WorkoutSessionSetCreateOrConnectWithoutWorkoutSessionExerciseInput | WorkoutSessionSetCreateOrConnectWithoutWorkoutSessionExerciseInput[]
    createMany?: WorkoutSessionSetCreateManyWorkoutSessionExerciseInputEnvelope
    connect?: WorkoutSessionSetWhereUniqueInput | WorkoutSessionSetWhereUniqueInput[]
  }

  export type WorkoutSessionSetUncheckedCreateNestedManyWithoutWorkoutSessionExerciseInput = {
    create?: XOR<WorkoutSessionSetCreateWithoutWorkoutSessionExerciseInput, WorkoutSessionSetUncheckedCreateWithoutWorkoutSessionExerciseInput> | WorkoutSessionSetCreateWithoutWorkoutSessionExerciseInput[] | WorkoutSessionSetUncheckedCreateWithoutWorkoutSessionExerciseInput[]
    connectOrCreate?: WorkoutSessionSetCreateOrConnectWithoutWorkoutSessionExerciseInput | WorkoutSessionSetCreateOrConnectWithoutWorkoutSessionExerciseInput[]
    createMany?: WorkoutSessionSetCreateManyWorkoutSessionExerciseInputEnvelope
    connect?: WorkoutSessionSetWhereUniqueInput | WorkoutSessionSetWhereUniqueInput[]
  }

  export type WorkoutSessionUpdateOneRequiredWithoutExercisesNestedInput = {
    create?: XOR<WorkoutSessionCreateWithoutExercisesInput, WorkoutSessionUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: WorkoutSessionCreateOrConnectWithoutExercisesInput
    upsert?: WorkoutSessionUpsertWithoutExercisesInput
    connect?: WorkoutSessionWhereUniqueInput
    update?: XOR<XOR<WorkoutSessionUpdateToOneWithWhereWithoutExercisesInput, WorkoutSessionUpdateWithoutExercisesInput>, WorkoutSessionUncheckedUpdateWithoutExercisesInput>
  }

  export type ExerciseUpdateOneRequiredWithoutWorkoutSessionExercisesNestedInput = {
    create?: XOR<ExerciseCreateWithoutWorkoutSessionExercisesInput, ExerciseUncheckedCreateWithoutWorkoutSessionExercisesInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutWorkoutSessionExercisesInput
    upsert?: ExerciseUpsertWithoutWorkoutSessionExercisesInput
    connect?: ExerciseWhereUniqueInput
    update?: XOR<XOR<ExerciseUpdateToOneWithWhereWithoutWorkoutSessionExercisesInput, ExerciseUpdateWithoutWorkoutSessionExercisesInput>, ExerciseUncheckedUpdateWithoutWorkoutSessionExercisesInput>
  }

  export type WorkoutSessionSetUpdateManyWithoutWorkoutSessionExerciseNestedInput = {
    create?: XOR<WorkoutSessionSetCreateWithoutWorkoutSessionExerciseInput, WorkoutSessionSetUncheckedCreateWithoutWorkoutSessionExerciseInput> | WorkoutSessionSetCreateWithoutWorkoutSessionExerciseInput[] | WorkoutSessionSetUncheckedCreateWithoutWorkoutSessionExerciseInput[]
    connectOrCreate?: WorkoutSessionSetCreateOrConnectWithoutWorkoutSessionExerciseInput | WorkoutSessionSetCreateOrConnectWithoutWorkoutSessionExerciseInput[]
    upsert?: WorkoutSessionSetUpsertWithWhereUniqueWithoutWorkoutSessionExerciseInput | WorkoutSessionSetUpsertWithWhereUniqueWithoutWorkoutSessionExerciseInput[]
    createMany?: WorkoutSessionSetCreateManyWorkoutSessionExerciseInputEnvelope
    set?: WorkoutSessionSetWhereUniqueInput | WorkoutSessionSetWhereUniqueInput[]
    disconnect?: WorkoutSessionSetWhereUniqueInput | WorkoutSessionSetWhereUniqueInput[]
    delete?: WorkoutSessionSetWhereUniqueInput | WorkoutSessionSetWhereUniqueInput[]
    connect?: WorkoutSessionSetWhereUniqueInput | WorkoutSessionSetWhereUniqueInput[]
    update?: WorkoutSessionSetUpdateWithWhereUniqueWithoutWorkoutSessionExerciseInput | WorkoutSessionSetUpdateWithWhereUniqueWithoutWorkoutSessionExerciseInput[]
    updateMany?: WorkoutSessionSetUpdateManyWithWhereWithoutWorkoutSessionExerciseInput | WorkoutSessionSetUpdateManyWithWhereWithoutWorkoutSessionExerciseInput[]
    deleteMany?: WorkoutSessionSetScalarWhereInput | WorkoutSessionSetScalarWhereInput[]
  }

  export type WorkoutSessionSetUncheckedUpdateManyWithoutWorkoutSessionExerciseNestedInput = {
    create?: XOR<WorkoutSessionSetCreateWithoutWorkoutSessionExerciseInput, WorkoutSessionSetUncheckedCreateWithoutWorkoutSessionExerciseInput> | WorkoutSessionSetCreateWithoutWorkoutSessionExerciseInput[] | WorkoutSessionSetUncheckedCreateWithoutWorkoutSessionExerciseInput[]
    connectOrCreate?: WorkoutSessionSetCreateOrConnectWithoutWorkoutSessionExerciseInput | WorkoutSessionSetCreateOrConnectWithoutWorkoutSessionExerciseInput[]
    upsert?: WorkoutSessionSetUpsertWithWhereUniqueWithoutWorkoutSessionExerciseInput | WorkoutSessionSetUpsertWithWhereUniqueWithoutWorkoutSessionExerciseInput[]
    createMany?: WorkoutSessionSetCreateManyWorkoutSessionExerciseInputEnvelope
    set?: WorkoutSessionSetWhereUniqueInput | WorkoutSessionSetWhereUniqueInput[]
    disconnect?: WorkoutSessionSetWhereUniqueInput | WorkoutSessionSetWhereUniqueInput[]
    delete?: WorkoutSessionSetWhereUniqueInput | WorkoutSessionSetWhereUniqueInput[]
    connect?: WorkoutSessionSetWhereUniqueInput | WorkoutSessionSetWhereUniqueInput[]
    update?: WorkoutSessionSetUpdateWithWhereUniqueWithoutWorkoutSessionExerciseInput | WorkoutSessionSetUpdateWithWhereUniqueWithoutWorkoutSessionExerciseInput[]
    updateMany?: WorkoutSessionSetUpdateManyWithWhereWithoutWorkoutSessionExerciseInput | WorkoutSessionSetUpdateManyWithWhereWithoutWorkoutSessionExerciseInput[]
    deleteMany?: WorkoutSessionSetScalarWhereInput | WorkoutSessionSetScalarWhereInput[]
  }

  export type WorkoutSessionExerciseCreateNestedOneWithoutSetsInput = {
    create?: XOR<WorkoutSessionExerciseCreateWithoutSetsInput, WorkoutSessionExerciseUncheckedCreateWithoutSetsInput>
    connectOrCreate?: WorkoutSessionExerciseCreateOrConnectWithoutSetsInput
    connect?: WorkoutSessionExerciseWhereUniqueInput
  }

  export type WorkoutSessionExerciseUpdateOneRequiredWithoutSetsNestedInput = {
    create?: XOR<WorkoutSessionExerciseCreateWithoutSetsInput, WorkoutSessionExerciseUncheckedCreateWithoutSetsInput>
    connectOrCreate?: WorkoutSessionExerciseCreateOrConnectWithoutSetsInput
    upsert?: WorkoutSessionExerciseUpsertWithoutSetsInput
    connect?: WorkoutSessionExerciseWhereUniqueInput
    update?: XOR<XOR<WorkoutSessionExerciseUpdateToOneWithWhereWithoutSetsInput, WorkoutSessionExerciseUpdateWithoutSetsInput>, WorkoutSessionExerciseUncheckedUpdateWithoutSetsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type WorkoutTemplateCreateWithoutUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    exercises?: WorkoutTemplateExerciseCreateNestedManyWithoutWorkoutTemplateInput
    workoutSessions?: WorkoutSessionCreateNestedManyWithoutWorkoutTemplateInput
  }

  export type WorkoutTemplateUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    exercises?: WorkoutTemplateExerciseUncheckedCreateNestedManyWithoutWorkoutTemplateInput
    workoutSessions?: WorkoutSessionUncheckedCreateNestedManyWithoutWorkoutTemplateInput
  }

  export type WorkoutTemplateCreateOrConnectWithoutUserInput = {
    where: WorkoutTemplateWhereUniqueInput
    create: XOR<WorkoutTemplateCreateWithoutUserInput, WorkoutTemplateUncheckedCreateWithoutUserInput>
  }

  export type WorkoutTemplateCreateManyUserInputEnvelope = {
    data: WorkoutTemplateCreateManyUserInput | WorkoutTemplateCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutSessionCreateWithoutUserInput = {
    id?: string
    startTime: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
    workoutTemplate?: WorkoutTemplateCreateNestedOneWithoutWorkoutSessionsInput
    exercises?: WorkoutSessionExerciseCreateNestedManyWithoutWorkoutSessionInput
  }

  export type WorkoutSessionUncheckedCreateWithoutUserInput = {
    id?: string
    workoutTemplateId?: string | null
    startTime: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
    exercises?: WorkoutSessionExerciseUncheckedCreateNestedManyWithoutWorkoutSessionInput
  }

  export type WorkoutSessionCreateOrConnectWithoutUserInput = {
    where: WorkoutSessionWhereUniqueInput
    create: XOR<WorkoutSessionCreateWithoutUserInput, WorkoutSessionUncheckedCreateWithoutUserInput>
  }

  export type WorkoutSessionCreateManyUserInputEnvelope = {
    data: WorkoutSessionCreateManyUserInput | WorkoutSessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutTemplateUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkoutTemplateWhereUniqueInput
    update: XOR<WorkoutTemplateUpdateWithoutUserInput, WorkoutTemplateUncheckedUpdateWithoutUserInput>
    create: XOR<WorkoutTemplateCreateWithoutUserInput, WorkoutTemplateUncheckedCreateWithoutUserInput>
  }

  export type WorkoutTemplateUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkoutTemplateWhereUniqueInput
    data: XOR<WorkoutTemplateUpdateWithoutUserInput, WorkoutTemplateUncheckedUpdateWithoutUserInput>
  }

  export type WorkoutTemplateUpdateManyWithWhereWithoutUserInput = {
    where: WorkoutTemplateScalarWhereInput
    data: XOR<WorkoutTemplateUpdateManyMutationInput, WorkoutTemplateUncheckedUpdateManyWithoutUserInput>
  }

  export type WorkoutTemplateScalarWhereInput = {
    AND?: WorkoutTemplateScalarWhereInput | WorkoutTemplateScalarWhereInput[]
    OR?: WorkoutTemplateScalarWhereInput[]
    NOT?: WorkoutTemplateScalarWhereInput | WorkoutTemplateScalarWhereInput[]
    id?: StringFilter<"WorkoutTemplate"> | string
    name?: StringFilter<"WorkoutTemplate"> | string
    userId?: StringFilter<"WorkoutTemplate"> | string
    createdAt?: DateTimeFilter<"WorkoutTemplate"> | Date | string
  }

  export type WorkoutSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkoutSessionWhereUniqueInput
    update: XOR<WorkoutSessionUpdateWithoutUserInput, WorkoutSessionUncheckedUpdateWithoutUserInput>
    create: XOR<WorkoutSessionCreateWithoutUserInput, WorkoutSessionUncheckedCreateWithoutUserInput>
  }

  export type WorkoutSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkoutSessionWhereUniqueInput
    data: XOR<WorkoutSessionUpdateWithoutUserInput, WorkoutSessionUncheckedUpdateWithoutUserInput>
  }

  export type WorkoutSessionUpdateManyWithWhereWithoutUserInput = {
    where: WorkoutSessionScalarWhereInput
    data: XOR<WorkoutSessionUpdateManyMutationInput, WorkoutSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type WorkoutSessionScalarWhereInput = {
    AND?: WorkoutSessionScalarWhereInput | WorkoutSessionScalarWhereInput[]
    OR?: WorkoutSessionScalarWhereInput[]
    NOT?: WorkoutSessionScalarWhereInput | WorkoutSessionScalarWhereInput[]
    id?: StringFilter<"WorkoutSession"> | string
    userId?: StringFilter<"WorkoutSession"> | string
    workoutTemplateId?: StringNullableFilter<"WorkoutSession"> | string | null
    startTime?: DateTimeFilter<"WorkoutSession"> | Date | string
    endTime?: DateTimeNullableFilter<"WorkoutSession"> | Date | string | null
    createdAt?: DateTimeFilter<"WorkoutSession"> | Date | string
  }

  export type WorkoutTemplateExerciseCreateWithoutExerciseInput = {
    id?: string
    createdAt?: Date | string
    workoutTemplate: WorkoutTemplateCreateNestedOneWithoutExercisesInput
    sets?: WorkoutTemplateSetCreateNestedManyWithoutWorkoutTemplateExerciseInput
  }

  export type WorkoutTemplateExerciseUncheckedCreateWithoutExerciseInput = {
    id?: string
    workoutTemplateId: string
    createdAt?: Date | string
    sets?: WorkoutTemplateSetUncheckedCreateNestedManyWithoutWorkoutTemplateExerciseInput
  }

  export type WorkoutTemplateExerciseCreateOrConnectWithoutExerciseInput = {
    where: WorkoutTemplateExerciseWhereUniqueInput
    create: XOR<WorkoutTemplateExerciseCreateWithoutExerciseInput, WorkoutTemplateExerciseUncheckedCreateWithoutExerciseInput>
  }

  export type WorkoutTemplateExerciseCreateManyExerciseInputEnvelope = {
    data: WorkoutTemplateExerciseCreateManyExerciseInput | WorkoutTemplateExerciseCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutSessionExerciseCreateWithoutExerciseInput = {
    id?: string
    createdAt?: Date | string
    workoutSession: WorkoutSessionCreateNestedOneWithoutExercisesInput
    sets?: WorkoutSessionSetCreateNestedManyWithoutWorkoutSessionExerciseInput
  }

  export type WorkoutSessionExerciseUncheckedCreateWithoutExerciseInput = {
    id?: string
    workoutSessionId: string
    createdAt?: Date | string
    sets?: WorkoutSessionSetUncheckedCreateNestedManyWithoutWorkoutSessionExerciseInput
  }

  export type WorkoutSessionExerciseCreateOrConnectWithoutExerciseInput = {
    where: WorkoutSessionExerciseWhereUniqueInput
    create: XOR<WorkoutSessionExerciseCreateWithoutExerciseInput, WorkoutSessionExerciseUncheckedCreateWithoutExerciseInput>
  }

  export type WorkoutSessionExerciseCreateManyExerciseInputEnvelope = {
    data: WorkoutSessionExerciseCreateManyExerciseInput | WorkoutSessionExerciseCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutTemplateExerciseUpsertWithWhereUniqueWithoutExerciseInput = {
    where: WorkoutTemplateExerciseWhereUniqueInput
    update: XOR<WorkoutTemplateExerciseUpdateWithoutExerciseInput, WorkoutTemplateExerciseUncheckedUpdateWithoutExerciseInput>
    create: XOR<WorkoutTemplateExerciseCreateWithoutExerciseInput, WorkoutTemplateExerciseUncheckedCreateWithoutExerciseInput>
  }

  export type WorkoutTemplateExerciseUpdateWithWhereUniqueWithoutExerciseInput = {
    where: WorkoutTemplateExerciseWhereUniqueInput
    data: XOR<WorkoutTemplateExerciseUpdateWithoutExerciseInput, WorkoutTemplateExerciseUncheckedUpdateWithoutExerciseInput>
  }

  export type WorkoutTemplateExerciseUpdateManyWithWhereWithoutExerciseInput = {
    where: WorkoutTemplateExerciseScalarWhereInput
    data: XOR<WorkoutTemplateExerciseUpdateManyMutationInput, WorkoutTemplateExerciseUncheckedUpdateManyWithoutExerciseInput>
  }

  export type WorkoutTemplateExerciseScalarWhereInput = {
    AND?: WorkoutTemplateExerciseScalarWhereInput | WorkoutTemplateExerciseScalarWhereInput[]
    OR?: WorkoutTemplateExerciseScalarWhereInput[]
    NOT?: WorkoutTemplateExerciseScalarWhereInput | WorkoutTemplateExerciseScalarWhereInput[]
    id?: StringFilter<"WorkoutTemplateExercise"> | string
    workoutTemplateId?: StringFilter<"WorkoutTemplateExercise"> | string
    exerciseId?: StringFilter<"WorkoutTemplateExercise"> | string
    createdAt?: DateTimeFilter<"WorkoutTemplateExercise"> | Date | string
  }

  export type WorkoutSessionExerciseUpsertWithWhereUniqueWithoutExerciseInput = {
    where: WorkoutSessionExerciseWhereUniqueInput
    update: XOR<WorkoutSessionExerciseUpdateWithoutExerciseInput, WorkoutSessionExerciseUncheckedUpdateWithoutExerciseInput>
    create: XOR<WorkoutSessionExerciseCreateWithoutExerciseInput, WorkoutSessionExerciseUncheckedCreateWithoutExerciseInput>
  }

  export type WorkoutSessionExerciseUpdateWithWhereUniqueWithoutExerciseInput = {
    where: WorkoutSessionExerciseWhereUniqueInput
    data: XOR<WorkoutSessionExerciseUpdateWithoutExerciseInput, WorkoutSessionExerciseUncheckedUpdateWithoutExerciseInput>
  }

  export type WorkoutSessionExerciseUpdateManyWithWhereWithoutExerciseInput = {
    where: WorkoutSessionExerciseScalarWhereInput
    data: XOR<WorkoutSessionExerciseUpdateManyMutationInput, WorkoutSessionExerciseUncheckedUpdateManyWithoutExerciseInput>
  }

  export type WorkoutSessionExerciseScalarWhereInput = {
    AND?: WorkoutSessionExerciseScalarWhereInput | WorkoutSessionExerciseScalarWhereInput[]
    OR?: WorkoutSessionExerciseScalarWhereInput[]
    NOT?: WorkoutSessionExerciseScalarWhereInput | WorkoutSessionExerciseScalarWhereInput[]
    id?: StringFilter<"WorkoutSessionExercise"> | string
    workoutSessionId?: StringFilter<"WorkoutSessionExercise"> | string
    exerciseId?: StringFilter<"WorkoutSessionExercise"> | string
    createdAt?: DateTimeFilter<"WorkoutSessionExercise"> | Date | string
  }

  export type UserCreateWithoutWorkoutTemplatesInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    workoutSessions?: WorkoutSessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWorkoutTemplatesInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    workoutSessions?: WorkoutSessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkoutTemplatesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkoutTemplatesInput, UserUncheckedCreateWithoutWorkoutTemplatesInput>
  }

  export type WorkoutTemplateExerciseCreateWithoutWorkoutTemplateInput = {
    id?: string
    createdAt?: Date | string
    exercise: ExerciseCreateNestedOneWithoutWorkoutTemplateExercisesInput
    sets?: WorkoutTemplateSetCreateNestedManyWithoutWorkoutTemplateExerciseInput
  }

  export type WorkoutTemplateExerciseUncheckedCreateWithoutWorkoutTemplateInput = {
    id?: string
    exerciseId: string
    createdAt?: Date | string
    sets?: WorkoutTemplateSetUncheckedCreateNestedManyWithoutWorkoutTemplateExerciseInput
  }

  export type WorkoutTemplateExerciseCreateOrConnectWithoutWorkoutTemplateInput = {
    where: WorkoutTemplateExerciseWhereUniqueInput
    create: XOR<WorkoutTemplateExerciseCreateWithoutWorkoutTemplateInput, WorkoutTemplateExerciseUncheckedCreateWithoutWorkoutTemplateInput>
  }

  export type WorkoutTemplateExerciseCreateManyWorkoutTemplateInputEnvelope = {
    data: WorkoutTemplateExerciseCreateManyWorkoutTemplateInput | WorkoutTemplateExerciseCreateManyWorkoutTemplateInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutSessionCreateWithoutWorkoutTemplateInput = {
    id?: string
    startTime: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutWorkoutSessionsInput
    exercises?: WorkoutSessionExerciseCreateNestedManyWithoutWorkoutSessionInput
  }

  export type WorkoutSessionUncheckedCreateWithoutWorkoutTemplateInput = {
    id?: string
    userId: string
    startTime: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
    exercises?: WorkoutSessionExerciseUncheckedCreateNestedManyWithoutWorkoutSessionInput
  }

  export type WorkoutSessionCreateOrConnectWithoutWorkoutTemplateInput = {
    where: WorkoutSessionWhereUniqueInput
    create: XOR<WorkoutSessionCreateWithoutWorkoutTemplateInput, WorkoutSessionUncheckedCreateWithoutWorkoutTemplateInput>
  }

  export type WorkoutSessionCreateManyWorkoutTemplateInputEnvelope = {
    data: WorkoutSessionCreateManyWorkoutTemplateInput | WorkoutSessionCreateManyWorkoutTemplateInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutWorkoutTemplatesInput = {
    update: XOR<UserUpdateWithoutWorkoutTemplatesInput, UserUncheckedUpdateWithoutWorkoutTemplatesInput>
    create: XOR<UserCreateWithoutWorkoutTemplatesInput, UserUncheckedCreateWithoutWorkoutTemplatesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkoutTemplatesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkoutTemplatesInput, UserUncheckedUpdateWithoutWorkoutTemplatesInput>
  }

  export type UserUpdateWithoutWorkoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutSessions?: WorkoutSessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutSessions?: WorkoutSessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WorkoutTemplateExerciseUpsertWithWhereUniqueWithoutWorkoutTemplateInput = {
    where: WorkoutTemplateExerciseWhereUniqueInput
    update: XOR<WorkoutTemplateExerciseUpdateWithoutWorkoutTemplateInput, WorkoutTemplateExerciseUncheckedUpdateWithoutWorkoutTemplateInput>
    create: XOR<WorkoutTemplateExerciseCreateWithoutWorkoutTemplateInput, WorkoutTemplateExerciseUncheckedCreateWithoutWorkoutTemplateInput>
  }

  export type WorkoutTemplateExerciseUpdateWithWhereUniqueWithoutWorkoutTemplateInput = {
    where: WorkoutTemplateExerciseWhereUniqueInput
    data: XOR<WorkoutTemplateExerciseUpdateWithoutWorkoutTemplateInput, WorkoutTemplateExerciseUncheckedUpdateWithoutWorkoutTemplateInput>
  }

  export type WorkoutTemplateExerciseUpdateManyWithWhereWithoutWorkoutTemplateInput = {
    where: WorkoutTemplateExerciseScalarWhereInput
    data: XOR<WorkoutTemplateExerciseUpdateManyMutationInput, WorkoutTemplateExerciseUncheckedUpdateManyWithoutWorkoutTemplateInput>
  }

  export type WorkoutSessionUpsertWithWhereUniqueWithoutWorkoutTemplateInput = {
    where: WorkoutSessionWhereUniqueInput
    update: XOR<WorkoutSessionUpdateWithoutWorkoutTemplateInput, WorkoutSessionUncheckedUpdateWithoutWorkoutTemplateInput>
    create: XOR<WorkoutSessionCreateWithoutWorkoutTemplateInput, WorkoutSessionUncheckedCreateWithoutWorkoutTemplateInput>
  }

  export type WorkoutSessionUpdateWithWhereUniqueWithoutWorkoutTemplateInput = {
    where: WorkoutSessionWhereUniqueInput
    data: XOR<WorkoutSessionUpdateWithoutWorkoutTemplateInput, WorkoutSessionUncheckedUpdateWithoutWorkoutTemplateInput>
  }

  export type WorkoutSessionUpdateManyWithWhereWithoutWorkoutTemplateInput = {
    where: WorkoutSessionScalarWhereInput
    data: XOR<WorkoutSessionUpdateManyMutationInput, WorkoutSessionUncheckedUpdateManyWithoutWorkoutTemplateInput>
  }

  export type WorkoutTemplateCreateWithoutExercisesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutWorkoutTemplatesInput
    workoutSessions?: WorkoutSessionCreateNestedManyWithoutWorkoutTemplateInput
  }

  export type WorkoutTemplateUncheckedCreateWithoutExercisesInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    workoutSessions?: WorkoutSessionUncheckedCreateNestedManyWithoutWorkoutTemplateInput
  }

  export type WorkoutTemplateCreateOrConnectWithoutExercisesInput = {
    where: WorkoutTemplateWhereUniqueInput
    create: XOR<WorkoutTemplateCreateWithoutExercisesInput, WorkoutTemplateUncheckedCreateWithoutExercisesInput>
  }

  export type ExerciseCreateWithoutWorkoutTemplateExercisesInput = {
    id?: string
    name: string
    category: string
    force?: string | null
    level?: string | null
    mechanic?: string | null
    equipment?: string | null
    primaryMuscles?: ExerciseCreateprimaryMusclesInput | string[]
    secondaryMuscles?: ExerciseCreatesecondaryMusclesInput | string[]
    instructions?: ExerciseCreateinstructionsInput | string[]
    image?: string | null
    workoutSessionExercises?: WorkoutSessionExerciseCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateWithoutWorkoutTemplateExercisesInput = {
    id?: string
    name: string
    category: string
    force?: string | null
    level?: string | null
    mechanic?: string | null
    equipment?: string | null
    primaryMuscles?: ExerciseCreateprimaryMusclesInput | string[]
    secondaryMuscles?: ExerciseCreatesecondaryMusclesInput | string[]
    instructions?: ExerciseCreateinstructionsInput | string[]
    image?: string | null
    workoutSessionExercises?: WorkoutSessionExerciseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseCreateOrConnectWithoutWorkoutTemplateExercisesInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutWorkoutTemplateExercisesInput, ExerciseUncheckedCreateWithoutWorkoutTemplateExercisesInput>
  }

  export type WorkoutTemplateSetCreateWithoutWorkoutTemplateExerciseInput = {
    id?: string
    order: number
    reps: number
    weight: number
    createdAt?: Date | string
  }

  export type WorkoutTemplateSetUncheckedCreateWithoutWorkoutTemplateExerciseInput = {
    id?: string
    order: number
    reps: number
    weight: number
    createdAt?: Date | string
  }

  export type WorkoutTemplateSetCreateOrConnectWithoutWorkoutTemplateExerciseInput = {
    where: WorkoutTemplateSetWhereUniqueInput
    create: XOR<WorkoutTemplateSetCreateWithoutWorkoutTemplateExerciseInput, WorkoutTemplateSetUncheckedCreateWithoutWorkoutTemplateExerciseInput>
  }

  export type WorkoutTemplateSetCreateManyWorkoutTemplateExerciseInputEnvelope = {
    data: WorkoutTemplateSetCreateManyWorkoutTemplateExerciseInput | WorkoutTemplateSetCreateManyWorkoutTemplateExerciseInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutTemplateUpsertWithoutExercisesInput = {
    update: XOR<WorkoutTemplateUpdateWithoutExercisesInput, WorkoutTemplateUncheckedUpdateWithoutExercisesInput>
    create: XOR<WorkoutTemplateCreateWithoutExercisesInput, WorkoutTemplateUncheckedCreateWithoutExercisesInput>
    where?: WorkoutTemplateWhereInput
  }

  export type WorkoutTemplateUpdateToOneWithWhereWithoutExercisesInput = {
    where?: WorkoutTemplateWhereInput
    data: XOR<WorkoutTemplateUpdateWithoutExercisesInput, WorkoutTemplateUncheckedUpdateWithoutExercisesInput>
  }

  export type WorkoutTemplateUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWorkoutTemplatesNestedInput
    workoutSessions?: WorkoutSessionUpdateManyWithoutWorkoutTemplateNestedInput
  }

  export type WorkoutTemplateUncheckedUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutSessions?: WorkoutSessionUncheckedUpdateManyWithoutWorkoutTemplateNestedInput
  }

  export type ExerciseUpsertWithoutWorkoutTemplateExercisesInput = {
    update: XOR<ExerciseUpdateWithoutWorkoutTemplateExercisesInput, ExerciseUncheckedUpdateWithoutWorkoutTemplateExercisesInput>
    create: XOR<ExerciseCreateWithoutWorkoutTemplateExercisesInput, ExerciseUncheckedCreateWithoutWorkoutTemplateExercisesInput>
    where?: ExerciseWhereInput
  }

  export type ExerciseUpdateToOneWithWhereWithoutWorkoutTemplateExercisesInput = {
    where?: ExerciseWhereInput
    data: XOR<ExerciseUpdateWithoutWorkoutTemplateExercisesInput, ExerciseUncheckedUpdateWithoutWorkoutTemplateExercisesInput>
  }

  export type ExerciseUpdateWithoutWorkoutTemplateExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    force?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    mechanic?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    primaryMuscles?: ExerciseUpdateprimaryMusclesInput | string[]
    secondaryMuscles?: ExerciseUpdatesecondaryMusclesInput | string[]
    instructions?: ExerciseUpdateinstructionsInput | string[]
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workoutSessionExercises?: WorkoutSessionExerciseUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutWorkoutTemplateExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    force?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    mechanic?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    primaryMuscles?: ExerciseUpdateprimaryMusclesInput | string[]
    secondaryMuscles?: ExerciseUpdatesecondaryMusclesInput | string[]
    instructions?: ExerciseUpdateinstructionsInput | string[]
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workoutSessionExercises?: WorkoutSessionExerciseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type WorkoutTemplateSetUpsertWithWhereUniqueWithoutWorkoutTemplateExerciseInput = {
    where: WorkoutTemplateSetWhereUniqueInput
    update: XOR<WorkoutTemplateSetUpdateWithoutWorkoutTemplateExerciseInput, WorkoutTemplateSetUncheckedUpdateWithoutWorkoutTemplateExerciseInput>
    create: XOR<WorkoutTemplateSetCreateWithoutWorkoutTemplateExerciseInput, WorkoutTemplateSetUncheckedCreateWithoutWorkoutTemplateExerciseInput>
  }

  export type WorkoutTemplateSetUpdateWithWhereUniqueWithoutWorkoutTemplateExerciseInput = {
    where: WorkoutTemplateSetWhereUniqueInput
    data: XOR<WorkoutTemplateSetUpdateWithoutWorkoutTemplateExerciseInput, WorkoutTemplateSetUncheckedUpdateWithoutWorkoutTemplateExerciseInput>
  }

  export type WorkoutTemplateSetUpdateManyWithWhereWithoutWorkoutTemplateExerciseInput = {
    where: WorkoutTemplateSetScalarWhereInput
    data: XOR<WorkoutTemplateSetUpdateManyMutationInput, WorkoutTemplateSetUncheckedUpdateManyWithoutWorkoutTemplateExerciseInput>
  }

  export type WorkoutTemplateSetScalarWhereInput = {
    AND?: WorkoutTemplateSetScalarWhereInput | WorkoutTemplateSetScalarWhereInput[]
    OR?: WorkoutTemplateSetScalarWhereInput[]
    NOT?: WorkoutTemplateSetScalarWhereInput | WorkoutTemplateSetScalarWhereInput[]
    id?: StringFilter<"WorkoutTemplateSet"> | string
    workoutTemplateExerciseId?: StringFilter<"WorkoutTemplateSet"> | string
    order?: IntFilter<"WorkoutTemplateSet"> | number
    reps?: IntFilter<"WorkoutTemplateSet"> | number
    weight?: FloatFilter<"WorkoutTemplateSet"> | number
    createdAt?: DateTimeFilter<"WorkoutTemplateSet"> | Date | string
  }

  export type WorkoutTemplateExerciseCreateWithoutSetsInput = {
    id?: string
    createdAt?: Date | string
    workoutTemplate: WorkoutTemplateCreateNestedOneWithoutExercisesInput
    exercise: ExerciseCreateNestedOneWithoutWorkoutTemplateExercisesInput
  }

  export type WorkoutTemplateExerciseUncheckedCreateWithoutSetsInput = {
    id?: string
    workoutTemplateId: string
    exerciseId: string
    createdAt?: Date | string
  }

  export type WorkoutTemplateExerciseCreateOrConnectWithoutSetsInput = {
    where: WorkoutTemplateExerciseWhereUniqueInput
    create: XOR<WorkoutTemplateExerciseCreateWithoutSetsInput, WorkoutTemplateExerciseUncheckedCreateWithoutSetsInput>
  }

  export type WorkoutTemplateExerciseUpsertWithoutSetsInput = {
    update: XOR<WorkoutTemplateExerciseUpdateWithoutSetsInput, WorkoutTemplateExerciseUncheckedUpdateWithoutSetsInput>
    create: XOR<WorkoutTemplateExerciseCreateWithoutSetsInput, WorkoutTemplateExerciseUncheckedCreateWithoutSetsInput>
    where?: WorkoutTemplateExerciseWhereInput
  }

  export type WorkoutTemplateExerciseUpdateToOneWithWhereWithoutSetsInput = {
    where?: WorkoutTemplateExerciseWhereInput
    data: XOR<WorkoutTemplateExerciseUpdateWithoutSetsInput, WorkoutTemplateExerciseUncheckedUpdateWithoutSetsInput>
  }

  export type WorkoutTemplateExerciseUpdateWithoutSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutTemplate?: WorkoutTemplateUpdateOneRequiredWithoutExercisesNestedInput
    exercise?: ExerciseUpdateOneRequiredWithoutWorkoutTemplateExercisesNestedInput
  }

  export type WorkoutTemplateExerciseUncheckedUpdateWithoutSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutTemplateId?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutWorkoutSessionsInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    workoutTemplates?: WorkoutTemplateCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWorkoutSessionsInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    workoutTemplates?: WorkoutTemplateUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkoutSessionsInput, UserUncheckedCreateWithoutWorkoutSessionsInput>
  }

  export type WorkoutTemplateCreateWithoutWorkoutSessionsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutWorkoutTemplatesInput
    exercises?: WorkoutTemplateExerciseCreateNestedManyWithoutWorkoutTemplateInput
  }

  export type WorkoutTemplateUncheckedCreateWithoutWorkoutSessionsInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    exercises?: WorkoutTemplateExerciseUncheckedCreateNestedManyWithoutWorkoutTemplateInput
  }

  export type WorkoutTemplateCreateOrConnectWithoutWorkoutSessionsInput = {
    where: WorkoutTemplateWhereUniqueInput
    create: XOR<WorkoutTemplateCreateWithoutWorkoutSessionsInput, WorkoutTemplateUncheckedCreateWithoutWorkoutSessionsInput>
  }

  export type WorkoutSessionExerciseCreateWithoutWorkoutSessionInput = {
    id?: string
    createdAt?: Date | string
    exercise: ExerciseCreateNestedOneWithoutWorkoutSessionExercisesInput
    sets?: WorkoutSessionSetCreateNestedManyWithoutWorkoutSessionExerciseInput
  }

  export type WorkoutSessionExerciseUncheckedCreateWithoutWorkoutSessionInput = {
    id?: string
    exerciseId: string
    createdAt?: Date | string
    sets?: WorkoutSessionSetUncheckedCreateNestedManyWithoutWorkoutSessionExerciseInput
  }

  export type WorkoutSessionExerciseCreateOrConnectWithoutWorkoutSessionInput = {
    where: WorkoutSessionExerciseWhereUniqueInput
    create: XOR<WorkoutSessionExerciseCreateWithoutWorkoutSessionInput, WorkoutSessionExerciseUncheckedCreateWithoutWorkoutSessionInput>
  }

  export type WorkoutSessionExerciseCreateManyWorkoutSessionInputEnvelope = {
    data: WorkoutSessionExerciseCreateManyWorkoutSessionInput | WorkoutSessionExerciseCreateManyWorkoutSessionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutWorkoutSessionsInput = {
    update: XOR<UserUpdateWithoutWorkoutSessionsInput, UserUncheckedUpdateWithoutWorkoutSessionsInput>
    create: XOR<UserCreateWithoutWorkoutSessionsInput, UserUncheckedCreateWithoutWorkoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkoutSessionsInput, UserUncheckedUpdateWithoutWorkoutSessionsInput>
  }

  export type UserUpdateWithoutWorkoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutTemplates?: WorkoutTemplateUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutTemplates?: WorkoutTemplateUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WorkoutTemplateUpsertWithoutWorkoutSessionsInput = {
    update: XOR<WorkoutTemplateUpdateWithoutWorkoutSessionsInput, WorkoutTemplateUncheckedUpdateWithoutWorkoutSessionsInput>
    create: XOR<WorkoutTemplateCreateWithoutWorkoutSessionsInput, WorkoutTemplateUncheckedCreateWithoutWorkoutSessionsInput>
    where?: WorkoutTemplateWhereInput
  }

  export type WorkoutTemplateUpdateToOneWithWhereWithoutWorkoutSessionsInput = {
    where?: WorkoutTemplateWhereInput
    data: XOR<WorkoutTemplateUpdateWithoutWorkoutSessionsInput, WorkoutTemplateUncheckedUpdateWithoutWorkoutSessionsInput>
  }

  export type WorkoutTemplateUpdateWithoutWorkoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWorkoutTemplatesNestedInput
    exercises?: WorkoutTemplateExerciseUpdateManyWithoutWorkoutTemplateNestedInput
  }

  export type WorkoutTemplateUncheckedUpdateWithoutWorkoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: WorkoutTemplateExerciseUncheckedUpdateManyWithoutWorkoutTemplateNestedInput
  }

  export type WorkoutSessionExerciseUpsertWithWhereUniqueWithoutWorkoutSessionInput = {
    where: WorkoutSessionExerciseWhereUniqueInput
    update: XOR<WorkoutSessionExerciseUpdateWithoutWorkoutSessionInput, WorkoutSessionExerciseUncheckedUpdateWithoutWorkoutSessionInput>
    create: XOR<WorkoutSessionExerciseCreateWithoutWorkoutSessionInput, WorkoutSessionExerciseUncheckedCreateWithoutWorkoutSessionInput>
  }

  export type WorkoutSessionExerciseUpdateWithWhereUniqueWithoutWorkoutSessionInput = {
    where: WorkoutSessionExerciseWhereUniqueInput
    data: XOR<WorkoutSessionExerciseUpdateWithoutWorkoutSessionInput, WorkoutSessionExerciseUncheckedUpdateWithoutWorkoutSessionInput>
  }

  export type WorkoutSessionExerciseUpdateManyWithWhereWithoutWorkoutSessionInput = {
    where: WorkoutSessionExerciseScalarWhereInput
    data: XOR<WorkoutSessionExerciseUpdateManyMutationInput, WorkoutSessionExerciseUncheckedUpdateManyWithoutWorkoutSessionInput>
  }

  export type WorkoutSessionCreateWithoutExercisesInput = {
    id?: string
    startTime: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutWorkoutSessionsInput
    workoutTemplate?: WorkoutTemplateCreateNestedOneWithoutWorkoutSessionsInput
  }

  export type WorkoutSessionUncheckedCreateWithoutExercisesInput = {
    id?: string
    userId: string
    workoutTemplateId?: string | null
    startTime: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type WorkoutSessionCreateOrConnectWithoutExercisesInput = {
    where: WorkoutSessionWhereUniqueInput
    create: XOR<WorkoutSessionCreateWithoutExercisesInput, WorkoutSessionUncheckedCreateWithoutExercisesInput>
  }

  export type ExerciseCreateWithoutWorkoutSessionExercisesInput = {
    id?: string
    name: string
    category: string
    force?: string | null
    level?: string | null
    mechanic?: string | null
    equipment?: string | null
    primaryMuscles?: ExerciseCreateprimaryMusclesInput | string[]
    secondaryMuscles?: ExerciseCreatesecondaryMusclesInput | string[]
    instructions?: ExerciseCreateinstructionsInput | string[]
    image?: string | null
    workoutTemplateExercises?: WorkoutTemplateExerciseCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateWithoutWorkoutSessionExercisesInput = {
    id?: string
    name: string
    category: string
    force?: string | null
    level?: string | null
    mechanic?: string | null
    equipment?: string | null
    primaryMuscles?: ExerciseCreateprimaryMusclesInput | string[]
    secondaryMuscles?: ExerciseCreatesecondaryMusclesInput | string[]
    instructions?: ExerciseCreateinstructionsInput | string[]
    image?: string | null
    workoutTemplateExercises?: WorkoutTemplateExerciseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseCreateOrConnectWithoutWorkoutSessionExercisesInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutWorkoutSessionExercisesInput, ExerciseUncheckedCreateWithoutWorkoutSessionExercisesInput>
  }

  export type WorkoutSessionSetCreateWithoutWorkoutSessionExerciseInput = {
    id?: string
    order: number
    reps: number
    weight: number
    createdAt?: Date | string
  }

  export type WorkoutSessionSetUncheckedCreateWithoutWorkoutSessionExerciseInput = {
    id?: string
    order: number
    reps: number
    weight: number
    createdAt?: Date | string
  }

  export type WorkoutSessionSetCreateOrConnectWithoutWorkoutSessionExerciseInput = {
    where: WorkoutSessionSetWhereUniqueInput
    create: XOR<WorkoutSessionSetCreateWithoutWorkoutSessionExerciseInput, WorkoutSessionSetUncheckedCreateWithoutWorkoutSessionExerciseInput>
  }

  export type WorkoutSessionSetCreateManyWorkoutSessionExerciseInputEnvelope = {
    data: WorkoutSessionSetCreateManyWorkoutSessionExerciseInput | WorkoutSessionSetCreateManyWorkoutSessionExerciseInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutSessionUpsertWithoutExercisesInput = {
    update: XOR<WorkoutSessionUpdateWithoutExercisesInput, WorkoutSessionUncheckedUpdateWithoutExercisesInput>
    create: XOR<WorkoutSessionCreateWithoutExercisesInput, WorkoutSessionUncheckedCreateWithoutExercisesInput>
    where?: WorkoutSessionWhereInput
  }

  export type WorkoutSessionUpdateToOneWithWhereWithoutExercisesInput = {
    where?: WorkoutSessionWhereInput
    data: XOR<WorkoutSessionUpdateWithoutExercisesInput, WorkoutSessionUncheckedUpdateWithoutExercisesInput>
  }

  export type WorkoutSessionUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWorkoutSessionsNestedInput
    workoutTemplate?: WorkoutTemplateUpdateOneWithoutWorkoutSessionsNestedInput
  }

  export type WorkoutSessionUncheckedUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    workoutTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseUpsertWithoutWorkoutSessionExercisesInput = {
    update: XOR<ExerciseUpdateWithoutWorkoutSessionExercisesInput, ExerciseUncheckedUpdateWithoutWorkoutSessionExercisesInput>
    create: XOR<ExerciseCreateWithoutWorkoutSessionExercisesInput, ExerciseUncheckedCreateWithoutWorkoutSessionExercisesInput>
    where?: ExerciseWhereInput
  }

  export type ExerciseUpdateToOneWithWhereWithoutWorkoutSessionExercisesInput = {
    where?: ExerciseWhereInput
    data: XOR<ExerciseUpdateWithoutWorkoutSessionExercisesInput, ExerciseUncheckedUpdateWithoutWorkoutSessionExercisesInput>
  }

  export type ExerciseUpdateWithoutWorkoutSessionExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    force?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    mechanic?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    primaryMuscles?: ExerciseUpdateprimaryMusclesInput | string[]
    secondaryMuscles?: ExerciseUpdatesecondaryMusclesInput | string[]
    instructions?: ExerciseUpdateinstructionsInput | string[]
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workoutTemplateExercises?: WorkoutTemplateExerciseUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutWorkoutSessionExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    force?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    mechanic?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    primaryMuscles?: ExerciseUpdateprimaryMusclesInput | string[]
    secondaryMuscles?: ExerciseUpdatesecondaryMusclesInput | string[]
    instructions?: ExerciseUpdateinstructionsInput | string[]
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workoutTemplateExercises?: WorkoutTemplateExerciseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type WorkoutSessionSetUpsertWithWhereUniqueWithoutWorkoutSessionExerciseInput = {
    where: WorkoutSessionSetWhereUniqueInput
    update: XOR<WorkoutSessionSetUpdateWithoutWorkoutSessionExerciseInput, WorkoutSessionSetUncheckedUpdateWithoutWorkoutSessionExerciseInput>
    create: XOR<WorkoutSessionSetCreateWithoutWorkoutSessionExerciseInput, WorkoutSessionSetUncheckedCreateWithoutWorkoutSessionExerciseInput>
  }

  export type WorkoutSessionSetUpdateWithWhereUniqueWithoutWorkoutSessionExerciseInput = {
    where: WorkoutSessionSetWhereUniqueInput
    data: XOR<WorkoutSessionSetUpdateWithoutWorkoutSessionExerciseInput, WorkoutSessionSetUncheckedUpdateWithoutWorkoutSessionExerciseInput>
  }

  export type WorkoutSessionSetUpdateManyWithWhereWithoutWorkoutSessionExerciseInput = {
    where: WorkoutSessionSetScalarWhereInput
    data: XOR<WorkoutSessionSetUpdateManyMutationInput, WorkoutSessionSetUncheckedUpdateManyWithoutWorkoutSessionExerciseInput>
  }

  export type WorkoutSessionSetScalarWhereInput = {
    AND?: WorkoutSessionSetScalarWhereInput | WorkoutSessionSetScalarWhereInput[]
    OR?: WorkoutSessionSetScalarWhereInput[]
    NOT?: WorkoutSessionSetScalarWhereInput | WorkoutSessionSetScalarWhereInput[]
    id?: StringFilter<"WorkoutSessionSet"> | string
    workoutSessionExerciseId?: StringFilter<"WorkoutSessionSet"> | string
    order?: IntFilter<"WorkoutSessionSet"> | number
    reps?: IntFilter<"WorkoutSessionSet"> | number
    weight?: FloatFilter<"WorkoutSessionSet"> | number
    createdAt?: DateTimeFilter<"WorkoutSessionSet"> | Date | string
  }

  export type WorkoutSessionExerciseCreateWithoutSetsInput = {
    id?: string
    createdAt?: Date | string
    workoutSession: WorkoutSessionCreateNestedOneWithoutExercisesInput
    exercise: ExerciseCreateNestedOneWithoutWorkoutSessionExercisesInput
  }

  export type WorkoutSessionExerciseUncheckedCreateWithoutSetsInput = {
    id?: string
    workoutSessionId: string
    exerciseId: string
    createdAt?: Date | string
  }

  export type WorkoutSessionExerciseCreateOrConnectWithoutSetsInput = {
    where: WorkoutSessionExerciseWhereUniqueInput
    create: XOR<WorkoutSessionExerciseCreateWithoutSetsInput, WorkoutSessionExerciseUncheckedCreateWithoutSetsInput>
  }

  export type WorkoutSessionExerciseUpsertWithoutSetsInput = {
    update: XOR<WorkoutSessionExerciseUpdateWithoutSetsInput, WorkoutSessionExerciseUncheckedUpdateWithoutSetsInput>
    create: XOR<WorkoutSessionExerciseCreateWithoutSetsInput, WorkoutSessionExerciseUncheckedCreateWithoutSetsInput>
    where?: WorkoutSessionExerciseWhereInput
  }

  export type WorkoutSessionExerciseUpdateToOneWithWhereWithoutSetsInput = {
    where?: WorkoutSessionExerciseWhereInput
    data: XOR<WorkoutSessionExerciseUpdateWithoutSetsInput, WorkoutSessionExerciseUncheckedUpdateWithoutSetsInput>
  }

  export type WorkoutSessionExerciseUpdateWithoutSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutSession?: WorkoutSessionUpdateOneRequiredWithoutExercisesNestedInput
    exercise?: ExerciseUpdateOneRequiredWithoutWorkoutSessionExercisesNestedInput
  }

  export type WorkoutSessionExerciseUncheckedUpdateWithoutSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutSessionId?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutTemplateCreateManyUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
  }

  export type WorkoutSessionCreateManyUserInput = {
    id?: string
    workoutTemplateId?: string | null
    startTime: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type WorkoutTemplateUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: WorkoutTemplateExerciseUpdateManyWithoutWorkoutTemplateNestedInput
    workoutSessions?: WorkoutSessionUpdateManyWithoutWorkoutTemplateNestedInput
  }

  export type WorkoutTemplateUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: WorkoutTemplateExerciseUncheckedUpdateManyWithoutWorkoutTemplateNestedInput
    workoutSessions?: WorkoutSessionUncheckedUpdateManyWithoutWorkoutTemplateNestedInput
  }

  export type WorkoutTemplateUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutTemplate?: WorkoutTemplateUpdateOneWithoutWorkoutSessionsNestedInput
    exercises?: WorkoutSessionExerciseUpdateManyWithoutWorkoutSessionNestedInput
  }

  export type WorkoutSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: WorkoutSessionExerciseUncheckedUpdateManyWithoutWorkoutSessionNestedInput
  }

  export type WorkoutSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutTemplateExerciseCreateManyExerciseInput = {
    id?: string
    workoutTemplateId: string
    createdAt?: Date | string
  }

  export type WorkoutSessionExerciseCreateManyExerciseInput = {
    id?: string
    workoutSessionId: string
    createdAt?: Date | string
  }

  export type WorkoutTemplateExerciseUpdateWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutTemplate?: WorkoutTemplateUpdateOneRequiredWithoutExercisesNestedInput
    sets?: WorkoutTemplateSetUpdateManyWithoutWorkoutTemplateExerciseNestedInput
  }

  export type WorkoutTemplateExerciseUncheckedUpdateWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutTemplateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sets?: WorkoutTemplateSetUncheckedUpdateManyWithoutWorkoutTemplateExerciseNestedInput
  }

  export type WorkoutTemplateExerciseUncheckedUpdateManyWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutTemplateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutSessionExerciseUpdateWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workoutSession?: WorkoutSessionUpdateOneRequiredWithoutExercisesNestedInput
    sets?: WorkoutSessionSetUpdateManyWithoutWorkoutSessionExerciseNestedInput
  }

  export type WorkoutSessionExerciseUncheckedUpdateWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutSessionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sets?: WorkoutSessionSetUncheckedUpdateManyWithoutWorkoutSessionExerciseNestedInput
  }

  export type WorkoutSessionExerciseUncheckedUpdateManyWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutSessionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutTemplateExerciseCreateManyWorkoutTemplateInput = {
    id?: string
    exerciseId: string
    createdAt?: Date | string
  }

  export type WorkoutSessionCreateManyWorkoutTemplateInput = {
    id?: string
    userId: string
    startTime: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
  }

  export type WorkoutTemplateExerciseUpdateWithoutWorkoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercise?: ExerciseUpdateOneRequiredWithoutWorkoutTemplateExercisesNestedInput
    sets?: WorkoutTemplateSetUpdateManyWithoutWorkoutTemplateExerciseNestedInput
  }

  export type WorkoutTemplateExerciseUncheckedUpdateWithoutWorkoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sets?: WorkoutTemplateSetUncheckedUpdateManyWithoutWorkoutTemplateExerciseNestedInput
  }

  export type WorkoutTemplateExerciseUncheckedUpdateManyWithoutWorkoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutSessionUpdateWithoutWorkoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWorkoutSessionsNestedInput
    exercises?: WorkoutSessionExerciseUpdateManyWithoutWorkoutSessionNestedInput
  }

  export type WorkoutSessionUncheckedUpdateWithoutWorkoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercises?: WorkoutSessionExerciseUncheckedUpdateManyWithoutWorkoutSessionNestedInput
  }

  export type WorkoutSessionUncheckedUpdateManyWithoutWorkoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutTemplateSetCreateManyWorkoutTemplateExerciseInput = {
    id?: string
    order: number
    reps: number
    weight: number
    createdAt?: Date | string
  }

  export type WorkoutTemplateSetUpdateWithoutWorkoutTemplateExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutTemplateSetUncheckedUpdateWithoutWorkoutTemplateExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutTemplateSetUncheckedUpdateManyWithoutWorkoutTemplateExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutSessionExerciseCreateManyWorkoutSessionInput = {
    id?: string
    exerciseId: string
    createdAt?: Date | string
  }

  export type WorkoutSessionExerciseUpdateWithoutWorkoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exercise?: ExerciseUpdateOneRequiredWithoutWorkoutSessionExercisesNestedInput
    sets?: WorkoutSessionSetUpdateManyWithoutWorkoutSessionExerciseNestedInput
  }

  export type WorkoutSessionExerciseUncheckedUpdateWithoutWorkoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sets?: WorkoutSessionSetUncheckedUpdateManyWithoutWorkoutSessionExerciseNestedInput
  }

  export type WorkoutSessionExerciseUncheckedUpdateManyWithoutWorkoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutSessionSetCreateManyWorkoutSessionExerciseInput = {
    id?: string
    order: number
    reps: number
    weight: number
    createdAt?: Date | string
  }

  export type WorkoutSessionSetUpdateWithoutWorkoutSessionExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutSessionSetUncheckedUpdateWithoutWorkoutSessionExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkoutSessionSetUncheckedUpdateManyWithoutWorkoutSessionExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}